; shader hash: 4df16e0545a6143cd1900137f1f68949
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2016
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2032
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2048
;       float4 View_ScreenToViewSpace;                ; Offset: 2064
;       int View_NumSceneColorMSAASamples;            ; Offset: 2080
;       float View_PreExposure;                       ; Offset: 2084
;       float View_OneOverPreExposure;                ; Offset: 2088
;       float PrePadding_View_2092;                   ; Offset: 2092
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2096
;       float4 View_SpecularOverrideParameter;        ; Offset: 2112
;       float4 View_NormalOverrideParameter;          ; Offset: 2128
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2144
;       float View_PrevFrameGameTime;                 ; Offset: 2152
;       float View_PrevFrameRealTime;                 ; Offset: 2156
;       float View_OutOfBoundsMask;                   ; Offset: 2160
;       float PrePadding_View_2164;                   ; Offset: 2164
;       float PrePadding_View_2168;                   ; Offset: 2168
;       float PrePadding_View_2172;                   ; Offset: 2172
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2176
;       float View_CullingSign;                       ; Offset: 2188
;       float View_NearPlane;                         ; Offset: 2192
;       float View_GameTime;                          ; Offset: 2196
;       float View_RealTime;                          ; Offset: 2200
;       float View_DeltaTime;                         ; Offset: 2204
;       float View_MaterialTextureMipBias;            ; Offset: 2208
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2212
;       uint View_Random;                             ; Offset: 2216
;       uint View_FrameNumber;                        ; Offset: 2220
;       uint View_StateFrameIndexMod8;                ; Offset: 2224
;       uint View_StateFrameIndex;                    ; Offset: 2228
;       uint View_DebugViewModeMask;                  ; Offset: 2232
;       float View_CameraCut;                         ; Offset: 2236
;       float View_UnlitViewmodeMask;                 ; Offset: 2240
;       float PrePadding_View_2244;                   ; Offset: 2244
;       float PrePadding_View_2248;                   ; Offset: 2248
;       float PrePadding_View_2252;                   ; Offset: 2252
;       float4 View_DirectionalLightColor;            ; Offset: 2256
;       float3 View_DirectionalLightDirection;        ; Offset: 2272
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2288
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2320
;       float4 View_TemporalAAParams;                 ; Offset: 2352
;       float4 View_CircleDOFParams;                  ; Offset: 2368
;       uint View_ForceDrawAllVelocities;             ; Offset: 2384
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2388
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2392
;       float View_DepthOfFieldScale;                 ; Offset: 2396
;       float View_DepthOfFieldFocalLength;           ; Offset: 2400
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2404
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2408
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2412
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2416
;       float View_GeneralPurposeTweak;               ; Offset: 2420
;       float View_GeneralPurposeTweak2;              ; Offset: 2424
;       float View_DemosaicVposOffset;                ; Offset: 2428
;       float View_DecalDepthBias;                    ; Offset: 2432
;       float PrePadding_View_2436;                   ; Offset: 2436
;       float PrePadding_View_2440;                   ; Offset: 2440
;       float PrePadding_View_2444;                   ; Offset: 2444
;       float3 View_IndirectLightingColorScale;       ; Offset: 2448
;       float PrePadding_View_2460;                   ; Offset: 2460
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2496
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2528
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2560
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2592
;       float4 View_AtmosphereLightDiscCosHalfApexAngle[2];; Offset: 2624
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2656
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2672
;       float PrePadding_View_2684;                   ; Offset: 2684
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2688
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2704
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2768
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2784
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2788
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2792
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2796
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2800
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2816
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2820
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2824
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2828
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2832
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2836
;       float PrePadding_View_2840;                   ; Offset: 2840
;       float PrePadding_View_2844;                   ; Offset: 2844
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2848
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2860
;       float View_RealTimeReflectionCapture;         ; Offset: 2864
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2868
;       float PrePadding_View_2872;                   ; Offset: 2872
;       float PrePadding_View_2876;                   ; Offset: 2876
;       float4 View_AmbientCubemapTint;               ; Offset: 2880
;       float View_AmbientCubemapIntensity;           ; Offset: 2896
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2900
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2904
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2908
;       float4 View_SkyLightColor;                    ; Offset: 2912
;       float4 View_MobileSkyIrradianceEnvironmentMap[7];; Offset: 2928
;       float View_MobilePreviewMode;                 ; Offset: 3040
;       float View_HMDEyePaddingOffset;               ; Offset: 3044
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3048
;       float View_ShowDecalsMask;                    ; Offset: 3052
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3056
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3060
;       float PrePadding_View_3064;                   ; Offset: 3064
;       float PrePadding_View_3068;                   ; Offset: 3068
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3072
;       int View_StereoPassIndex;                     ; Offset: 3084
;       float4 View_GlobalVolumeCenterAndExtent[6];   ; Offset: 3088
;       float4 View_GlobalVolumeWorldToUVAddAndMul[6];; Offset: 3184
;       float4 View_GlobalDistanceFieldMipWorldToUVScale[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipWorldToUVBias[6];; Offset: 3376
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3472
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3476
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3480
;       int PrePadding_View_3484;                     ; Offset: 3484
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3488
;       float PrePadding_View_3500;                   ; Offset: 3500
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3504
;       float View_GlobalVolumeDimension;             ; Offset: 3516
;       float View_GlobalVolumeTexelSize;             ; Offset: 3520
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3524
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3528
;       float View_FullyCoveredExpandSurfaceScale;    ; Offset: 3532
;       float View_UncoveredExpandSurfaceScale;       ; Offset: 3536
;       float View_UncoveredMinStepScale;             ; Offset: 3540
;       int2 View_CursorPosition;                     ; Offset: 3544
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3552
;       float PrePadding_View_3556;                   ; Offset: 3556
;       float PrePadding_View_3560;                   ; Offset: 3560
;       float PrePadding_View_3564;                   ; Offset: 3564
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3568
;       float PrePadding_View_3580;                   ; Offset: 3580
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3600
;       float View_VolumetricFogMaxDistance;          ; Offset: 3608
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3632
;       float PrePadding_View_3644;                   ; Offset: 3644
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3648
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3660
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3664
;       float View_StereoIPD;                         ; Offset: 3676
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3680
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3696
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3728
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3732
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3736
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3740
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3744
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3748
;       uint PrePadding_View_3752;                    ; Offset: 3752
;       uint PrePadding_View_3756;                    ; Offset: 3756
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3760
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3776
;       float PrePadding_View_3784;                   ; Offset: 3784
;       float PrePadding_View_3788;                   ; Offset: 3788
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3792
;       float View_OverrideLandscapeLOD;              ; Offset: 3808
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3812
;       float View_MinRoughness;                      ; Offset: 3816
;       float PrePadding_View_3820;                   ; Offset: 3820
;       float4 View_HairRenderInfo;                   ; Offset: 3824
;       uint View_EnableSkyLight;                     ; Offset: 3840
;       uint View_HairRenderInfoBits;                 ; Offset: 3844
;       uint View_HairComponents;                     ; Offset: 3848
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3852
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3856
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3872
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3888
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3900
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 3904
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 3908
;       int View_PhysicsFieldClipmapCount;            ; Offset: 3912
;       int View_PhysicsFieldTargetCount;             ; Offset: 3916
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 3920
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4432
;       uint View_GPUSceneViewId;                     ; Offset: 4436
;       uint PrePadding_View_4440;                    ; Offset: 4440
;       uint PrePadding_View_4444;                    ; Offset: 4444
;       uint PrePadding_View_4448;                    ; Offset: 4448
;       uint PrePadding_View_4452;                    ; Offset: 4452
;       uint PrePadding_View_4456;                    ; Offset: 4456
;       uint PrePadding_View_4460;                    ; Offset: 4460
;       uint PrePadding_View_4464;                    ; Offset: 4464
;       uint PrePadding_View_4468;                    ; Offset: 4468
;       uint PrePadding_View_4472;                    ; Offset: 4472
;       uint PrePadding_View_4476;                    ; Offset: 4476
;       uint PrePadding_View_4480;                    ; Offset: 4480
;       uint PrePadding_View_4484;                    ; Offset: 4484
;       uint PrePadding_View_4488;                    ; Offset: 4488
;       uint PrePadding_View_4492;                    ; Offset: 4492
;       uint PrePadding_View_4496;                    ; Offset: 4496
;       uint PrePadding_View_4500;                    ; Offset: 4500
;       uint PrePadding_View_4504;                    ; Offset: 4504
;       uint PrePadding_View_4508;                    ; Offset: 4508
;       uint PrePadding_View_4512;                    ; Offset: 4512
;       uint PrePadding_View_4516;                    ; Offset: 4516
;       uint PrePadding_View_4520;                    ; Offset: 4520
;       uint PrePadding_View_4524;                    ; Offset: 4524
;       uint PrePadding_View_4528;                    ; Offset: 4528
;       uint PrePadding_View_4532;                    ; Offset: 4532
;       uint PrePadding_View_4536;                    ; Offset: 4536
;       uint PrePadding_View_4540;                    ; Offset: 4540
;       uint PrePadding_View_4544;                    ; Offset: 4544
;       uint PrePadding_View_4548;                    ; Offset: 4548
;       uint PrePadding_View_4552;                    ; Offset: 4552
;       uint PrePadding_View_4556;                    ; Offset: 4556
;       uint PrePadding_View_4560;                    ; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint PrePadding_View_4568;                    ; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint PrePadding_View_4576;                    ; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint PrePadding_View_4584;                    ; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint PrePadding_View_4592;                    ; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint PrePadding_View_4600;                    ; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint PrePadding_View_4608;                    ; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint PrePadding_View_4616;                    ; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint PrePadding_View_4624;                    ; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint PrePadding_View_4632;                    ; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint PrePadding_View_4640;                    ; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint PrePadding_View_4648;                    ; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint PrePadding_View_4656;                    ; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint PrePadding_View_4664;                    ; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint PrePadding_View_4672;                    ; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint PrePadding_View_4680;                    ; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint PrePadding_View_4688;                    ; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint PrePadding_View_4696;                    ; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint PrePadding_View_4704;                    ; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint PrePadding_View_4712;                    ; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint PrePadding_View_4720;                    ; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint PrePadding_View_4728;                    ; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint PrePadding_View_4736;                    ; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint PrePadding_View_4744;                    ; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint PrePadding_View_4752;                    ; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint PrePadding_View_4760;                    ; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint PrePadding_View_4768;                    ; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint PrePadding_View_4776;                    ; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint PrePadding_View_4784;                    ; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint PrePadding_View_4792;                    ; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint PrePadding_View_4800;                    ; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint PrePadding_View_4808;                    ; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint PrePadding_View_4816;                    ; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint PrePadding_View_4824;                    ; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint PrePadding_View_4832;                    ; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint PrePadding_View_4840;                    ; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint PrePadding_View_4848;                    ; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint PrePadding_View_4856;                    ; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint PrePadding_View_4864;                    ; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint PrePadding_View_4872;                    ; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint PrePadding_View_4880;                    ; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint PrePadding_View_4888;                    ; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint PrePadding_View_4896;                    ; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint PrePadding_View_4904;                    ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint PrePadding_View_4912;                    ; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint PrePadding_View_4920;                    ; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint PrePadding_View_4928;                    ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint PrePadding_View_4936;                    ; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint PrePadding_View_4944;                    ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint View_bShadingEnergyConservation;         ; Offset: 4952
;       uint View_bShadingEnergyPreservation;         ; Offset: 4956
;   
;   } View;                                           ; Offset:    0 Size:  4960
;
; }
;
; cbuffer LandscapeMVF
; {
;
;   struct LandscapeMVF
;   {
;
;       int2 LandscapeMVF_SubXY;                      ; Offset:    0
;   
;   } LandscapeMVF;                                   ; Offset:    0 Size:     8
;
; }
;
; cbuffer LandscapeContinuousLODParameters
; {
;
;   struct LandscapeContinuousLODParameters
;   {
;
;       int LandscapeContinuousLODParameters_LandscapeIndex;; Offset:    0
;       int PrePadding_LandscapeContinuousLODParameters_4;; Offset:    4
;       int2 LandscapeContinuousLODParameters_Min;    ; Offset:    8
;       int2 LandscapeContinuousLODParameters_Size;   ; Offset:   16
;   
;   } LandscapeContinuousLODParameters;               ; Offset:    0 Size:    24
;
; }
;
; cbuffer LandscapeParameters
; {
;
;   struct LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       int PrePadding_LandscapeParameters_20;        ; Offset:   20
;       int PrePadding_LandscapeParameters_24;        ; Offset:   24
;       int PrePadding_LandscapeParameters_28;        ; Offset:   28
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   32
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   64
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   80
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:   96
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_BlendableLayerMask;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;   
;   } LandscapeParameters;                            ; Offset:    0 Size:   208
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[11];          ; Offset:    0
;   
;   } Material;                                       ; Offset:    0 Size:   176
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint UserData;                            ; Offset:    8
;           uint BaseInstanceIndex;                   ; Offset:   12
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; LandscapeMVF                      cbuffer      NA          NA     CB1            cb1     1
; LandscapeContinuousLODParameters   cbuffer      NA          NA     CB2            cb2     1
; LandscapeParameters               cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB5     cb0,space2     1
; View_MaterialTextureBilinearWrapedSampler   sampler      NA          NA      S0             s0     1
; LandscapeParameters_HeightmapTextureSampler   sampler      NA          NA      S1             s1     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S2             s2     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S3             s3     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_7Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S12            s12     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S13            s13     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S16            s16     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o      T2             t2     1
; View_LandscapeIndirection         texture     u32         buf      T3             t3     1
; View_LandscapePerComponentData    texture     f32         buf      T4             t4     1
; LandscapeContinuousLODParameters_SectionLODBias   texture     f32         buf      T5             t5     1
; LandscapeParameters_HeightmapTexture   texture     f32          2d      T6             t6     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d      T7             t7     1
; Material_Texture2D_0              texture     f32          2d      T8             t8     1
; Material_Texture2D_1              texture     f32          2d      T9             t9     1
; Material_Texture2D_2              texture     f32          2d     T10            t10     1
; Material_Texture2D_3              texture     f32          2d     T11            t11     1
; Material_Texture2D_4              texture     f32          2d     T12            t12     1
; Material_Texture2D_5              texture     f32          2d     T13            t13     1
; Material_Texture2D_6              texture     f32          2d     T14            t14     1
; Material_Texture2D_7              texture     f32          2d     T15            t15     1
; Material_Texture2D_8              texture     f32          2d     T16            t16     1
; Material_Texture2D_9              texture     f32          2d     T17            t17     1
; Material_Texture2D_10             texture     f32          2d     T18            t18     1
; Material_Texture2D_11             texture     f32          2d     T19            t19     1
; Material_Texture2D_12             texture     f32          2d     T20            t20     1
; Material_Texture2D_13             texture     f32          2d     T21            t21     1
; Material_Texture2D_14             texture     f32          2d     T22            t22     1
; Material_Texture2D_15             texture     f32          2d     T23            t23     1
; Material_Texture2D_16             texture     f32          2d     T24            t24     1
; HitGroupSystemIndexBuffer         texture    byte         r/o     T25      t0,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.SamplerState = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Buffer<float>" = type { float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [7 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%LandscapeMVF = type { <2 x i32> }
%LandscapeContinuousLODParameters = type { i32, i32, <2 x i32>, <2 x i32> }
%LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, %class.matrix.float.4.4 }
%Material = type { [11 x <4 x float>] }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32 }
%struct.FPackedMaterialClosestHitPayload = type { %struct.FMinimalPayload, i32, float, [3 x i32], [2 x i32], i32, i32, [2 x i32], i32, [2 x i32], i32 }
%struct.FMinimalPayload = type { float }
%struct.FDefaultAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A" = external constant %"class.Buffer<unsigned int>", align 4
@"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_0Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_1Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_2Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_3Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_4Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_5Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_8Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_9Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_10Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_13Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_14Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_15Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@View = external constant %View
@LandscapeMVF = external constant %LandscapeMVF
@LandscapeContinuousLODParameters = external constant %LandscapeContinuousLODParameters
@LandscapeParameters = external constant %LandscapeParameters
@Material = external constant %Material
@HitGroupSystemRootConstants = external constant %HitGroupSystemRootConstants
@NeighborOffset.i.i.i.i.i.0.hca = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 1, i32 0]
@NeighborOffset.i.i.i.i.i.1.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 0, i32 1]

; Function Attrs: nounwind
define void @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FDefaultAttributes* nocapture readonly %Attributes) #0 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", align 4, !noalias !65
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", align 4, !noalias !65
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", align 4, !noalias !65
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", align 4, !noalias !65
  %5 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", align 4, !noalias !70
  %6 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", align 4, !noalias !70
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", align 4, !noalias !70
  %8 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", align 4, !noalias !70
  %9 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", align 4, !noalias !70
  %10 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", align 4, !noalias !70
  %11 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", align 4, !noalias !70
  %12 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", align 4, !noalias !70
  %13 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", align 4, !noalias !70
  %14 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", align 4, !noalias !70
  %15 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", align 4
  %16 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", align 4, !noalias !72
  %17 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", align 4, !noalias !80
  %18 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !83
  %19 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %20 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %21 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %22 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %23 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %24 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !65
  %25 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %26 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %27 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %28 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %29 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %30 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %31 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %32 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %33 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %34 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %35 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !70
  %36 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %37 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %38 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", align 4, !noalias !72
  %39 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", align 4, !noalias !72
  %40 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", align 4, !noalias !72
  %41 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !88
  %42 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !96
  %43 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %44 = load %HitGroupSystemRootConstants, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, align 4
  %45 = load %Material, %Material* @Material, align 4
  %46 = load %LandscapeParameters, %LandscapeParameters* @LandscapeParameters, align 4
  %47 = load %LandscapeContinuousLODParameters, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, align 4
  %48 = load %LandscapeMVF, %LandscapeMVF* @LandscapeMVF, align 4
  %49 = load %View, %View* @View, align 4
  %50 = alloca [3 x float], align 4
  %51 = alloca [3 x float], align 4
  %52 = alloca [3 x float], align 4
  %53 = alloca [3 x i32], align 4
  %54 = alloca [3 x i32], align 4
  %55 = alloca [4 x float], align 4
  %56 = alloca [3 x float], align 4
  %57 = alloca [4 x float], align 4
  %58 = call %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32 160, %HitGroupSystemRootConstants %44)  ; CreateHandleForLib(Resource)
  %59 = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %45)  ; CreateHandleForLib(Resource)
  %60 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32 160, %LandscapeParameters %46)  ; CreateHandleForLib(Resource)
  %61 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32 160, %LandscapeContinuousLODParameters %47)  ; CreateHandleForLib(Resource)
  %62 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32 160, %LandscapeMVF %48)  ; CreateHandleForLib(Resource)
  %63 = call %dx.types.Handle @dx.op.createHandleForLib.View(i32 160, %View %49)  ; CreateHandleForLib(Resource)
  %64 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %65 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %64, float* %65, align 4, !tbaa !101
  %66 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6
  %67 = load i32, i32* %66, align 4, !tbaa !105
  %68 = and i32 %67, 33554432
  %69 = icmp ne i32 %68, 0
  br i1 %69, label %70, label %634

; <label>:70                                      ; preds = %0
  %71 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 0
  br label %72

; <label>:72                                      ; preds = %401, %70
  %73 = phi i32 [ %552, %401 ], [ 0, %70 ]
  %74 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %75 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %76 = extractvalue %dx.types.CBufRet.i32 %75, 1
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 3
  %79 = sub nsw i32 %76, %78
  %80 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %81 = extractvalue %dx.types.CBufRet.i32 %80, 0
  %82 = mul nsw i32 %79, %81
  %83 = extractvalue %dx.types.CBufRet.i32 %75, 0
  %84 = extractvalue %dx.types.CBufRet.i32 %77, 2
  %85 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.i32 %85, 0
  %87 = sitofp i32 %86 to float
  %88 = extractvalue %dx.types.CBufRet.i32 %77, 0
  %89 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %90 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %89, i32 %88, i32 undef)  ; BufferLoad(srv,index,wot)
  %91 = extractvalue %dx.types.ResRet.i32 %90, 0
  %92 = add i32 %82, %83
  %93 = sub i32 %92, %84
  %94 = add i32 %93, %91
  %95 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.f32 %95, 0
  %97 = fcmp fast oge float %96, 0.000000e+00
  %98 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %99 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %98, i32 %94, i32 undef)  ; BufferLoad(srv,index,wot)
  %100 = extractvalue %dx.types.ResRet.f32 %99, 0
  %101 = select i1 %97, float %96, float %100
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 1
  %104 = sitofp i32 %103 to float
  %105 = fadd fast float %104, %101
  %106 = call float @dx.op.binary.f32(i32 36, float %105, float %87)  ; FMin(a,b)
  %107 = call float @dx.op.unary.f32(i32 27, float %106)  ; Round_ni(value)
  %108 = fptoui float %107 to i32
  %109 = extractvalue %dx.types.CBufRet.i32 %75, 2
  %110 = and i32 %108, 31
  %111 = ashr i32 %109, %110
  %112 = add nsw i32 %111, -1
  %113 = sitofp i32 %112 to float
  %114 = fadd fast float %113, 1.000000e+00
  %115 = fptoui float %114 to i32
  %116 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %117 = extractvalue %dx.types.CBufRet.i32 %116, 1
  %118 = extractvalue %dx.types.CBufRet.i32 %116, 0
  %119 = and i32 %118, 255
  %120 = mul i32 %74, 3
  %121 = icmp eq i32 %119, 0
  br i1 %121, label %122, label %125

; <label>:122                                     ; preds = %72
  %123 = add i32 %120, 1
  %124 = add i32 %120, 2
  br label %149

; <label>:125                                     ; preds = %72
  %126 = icmp eq i32 %119, 2
  %127 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %18)  ; CreateHandleForLib(Resource)
  br i1 %126, label %128, label %142

; <label>:128                                     ; preds = %125
  %129 = mul i32 %74, 6
  %130 = add i32 %129, %117
  %131 = and i32 %130, -4
  %132 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %127, i32 %131, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %133 = extractvalue %dx.types.ResRet.i32 %132, 0
  %134 = extractvalue %dx.types.ResRet.i32 %132, 1
  %135 = icmp eq i32 %131, %130
  %136 = lshr i32 %133, 16
  %137 = and i32 %134, 65535
  br i1 %135, label %138, label %140

; <label>:138                                     ; preds = %128
  %139 = and i32 %133, 65535
  br label %149

; <label>:140                                     ; preds = %128
  %141 = lshr i32 %134, 16
  br label %149

; <label>:142                                     ; preds = %125
  %143 = mul i32 %119, %120
  %144 = add i32 %143, %117
  %145 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %127, i32 %144, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %146 = extractvalue %dx.types.ResRet.i32 %145, 0
  %147 = extractvalue %dx.types.ResRet.i32 %145, 1
  %148 = extractvalue %dx.types.ResRet.i32 %145, 2
  br label %149

; <label>:149                                     ; preds = %142, %140, %138, %122
  %150 = phi i32 [ %120, %122 ], [ %146, %142 ], [ %139, %138 ], [ %136, %140 ]
  %151 = phi i32 [ %123, %122 ], [ %147, %142 ], [ %136, %138 ], [ %137, %140 ]
  %152 = phi i32 [ %124, %122 ], [ %148, %142 ], [ %137, %138 ], [ %141, %140 ]
  %153 = getelementptr inbounds [3 x i32], [3 x i32]* %53, i32 0, i32 0
  store i32 %150, i32* %153, align 4
  %154 = getelementptr inbounds [3 x i32], [3 x i32]* %53, i32 0, i32 1
  store i32 %151, i32* %154, align 4
  %155 = getelementptr inbounds [3 x i32], [3 x i32]* %53, i32 0, i32 2
  store i32 %152, i32* %155, align 4
  %156 = getelementptr [3 x i32], [3 x i32]* %53, i32 0, i32 %73
  %157 = load i32, i32* %156, align 4, !tbaa !105, !noalias !107
  %158 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %159 = urem i32 %157, %115
  %160 = uitofp i32 %159 to float
  %161 = udiv i32 %157, %115
  %162 = uitofp i32 %161 to float
  %163 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %164 = extractvalue %dx.types.CBufRet.i32 %163, 0
  %165 = sitofp i32 %164 to float
  %166 = extractvalue %dx.types.CBufRet.i32 %163, 1
  %167 = sitofp i32 %166 to float
  %168 = and i32 %158, 2147483647
  %169 = mul i32 %168, 40
  %170 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %171 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %170, i32 %169, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %172 = extractvalue %dx.types.ResRet.f32 %171, 1
  %173 = bitcast float %172 to i32
  %174 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 277)  ; CBufferLoadLegacy(handle,regIndex)
  %175 = extractvalue %dx.types.CBufRet.i32 %174, 0
  %176 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %42)  ; CreateHandleForLib(Resource)
  %177 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %176, i32 %173, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %178 = extractvalue %dx.types.ResRet.f32 %177, 0
  %179 = bitcast float %178 to i32
  %180 = and i32 %179, 1048575
  %181 = icmp eq i32 %180, 1048575
  br i1 %181, label %290, label %182, !dx.controlflow.hints !110

; <label>:182                                     ; preds = %149
  %183 = mul nuw nsw i32 %180, 40
  %184 = or i32 %183, 1
  %185 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %170, i32 %184, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %186 = extractvalue %dx.types.ResRet.f32 %185, 0
  %187 = extractvalue %dx.types.ResRet.f32 %185, 1
  %188 = extractvalue %dx.types.ResRet.f32 %185, 2
  %189 = add i32 %175, %173
  %190 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %176, i32 %189, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %191 = extractvalue %dx.types.ResRet.f32 %190, 0
  %192 = extractvalue %dx.types.ResRet.f32 %190, 1
  %193 = extractvalue %dx.types.ResRet.f32 %190, 2
  %194 = extractvalue %dx.types.ResRet.f32 %190, 3
  %195 = bitcast float %191 to i32
  %196 = bitcast float %192 to i32
  %197 = bitcast float %193 to i32
  %198 = bitcast float %194 to i32
  %199 = shl i32 %175, 1
  %200 = add i32 %199, %173
  %201 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %176, i32 %200, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %202 = extractvalue %dx.types.ResRet.f32 %201, 0
  %203 = extractvalue %dx.types.ResRet.f32 %201, 1
  %204 = extractvalue %dx.types.ResRet.f32 %201, 2
  %205 = and i32 %195, 65535
  %206 = uitofp i32 %205 to float
  %207 = lshr i32 %195, 16
  %208 = uitofp i32 %207 to float
  %209 = and i32 %196, 32767
  %210 = uitofp i32 %209 to float
  %211 = fadd fast float %206, -3.276800e+04
  %212 = fadd fast float %208, -3.276800e+04
  %213 = fadd fast float %210, -1.638400e+04
  %214 = fmul fast float %213, 0x3F06A0F8E0000000
  %215 = and i32 %196, 32768
  %216 = icmp ne i32 %215, 0
  %217 = fadd fast float %211, %212
  %218 = fmul fast float %217, 0x3F00002000000000
  %219 = fsub fast float %211, %212
  %220 = fmul fast float %219, 0x3F00002000000000
  %221 = call float @dx.op.unary.f32(i32 6, float %218)  ; FAbs(value)
  %222 = call float @dx.op.unary.f32(i32 6, float %220)  ; FAbs(value)
  %223 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %221, float %222)  ; Dot2(ax,ay,bx,by)
  %224 = fsub fast float 2.000000e+00, %223
  %225 = call float @dx.op.dot3.f32(i32 55, float %218, float %220, float %224, float %218, float %220, float %224)  ; Dot3(ax,ay,az,bx,by,bz)
  %226 = call float @dx.op.unary.f32(i32 25, float %225)  ; Rsqrt(value)
  %227 = fmul fast float %226, %218
  %228 = fmul fast float %226, %220
  %229 = fmul fast float %226, %224
  %230 = fadd fast float %229, 1.000000e+00
  %231 = fdiv fast float 1.000000e+00, %230
  %232 = fmul fast float %228, %227
  %233 = fmul fast float %232, %231
  %234 = fsub fast float -0.000000e+00, %233
  %235 = fmul fast float %227, %227
  %236 = fmul fast float %235, %231
  %237 = fsub fast float 1.000000e+00, %236
  %238 = fmul fast float %228, %228
  %239 = fmul fast float %238, %231
  %240 = fsub fast float 1.000000e+00, %239
  %241 = fmul fast float %214, %214
  %242 = fsub fast float 1.000000e+00, %241
  %243 = call float @dx.op.unary.f32(i32 24, float %242)  ; Sqrt(value)
  %244 = select i1 %216, float %214, float %243
  %245 = select i1 %216, float %243, float %214
  %246 = fmul fast float %237, %244
  %247 = fmul fast float %244, %234
  %248 = fmul fast float %244, %227
  %249 = fmul fast float %245, %234
  %250 = fmul fast float %240, %245
  %251 = fmul fast float %228, %245
  %252 = fsub fast float -0.000000e+00, %251
  %253 = fadd fast float %246, %249
  %254 = fadd fast float %247, %250
  %255 = fsub fast float %252, %248
  %256 = fmul fast float %255, %228
  %257 = fmul fast float %254, %229
  %258 = fsub fast float %256, %257
  %259 = fmul fast float %253, %229
  %260 = fmul fast float %255, %227
  %261 = fsub fast float %259, %260
  %262 = fmul fast float %254, %227
  %263 = fmul fast float %253, %228
  %264 = fsub fast float %262, %263
  %265 = lshr i32 %198, 16
  %266 = shl i32 %265, 23
  %267 = add i32 %266, -125829120
  %268 = bitcast i32 %267 to float
  %269 = lshr i32 %197, 16
  %270 = and i32 %197, 65535
  %271 = and i32 %198, 65535
  %272 = uitofp i32 %270 to float
  %273 = uitofp i32 %269 to float
  %274 = uitofp i32 %271 to float
  %275 = fadd fast float %272, -3.276800e+04
  %276 = fadd fast float %273, -3.276800e+04
  %277 = fadd fast float %274, -3.276800e+04
  %278 = fmul fast float %268, %275
  %279 = fmul fast float %268, %276
  %280 = fmul fast float %268, %277
  %281 = fmul fast float %253, %278
  %282 = fmul fast float %254, %278
  %283 = fmul fast float %255, %278
  %284 = fmul fast float %258, %279
  %285 = fmul fast float %261, %279
  %286 = fmul fast float %264, %279
  %287 = fmul fast float %227, %280
  %288 = fmul fast float %228, %280
  %289 = fmul fast float %229, %280
  br label %290

; <label>:290                                     ; preds = %182, %149
  %291 = phi float [ 0.000000e+00, %149 ], [ %186, %182 ]
  %292 = phi float [ 0.000000e+00, %149 ], [ %187, %182 ]
  %293 = phi float [ 0.000000e+00, %149 ], [ %188, %182 ]
  %294 = phi float [ 0.000000e+00, %149 ], [ %281, %182 ]
  %295 = phi float [ 0.000000e+00, %149 ], [ %282, %182 ]
  %296 = phi float [ 0.000000e+00, %149 ], [ %283, %182 ]
  %297 = phi float [ 0.000000e+00, %149 ], [ %284, %182 ]
  %298 = phi float [ 0.000000e+00, %149 ], [ %285, %182 ]
  %299 = phi float [ 0.000000e+00, %149 ], [ %286, %182 ]
  %300 = phi float [ 0.000000e+00, %149 ], [ %287, %182 ]
  %301 = phi float [ 0.000000e+00, %149 ], [ %288, %182 ]
  %302 = phi float [ 0.000000e+00, %149 ], [ %289, %182 ]
  %303 = phi float [ 0.000000e+00, %149 ], [ %202, %182 ]
  %304 = phi float [ 0.000000e+00, %149 ], [ %203, %182 ]
  %305 = phi float [ 0.000000e+00, %149 ], [ %204, %182 ]
  %306 = sub nsw i32 %83, %84
  %307 = add nsw i32 %306, %82
  %308 = add i32 %91, %307
  %309 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %98, i32 %308, i32 undef)  ; BufferLoad(srv,index,wot)
  %310 = extractvalue %dx.types.ResRet.f32 %309, 0
  %311 = select i1 %97, float %96, float %310
  %312 = fadd fast float %104, %311
  %313 = call float @dx.op.binary.f32(i32 36, float %312, float %87)  ; FMin(a,b)
  %314 = call float @dx.op.unary.f32(i32 27, float %313)  ; Round_ni(value)
  %315 = fptoui float %314 to i32
  %316 = and i32 %315, 31
  %317 = ashr i32 %109, %316
  %318 = add nsw i32 %317, -1
  %319 = sitofp i32 %318 to float
  %320 = fdiv fast float 1.000000e+00, %319
  %321 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %38)  ; CreateHandleForLib(Resource)
  %322 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %321, i32 %307, i32 undef)  ; BufferLoad(srv,index,wot)
  %323 = fmul fast float %320, %160
  %324 = fmul fast float %320, %162
  %325 = fadd fast float %323, %165
  %326 = fadd fast float %324, %167
  %327 = extractvalue %dx.types.CBufRet.i32 %75, 3
  %328 = sitofp i32 %327 to float
  %329 = fdiv fast float %325, %328
  %330 = fdiv fast float %326, %328
  %331 = fsub fast float 1.000000e+00, %329
  %332 = fmul fast float %330, 2.000000e+00
  %333 = fmul fast float %331, 2.000000e+00
  %334 = fmul fast float %313, %332
  %335 = fmul fast float %313, %333
  %336 = fsub fast float 1.000000e+00, %332
  %337 = fsub fast float 1.000000e+00, %333
  br label %338

; <label>:338                                     ; preds = %396, %290
  %339 = phi i32 [ -1, %290 ], [ %400, %396 ]
  %340 = phi i32 [ 0, %290 ], [ %398, %396 ]
  %341 = phi i32 [ 0, %290 ], [ %394, %396 ]
  %342 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %343 = extractvalue %dx.types.CBufRet.i32 %342, 0
  %344 = extractvalue %dx.types.CBufRet.i32 %342, 1
  %345 = add i32 %343, %340
  %346 = add i32 %344, %339
  %347 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %348 = extractvalue %dx.types.CBufRet.i32 %347, 2
  %349 = extractvalue %dx.types.CBufRet.i32 %347, 3
  %350 = call i32 @dx.op.binary.i32(i32 37, i32 %348, i32 %345)  ; IMax(a,b)
  %351 = call i32 @dx.op.binary.i32(i32 37, i32 %349, i32 %346)  ; IMax(a,b)
  %352 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %353 = extractvalue %dx.types.CBufRet.i32 %352, 0
  %354 = extractvalue %dx.types.CBufRet.i32 %352, 1
  %355 = add i32 %348, -1
  %356 = add i32 %355, %353
  %357 = add i32 %349, -1
  %358 = add i32 %357, %354
  %359 = call i32 @dx.op.binary.i32(i32 38, i32 %356, i32 %350)  ; IMin(a,b)
  %360 = call i32 @dx.op.binary.i32(i32 38, i32 %358, i32 %351)  ; IMin(a,b)
  %361 = sub nsw i32 %360, %349
  %362 = mul nsw i32 %361, %353
  %363 = sub i32 %359, %348
  %364 = add nsw i32 %363, %362
  %365 = extractvalue %dx.types.CBufRet.i32 %347, 0
  %366 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %367 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %366, i32 %365, i32 undef)  ; BufferLoad(srv,index,wot)
  %368 = extractvalue %dx.types.ResRet.i32 %367, 0
  %369 = add i32 %364, %368
  %370 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %371 = extractvalue %dx.types.CBufRet.f32 %370, 0
  %372 = fcmp fast oge float %371, 0.000000e+00
  %373 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %374 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %373, i32 %369, i32 undef)  ; BufferLoad(srv,index,wot)
  %375 = extractvalue %dx.types.ResRet.f32 %374, 0
  %376 = select i1 %372, float %371, float %375
  %377 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %378 = extractvalue %dx.types.CBufRet.i32 %377, 0
  %379 = sitofp i32 %378 to float
  %380 = add i32 %368, %307
  %381 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %373, i32 %380, i32 undef)  ; BufferLoad(srv,index,wot)
  %382 = extractvalue %dx.types.ResRet.f32 %381, 0
  %383 = select i1 %372, float %371, float %382
  %384 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %385 = extractvalue %dx.types.CBufRet.i32 %384, 1
  %386 = sitofp i32 %385 to float
  %387 = fadd fast float %386, %383
  %388 = call float @dx.op.binary.f32(i32 36, float %387, float %379)  ; FMin(a,b)
  %389 = call float @dx.op.binary.f32(i32 35, float %376, float %388)  ; FMax(a,b)
  %390 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 %341
  %391 = fadd fast float %386, %389
  %392 = select i1 %372, float %371, float %391
  %393 = call float @dx.op.binary.f32(i32 36, float %392, float %379)  ; FMin(a,b)
  store float %393, float* %390, align 4, !tbaa !101, !noalias !111
  %394 = add nuw nsw i32 %341, 1
  %395 = icmp eq i32 %394, 4
  br i1 %395, label %401, label %396

; <label>:396                                     ; preds = %338
  %397 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %394
  %398 = load i32, i32* %397, align 4
  %399 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %394
  %400 = load i32, i32* %399, align 4
  br label %338

; <label>:401                                     ; preds = %338
  %402 = uitofp i32 %315 to float
  %403 = extractvalue %dx.types.ResRet.f32 %322, 0
  %404 = fsub fast float 1.000000e+00, %330
  %405 = fmul fast float %329, 2.000000e+00
  %406 = fmul fast float %404, 2.000000e+00
  %407 = fmul fast float %313, %405
  %408 = fmul fast float %313, %406
  %409 = fsub fast float 1.000000e+00, %405
  %410 = fsub fast float 1.000000e+00, %406
  %411 = load float, float* %71, align 4, !tbaa !101, !noalias !111
  %412 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 1
  %413 = load float, float* %412, align 4, !tbaa !101, !noalias !111
  %414 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 2
  %415 = load float, float* %414, align 4, !tbaa !101, !noalias !111
  %416 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 3
  %417 = load float, float* %416, align 4, !tbaa !101, !noalias !111
  %418 = fmul fast float %411, %336
  %419 = fmul fast float %413, %409
  %420 = fmul fast float %415, %337
  %421 = fmul fast float %417, %410
  %422 = fadd fast float %418, %334
  %423 = fadd fast float %419, %407
  %424 = fadd fast float %420, %335
  %425 = fadd fast float %421, %408
  %426 = fadd fast float %325, %326
  %427 = fdiv fast float %426, %328
  %428 = fcmp fast ogt float %427, 1.000000e+00
  %429 = fcmp fast olt float %329, %330
  %430 = select i1 %429, float %425, float %424
  %431 = select i1 %429, float %423, float %422
  %432 = select i1 %428, float %430, float %431
  %433 = call float @dx.op.unary.f32(i32 27, float %432)  ; Round_ni(value)
  %434 = fsub fast float %432, %433
  %435 = fsub fast float %433, %402
  %436 = fsub fast float -0.000000e+00, %435
  %437 = call float @dx.op.unary.f32(i32 21, float %436)  ; Exp(value)
  %438 = fmul fast float %437, %160
  %439 = fmul fast float %437, %162
  %440 = call float @dx.op.unary.f32(i32 27, float %438)  ; Round_ni(value)
  %441 = call float @dx.op.unary.f32(i32 27, float %439)  ; Round_ni(value)
  %442 = fsub fast float -0.000000e+00, %433
  %443 = call float @dx.op.unary.f32(i32 21, float %442)  ; Exp(value)
  %444 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %445 = extractvalue %dx.types.CBufRet.f32 %444, 0
  %446 = fmul fast float %445, %443
  %447 = fadd fast float %446, -1.000000e+00
  %448 = fmul fast float %443, 5.000000e-01
  %449 = fmul fast float %448, %445
  %450 = call float @dx.op.binary.f32(i32 35, float %449, float 2.000000e+00)  ; FMax(a,b)
  %451 = fadd fast float %450, -1.000000e+00
  %452 = extractvalue %dx.types.CBufRet.f32 %444, 1
  %453 = fmul fast float %452, %447
  %454 = fmul fast float %452, %451
  %455 = fdiv fast float %440, %453
  %456 = fdiv fast float %441, %453
  %457 = fmul fast float %440, 5.000000e-01
  %458 = fmul fast float %441, 5.000000e-01
  %459 = call float @dx.op.unary.f32(i32 27, float %457)  ; Round_ni(value)
  %460 = call float @dx.op.unary.f32(i32 27, float %458)  ; Round_ni(value)
  %461 = fdiv fast float %459, %454
  %462 = fdiv fast float %460, %454
  %463 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %464 = extractvalue %dx.types.CBufRet.f32 %463, 0
  %465 = extractvalue %dx.types.CBufRet.f32 %463, 1
  %466 = fmul fast float %464, %455
  %467 = fmul fast float %465, %456
  %468 = extractvalue %dx.types.CBufRet.f32 %463, 2
  %469 = extractvalue %dx.types.CBufRet.f32 %463, 3
  %470 = fadd fast float %466, %468
  %471 = fadd fast float %467, %469
  %472 = fmul fast float %464, 5.000000e-01
  %473 = fmul fast float %465, 5.000000e-01
  %474 = fadd fast float %470, %472
  %475 = fadd fast float %471, %473
  %476 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %477 = extractvalue %dx.types.CBufRet.f32 %476, 0
  %478 = extractvalue %dx.types.CBufRet.f32 %476, 1
  %479 = fmul fast float %477, %165
  %480 = fmul fast float %478, %167
  %481 = fadd fast float %474, %479
  %482 = fadd fast float %475, %480
  %483 = fsub fast float %433, %403
  %484 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %485 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %16)  ; CreateHandleForLib(Resource)
  %486 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %484, %dx.types.Handle %485, float %481, float %482, float undef, float undef, i32 0, i32 0, i32 undef, float %483)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %487 = extractvalue %dx.types.ResRet.f32 %486, 0
  %488 = extractvalue %dx.types.ResRet.f32 %486, 1
  %489 = fmul fast float %487, 6.528000e+04
  %490 = fmul fast float %488, 2.550000e+02
  %491 = fadd fast float %490, -3.276800e+04
  %492 = fadd fast float %491, %489
  %493 = fmul fast float %464, %461
  %494 = fmul fast float %465, %462
  %495 = fadd fast float %493, %468
  %496 = fadd fast float %494, %469
  %497 = fadd fast float %495, %472
  %498 = fadd fast float %496, %473
  %499 = fadd fast float %497, %479
  %500 = fadd fast float %498, %480
  %501 = fsub fast float 1.000000e+00, %403
  %502 = fadd fast float %501, %433
  %503 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %484, %dx.types.Handle %485, float %499, float %500, float undef, float undef, i32 0, i32 0, i32 undef, float %502)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %504 = extractvalue %dx.types.ResRet.f32 %503, 0
  %505 = extractvalue %dx.types.ResRet.f32 %503, 1
  %506 = fmul fast float %504, 6.528000e+04
  %507 = fmul fast float %505, 2.550000e+02
  %508 = fsub fast float %461, %455
  %509 = fsub fast float %462, %456
  %510 = fsub fast float -3.276800e+04, %492
  %511 = fadd fast float %510, %507
  %512 = fadd fast float %511, %506
  %513 = fmul fast float %508, %434
  %514 = fmul fast float %509, %434
  %515 = fmul fast float %512, %434
  %516 = fadd fast float %513, %455
  %517 = fadd fast float %514, %456
  %518 = fadd fast float %515, %492
  %519 = fmul fast float %518, 7.812500e-03
  %520 = extractvalue %dx.types.CBufRet.f32 %476, 3
  %521 = fmul fast float %520, %165
  %522 = fmul fast float %520, %167
  %523 = fadd fast float %516, %521
  %524 = fadd fast float %517, %522
  %525 = fmul fast float %523, %294
  %526 = fmul fast float %523, %295
  %527 = fmul fast float %523, %296
  %528 = fmul fast float %524, %297
  %529 = fmul fast float %524, %298
  %530 = fmul fast float %524, %299
  %531 = fmul fast float %519, %300
  %532 = fmul fast float %519, %301
  %533 = fmul fast float %519, %302
  %534 = fmul fast float %291, 2.097152e+06
  %535 = fmul fast float %292, 2.097152e+06
  %536 = fmul fast float %293, 2.097152e+06
  %537 = fadd fast float %303, %534
  %538 = fadd fast float %537, %528
  %539 = fadd fast float %538, %525
  %540 = fadd fast float %539, %531
  %541 = fadd fast float %304, %535
  %542 = fadd fast float %541, %529
  %543 = fadd fast float %542, %526
  %544 = fadd fast float %543, %532
  %545 = fadd fast float %305, %536
  %546 = fadd fast float %545, %530
  %547 = fadd fast float %546, %527
  %548 = fadd fast float %547, %533
  %549 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 %73
  %550 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 %73
  %551 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 %73
  store float %540, float* %549, align 4
  store float %544, float* %550, align 4
  store float %548, float* %551, align 4
  %552 = add nuw nsw i32 %73, 1
  %553 = icmp eq i32 %552, 3
  br i1 %553, label %554, label %72

; <label>:554                                     ; preds = %401
  %555 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 1
  %556 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 1
  %557 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 1
  %558 = load float, float* %555, align 4
  %559 = load float, float* %556, align 4
  %560 = load float, float* %557, align 4
  %561 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 0
  %562 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 0
  %563 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 0
  %564 = load float, float* %561, align 4
  %565 = load float, float* %562, align 4
  %566 = load float, float* %563, align 4
  %567 = fsub fast float %558, %564
  %568 = fsub fast float %559, %565
  %569 = fsub fast float %560, %566
  %570 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 2
  %571 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 2
  %572 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 2
  %573 = load float, float* %570, align 4
  %574 = load float, float* %571, align 4
  %575 = load float, float* %572, align 4
  %576 = fsub fast float %573, %564
  %577 = fsub fast float %574, %565
  %578 = fsub fast float %575, %566
  %579 = fmul fast float %577, %569
  %580 = fmul fast float %578, %568
  %581 = fsub fast float %579, %580
  %582 = fmul fast float %578, %567
  %583 = fmul fast float %576, %569
  %584 = fsub fast float %582, %583
  %585 = fmul fast float %576, %568
  %586 = fmul fast float %577, %567
  %587 = fsub fast float %585, %586
  %588 = call float @dx.op.dot3.f32(i32 55, float %581, float %584, float %587, float %581, float %584, float %587)  ; Dot3(ax,ay,az,bx,by,bz)
  %589 = fcmp fast oeq float %588, 0.000000e+00
  %590 = uitofp i1 %589 to float
  %591 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %592 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %593 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %594 = fsub fast float -0.000000e+00, %591
  %595 = fsub fast float -0.000000e+00, %592
  %596 = fsub fast float -0.000000e+00, %593
  %597 = call float @dx.op.unary.f32(i32 25, float %588)  ; Rsqrt(value)
  %598 = fmul fast float %597, %581
  %599 = fmul fast float %597, %584
  %600 = fmul fast float %597, %587
  %601 = fsub fast float %594, %598
  %602 = fsub fast float %595, %599
  %603 = fsub fast float %596, %600
  %604 = fmul fast float %601, %590
  %605 = fmul fast float %602, %590
  %606 = fmul fast float %603, %590
  %607 = fadd fast float %604, %598
  %608 = fadd fast float %605, %599
  %609 = fadd fast float %606, %600
  %610 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %611 = extractvalue %dx.types.CBufRet.i32 %116, 3
  %612 = sub i32 %610, %611
  %613 = call i32 @dx.op.legacyF32ToF16(i32 130, float %607)  ; LegacyF32ToF16(value)
  %614 = shl i32 %613, 16
  %615 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  %616 = load i32, i32* %615, align 4, !tbaa !105
  %617 = or i32 %616, %614
  store i32 %617, i32* %615, align 4, !tbaa !105
  %618 = call i32 @dx.op.legacyF32ToF16(i32 130, float %608)  ; LegacyF32ToF16(value)
  %619 = call i32 @dx.op.legacyF32ToF16(i32 130, float %609)  ; LegacyF32ToF16(value)
  %620 = shl i32 %619, 16
  %621 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  %622 = or i32 %620, %618
  store i32 %622, i32* %621, align 4, !tbaa !105
  %623 = mul i32 %158, 40
  %624 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %625 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %624, i32 %623, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %626 = extractvalue %dx.types.ResRet.f32 %625, 2
  %627 = bitcast float %626 to i32
  %628 = icmp eq i32 %627, 1
  %629 = select i1 %628, i32 0, i32 %612
  %630 = extractvalue %dx.types.ResRet.f32 %625, 1
  %631 = bitcast float %630 to i32
  %632 = add i32 %631, %629
  %633 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 %632, i32* %633, align 4, !tbaa !105
  br label %634

; <label>:634                                     ; preds = %554, %0
  %635 = and i32 %67, 8388608
  %636 = icmp eq i32 %635, 0
  br i1 %636, label %637, label %1547

; <label>:637                                     ; preds = %634
  %638 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %639 = load float, float* %638, align 4, !tbaa !101
  %640 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %641 = extractvalue %dx.types.CBufRet.f32 %640, 0
  %642 = extractvalue %dx.types.CBufRet.f32 %640, 2
  %643 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %644 = extractvalue %dx.types.CBufRet.f32 %643, 0
  %645 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 182)  ; CBufferLoadLegacy(handle,regIndex)
  %646 = extractvalue %dx.types.CBufRet.f32 %645, 1
  %647 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %648 = load i32, i32* %647, align 4, !tbaa !105, !noalias !114
  %649 = and i32 %648, 65535
  %650 = lshr i32 %648, 16
  %651 = call float @dx.op.legacyF16ToF32(i32 131, i32 %650)  ; LegacyF16ToF32(value)
  %652 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %653 = fmul fast float %652, %651
  %654 = getelementptr inbounds %struct.FDefaultAttributes, %struct.FDefaultAttributes* %Attributes, i32 0, i32 0
  %655 = load <2 x float>, <2 x float>* %654, align 4, !noalias !117
  %656 = extractelement <2 x float> %655, i32 0
  %657 = fsub fast float 1.000000e+00, %656
  %658 = extractelement <2 x float> %655, i32 1
  %659 = fsub fast float %657, %658
  %660 = getelementptr inbounds [3 x float], [3 x float]* %56, i32 0, i32 0
  store float %659, float* %660, align 4
  %661 = getelementptr inbounds [3 x float], [3 x float]* %56, i32 0, i32 1
  store float %656, float* %661, align 4
  %662 = getelementptr inbounds [3 x float], [3 x float]* %56, i32 0, i32 2
  store float %658, float* %662, align 4
  br label %663

; <label>:663                                     ; preds = %869, %637
  %664 = phi float [ 0.000000e+00, %637 ], [ %990, %869 ]
  %665 = phi float [ 0.000000e+00, %637 ], [ %991, %869 ]
  %666 = phi float [ 0.000000e+00, %637 ], [ %992, %869 ]
  %667 = phi float [ 0.000000e+00, %637 ], [ %993, %869 ]
  %668 = phi float [ 0.000000e+00, %637 ], [ %984, %869 ]
  %669 = phi float [ 0.000000e+00, %637 ], [ %985, %869 ]
  %670 = phi i32 [ 0, %637 ], [ %994, %869 ]
  %671 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %672 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %673 = extractvalue %dx.types.CBufRet.i32 %672, 1
  %674 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %675 = extractvalue %dx.types.CBufRet.i32 %674, 3
  %676 = sub nsw i32 %673, %675
  %677 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %678 = extractvalue %dx.types.CBufRet.i32 %677, 0
  %679 = mul nsw i32 %676, %678
  %680 = extractvalue %dx.types.CBufRet.i32 %672, 0
  %681 = extractvalue %dx.types.CBufRet.i32 %674, 2
  %682 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %683 = extractvalue %dx.types.CBufRet.i32 %682, 0
  %684 = sitofp i32 %683 to float
  %685 = extractvalue %dx.types.CBufRet.i32 %674, 0
  %686 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %687 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %686, i32 %685, i32 undef)  ; BufferLoad(srv,index,wot)
  %688 = extractvalue %dx.types.ResRet.i32 %687, 0
  %689 = add i32 %679, %680
  %690 = sub i32 %689, %681
  %691 = add i32 %690, %688
  %692 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %693 = extractvalue %dx.types.CBufRet.f32 %692, 0
  %694 = fcmp fast oge float %693, 0.000000e+00
  %695 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %696 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %695, i32 %691, i32 undef)  ; BufferLoad(srv,index,wot)
  %697 = extractvalue %dx.types.ResRet.f32 %696, 0
  %698 = select i1 %694, float %693, float %697
  %699 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %700 = extractvalue %dx.types.CBufRet.i32 %699, 1
  %701 = sitofp i32 %700 to float
  %702 = fadd fast float %701, %698
  %703 = call float @dx.op.binary.f32(i32 36, float %702, float %684)  ; FMin(a,b)
  %704 = call float @dx.op.unary.f32(i32 27, float %703)  ; Round_ni(value)
  %705 = fptoui float %704 to i32
  %706 = extractvalue %dx.types.CBufRet.i32 %672, 2
  %707 = and i32 %705, 31
  %708 = ashr i32 %706, %707
  %709 = add nsw i32 %708, -1
  %710 = sitofp i32 %709 to float
  %711 = fadd fast float %710, 1.000000e+00
  %712 = fptoui float %711 to i32
  %713 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %714 = extractvalue %dx.types.CBufRet.i32 %713, 1
  %715 = extractvalue %dx.types.CBufRet.i32 %713, 0
  %716 = and i32 %715, 255
  %717 = mul i32 %671, 3
  %718 = icmp eq i32 %716, 0
  br i1 %718, label %719, label %722

; <label>:719                                     ; preds = %663
  %720 = add i32 %717, 1
  %721 = add i32 %717, 2
  br label %746

; <label>:722                                     ; preds = %663
  %723 = icmp eq i32 %716, 2
  %724 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %18)  ; CreateHandleForLib(Resource)
  br i1 %723, label %725, label %739

; <label>:725                                     ; preds = %722
  %726 = mul i32 %671, 6
  %727 = add i32 %726, %714
  %728 = and i32 %727, -4
  %729 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %724, i32 %728, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %730 = extractvalue %dx.types.ResRet.i32 %729, 0
  %731 = extractvalue %dx.types.ResRet.i32 %729, 1
  %732 = icmp eq i32 %728, %727
  %733 = lshr i32 %730, 16
  %734 = and i32 %731, 65535
  br i1 %732, label %735, label %737

; <label>:735                                     ; preds = %725
  %736 = and i32 %730, 65535
  br label %746

; <label>:737                                     ; preds = %725
  %738 = lshr i32 %731, 16
  br label %746

; <label>:739                                     ; preds = %722
  %740 = mul i32 %716, %717
  %741 = add i32 %740, %714
  %742 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %724, i32 %741, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %743 = extractvalue %dx.types.ResRet.i32 %742, 0
  %744 = extractvalue %dx.types.ResRet.i32 %742, 1
  %745 = extractvalue %dx.types.ResRet.i32 %742, 2
  br label %746

; <label>:746                                     ; preds = %739, %737, %735, %719
  %747 = phi i32 [ %717, %719 ], [ %743, %739 ], [ %736, %735 ], [ %733, %737 ]
  %748 = phi i32 [ %720, %719 ], [ %744, %739 ], [ %733, %735 ], [ %734, %737 ]
  %749 = phi i32 [ %721, %719 ], [ %745, %739 ], [ %734, %735 ], [ %738, %737 ]
  %750 = getelementptr inbounds [3 x i32], [3 x i32]* %54, i32 0, i32 0
  store i32 %747, i32* %750, align 4
  %751 = getelementptr inbounds [3 x i32], [3 x i32]* %54, i32 0, i32 1
  store i32 %748, i32* %751, align 4
  %752 = getelementptr inbounds [3 x i32], [3 x i32]* %54, i32 0, i32 2
  store i32 %749, i32* %752, align 4
  %753 = getelementptr [3 x i32], [3 x i32]* %54, i32 0, i32 %670
  %754 = load i32, i32* %753, align 4, !tbaa !105, !noalias !118
  %755 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %756 = urem i32 %754, %712
  %757 = uitofp i32 %756 to float
  %758 = udiv i32 %754, %712
  %759 = uitofp i32 %758 to float
  %760 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %761 = extractvalue %dx.types.CBufRet.i32 %760, 0
  %762 = sitofp i32 %761 to float
  %763 = extractvalue %dx.types.CBufRet.i32 %760, 1
  %764 = sitofp i32 %763 to float
  %765 = and i32 %755, 2147483647
  %766 = mul i32 %765, 40
  %767 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %768 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %767, i32 %766, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %769 = extractvalue %dx.types.ResRet.f32 %768, 1
  %770 = bitcast float %769 to i32
  %771 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %42)  ; CreateHandleForLib(Resource)
  %772 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %771, i32 %770, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %773 = extractvalue %dx.types.ResRet.f32 %772, 0
  %774 = bitcast float %773 to i32
  %775 = and i32 %774, 1048575
  %776 = sub nsw i32 %680, %681
  %777 = add nsw i32 %776, %679
  %778 = add i32 %688, %777
  %779 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %695, i32 %778, i32 undef)  ; BufferLoad(srv,index,wot)
  %780 = extractvalue %dx.types.ResRet.f32 %779, 0
  %781 = select i1 %694, float %693, float %780
  %782 = fadd fast float %701, %781
  %783 = call float @dx.op.binary.f32(i32 36, float %782, float %684)  ; FMin(a,b)
  %784 = call float @dx.op.unary.f32(i32 27, float %783)  ; Round_ni(value)
  %785 = fptoui float %784 to i32
  %786 = and i32 %785, 31
  %787 = ashr i32 %706, %786
  %788 = add nsw i32 %787, -1
  %789 = sitofp i32 %788 to float
  %790 = fdiv fast float 1.000000e+00, %789
  %791 = fmul fast float %790, %757
  %792 = fmul fast float %790, %759
  %793 = fadd fast float %791, %762
  %794 = fadd fast float %792, %764
  %795 = extractvalue %dx.types.CBufRet.i32 %672, 3
  %796 = sitofp i32 %795 to float
  %797 = fdiv fast float %793, %796
  %798 = fdiv fast float %794, %796
  %799 = fsub fast float 1.000000e+00, %797
  %800 = fmul fast float %798, 2.000000e+00
  %801 = fmul fast float %799, 2.000000e+00
  %802 = fmul fast float %783, %800
  %803 = fmul fast float %783, %801
  %804 = fsub fast float 1.000000e+00, %800
  %805 = fsub fast float 1.000000e+00, %801
  br label %806

; <label>:806                                     ; preds = %864, %746
  %807 = phi i32 [ -1, %746 ], [ %868, %864 ]
  %808 = phi i32 [ 0, %746 ], [ %866, %864 ]
  %809 = phi i32 [ 0, %746 ], [ %862, %864 ]
  %810 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %811 = extractvalue %dx.types.CBufRet.i32 %810, 0
  %812 = extractvalue %dx.types.CBufRet.i32 %810, 1
  %813 = add i32 %811, %808
  %814 = add i32 %812, %807
  %815 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %816 = extractvalue %dx.types.CBufRet.i32 %815, 2
  %817 = extractvalue %dx.types.CBufRet.i32 %815, 3
  %818 = call i32 @dx.op.binary.i32(i32 37, i32 %816, i32 %813)  ; IMax(a,b)
  %819 = call i32 @dx.op.binary.i32(i32 37, i32 %817, i32 %814)  ; IMax(a,b)
  %820 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %61, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %821 = extractvalue %dx.types.CBufRet.i32 %820, 0
  %822 = extractvalue %dx.types.CBufRet.i32 %820, 1
  %823 = add i32 %816, -1
  %824 = add i32 %823, %821
  %825 = add i32 %817, -1
  %826 = add i32 %825, %822
  %827 = call i32 @dx.op.binary.i32(i32 38, i32 %824, i32 %818)  ; IMin(a,b)
  %828 = call i32 @dx.op.binary.i32(i32 38, i32 %826, i32 %819)  ; IMin(a,b)
  %829 = sub nsw i32 %828, %817
  %830 = mul nsw i32 %829, %821
  %831 = sub i32 %827, %816
  %832 = add nsw i32 %831, %830
  %833 = extractvalue %dx.types.CBufRet.i32 %815, 0
  %834 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %835 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %834, i32 %833, i32 undef)  ; BufferLoad(srv,index,wot)
  %836 = extractvalue %dx.types.ResRet.i32 %835, 0
  %837 = add i32 %832, %836
  %838 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %839 = extractvalue %dx.types.CBufRet.f32 %838, 0
  %840 = fcmp fast oge float %839, 0.000000e+00
  %841 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %842 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %841, i32 %837, i32 undef)  ; BufferLoad(srv,index,wot)
  %843 = extractvalue %dx.types.ResRet.f32 %842, 0
  %844 = select i1 %840, float %839, float %843
  %845 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %846 = extractvalue %dx.types.CBufRet.i32 %845, 0
  %847 = sitofp i32 %846 to float
  %848 = add i32 %836, %777
  %849 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %841, i32 %848, i32 undef)  ; BufferLoad(srv,index,wot)
  %850 = extractvalue %dx.types.ResRet.f32 %849, 0
  %851 = select i1 %840, float %839, float %850
  %852 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %853 = extractvalue %dx.types.CBufRet.i32 %852, 1
  %854 = sitofp i32 %853 to float
  %855 = fadd fast float %854, %851
  %856 = call float @dx.op.binary.f32(i32 36, float %855, float %847)  ; FMin(a,b)
  %857 = call float @dx.op.binary.f32(i32 35, float %844, float %856)  ; FMax(a,b)
  %858 = getelementptr inbounds [4 x float], [4 x float]* %55, i32 0, i32 %809
  %859 = fadd fast float %854, %857
  %860 = select i1 %840, float %839, float %859
  %861 = call float @dx.op.binary.f32(i32 36, float %860, float %847)  ; FMin(a,b)
  store float %861, float* %858, align 4, !tbaa !101, !noalias !72
  %862 = add nuw nsw i32 %809, 1
  %863 = icmp eq i32 %862, 4
  br i1 %863, label %869, label %864

; <label>:864                                     ; preds = %806
  %865 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %862
  %866 = load i32, i32* %865, align 4
  %867 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %862
  %868 = load i32, i32* %867, align 4
  br label %806

; <label>:869                                     ; preds = %806
  %870 = uitofp i32 %785 to float
  %871 = fsub fast float 1.000000e+00, %798
  %872 = fmul fast float %797, 2.000000e+00
  %873 = fmul fast float %871, 2.000000e+00
  %874 = fmul fast float %783, %872
  %875 = fmul fast float %783, %873
  %876 = fsub fast float 1.000000e+00, %872
  %877 = fsub fast float 1.000000e+00, %873
  %878 = getelementptr inbounds [4 x float], [4 x float]* %55, i32 0, i32 0
  %879 = load float, float* %878, align 4, !tbaa !101, !noalias !72
  %880 = getelementptr inbounds [4 x float], [4 x float]* %55, i32 0, i32 1
  %881 = load float, float* %880, align 4, !tbaa !101, !noalias !72
  %882 = getelementptr inbounds [4 x float], [4 x float]* %55, i32 0, i32 2
  %883 = load float, float* %882, align 4, !tbaa !101, !noalias !72
  %884 = getelementptr inbounds [4 x float], [4 x float]* %55, i32 0, i32 3
  %885 = load float, float* %884, align 4, !tbaa !101, !noalias !72
  %886 = fmul fast float %879, %804
  %887 = fmul fast float %881, %876
  %888 = fmul fast float %883, %805
  %889 = fmul fast float %885, %877
  %890 = fadd fast float %886, %802
  %891 = fadd fast float %887, %874
  %892 = fadd fast float %888, %803
  %893 = fadd fast float %889, %875
  %894 = fadd fast float %793, %794
  %895 = fdiv fast float %894, %796
  %896 = fcmp fast ogt float %895, 1.000000e+00
  %897 = fcmp fast olt float %797, %798
  %898 = select i1 %897, float %893, float %892
  %899 = select i1 %897, float %891, float %890
  %900 = select i1 %896, float %898, float %899
  %901 = call float @dx.op.unary.f32(i32 27, float %900)  ; Round_ni(value)
  %902 = fsub fast float %900, %901
  %903 = fsub fast float %901, %870
  %904 = fsub fast float -0.000000e+00, %903
  %905 = call float @dx.op.unary.f32(i32 21, float %904)  ; Exp(value)
  %906 = fmul fast float %905, %757
  %907 = call float @dx.op.unary.f32(i32 27, float %906)  ; Round_ni(value)
  %908 = fsub fast float -0.000000e+00, %901
  %909 = call float @dx.op.unary.f32(i32 21, float %908)  ; Exp(value)
  %910 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %911 = extractvalue %dx.types.CBufRet.f32 %910, 0
  %912 = fmul fast float %911, %909
  %913 = fadd fast float %912, -1.000000e+00
  %914 = fmul fast float %909, 5.000000e-01
  %915 = fmul fast float %914, %911
  %916 = call float @dx.op.binary.f32(i32 35, float %915, float 2.000000e+00)  ; FMax(a,b)
  %917 = fadd fast float %916, -1.000000e+00
  %918 = extractvalue %dx.types.CBufRet.f32 %910, 1
  %919 = fmul fast float %918, %913
  %920 = fmul fast float %918, %917
  %921 = fdiv fast float %907, %919
  %922 = fmul fast float %907, 5.000000e-01
  %923 = call float @dx.op.unary.f32(i32 27, float %922)  ; Round_ni(value)
  %924 = fdiv fast float %923, %920
  %925 = fsub fast float %924, %921
  %926 = fmul fast float %925, %902
  %927 = fadd fast float %926, %921
  %928 = extractvalue %dx.types.CBufRet.f32 %910, 2
  %929 = fadd fast float %927, %928
  %930 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %931 = extractvalue %dx.types.CBufRet.f32 %930, 3
  %932 = fmul fast float %931, %762
  %933 = fadd fast float %929, %932
  %934 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %935 = extractvalue %dx.types.CBufRet.f32 %934, 0
  %936 = fmul fast float %935, %927
  %937 = extractvalue %dx.types.CBufRet.f32 %934, 2
  %938 = fadd fast float %936, %937
  %939 = extractvalue %dx.types.CBufRet.f32 %930, 2
  %940 = fmul fast float %939, %762
  %941 = fadd fast float %938, %940
  %942 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %943 = extractvalue %dx.types.CBufRet.f32 %942, 0
  %944 = fmul fast float %943, %927
  %945 = extractvalue %dx.types.CBufRet.f32 %942, 2
  %946 = fadd fast float %944, %945
  %947 = fmul fast float %943, 5.000000e-01
  %948 = fadd fast float %946, %947
  %949 = extractvalue %dx.types.CBufRet.f32 %930, 0
  %950 = fmul fast float %949, %762
  %951 = fadd fast float %948, %950
  %952 = fmul fast float %905, %759
  %953 = call float @dx.op.unary.f32(i32 27, float %952)  ; Round_ni(value)
  %954 = fdiv fast float %953, %919
  %955 = fmul fast float %953, 5.000000e-01
  %956 = call float @dx.op.unary.f32(i32 27, float %955)  ; Round_ni(value)
  %957 = fdiv fast float %956, %920
  %958 = fsub fast float %957, %954
  %959 = fmul fast float %958, %902
  %960 = fadd fast float %959, %954
  %961 = extractvalue %dx.types.CBufRet.f32 %910, 3
  %962 = fadd fast float %960, %961
  %963 = fmul fast float %931, %764
  %964 = fadd fast float %962, %963
  %965 = extractvalue %dx.types.CBufRet.f32 %934, 1
  %966 = fmul fast float %965, %960
  %967 = extractvalue %dx.types.CBufRet.f32 %934, 3
  %968 = fadd fast float %966, %967
  %969 = fmul fast float %939, %764
  %970 = fadd fast float %968, %969
  %971 = extractvalue %dx.types.CBufRet.f32 %942, 1
  %972 = fmul fast float %971, %960
  %973 = extractvalue %dx.types.CBufRet.f32 %942, 3
  %974 = fadd fast float %972, %973
  %975 = fmul fast float %971, 5.000000e-01
  %976 = fadd fast float %974, %975
  %977 = extractvalue %dx.types.CBufRet.f32 %930, 1
  %978 = fmul fast float %977, %764
  %979 = fadd fast float %976, %978
  %980 = getelementptr [3 x float], [3 x float]* %56, i32 0, i32 %670
  %981 = load float, float* %980, align 4, !tbaa !101, !noalias !117
  %982 = fmul fast float %981, %933
  %983 = fmul fast float %981, %964
  %984 = fadd fast float %982, %668
  %985 = fadd fast float %983, %669
  %986 = fmul fast float %981, %941
  %987 = fmul fast float %981, %970
  %988 = fmul fast float %981, %951
  %989 = fmul fast float %981, %979
  %990 = fadd fast float %986, %664
  %991 = fadd fast float %987, %665
  %992 = fadd fast float %988, %666
  %993 = fadd fast float %989, %667
  %994 = add nuw nsw i32 %670, 1
  %995 = icmp eq i32 %994, 3
  br i1 %995, label %996, label %663

; <label>:996                                     ; preds = %869
  %997 = extractvalue %dx.types.CBufRet.f32 %640, 1
  %998 = extractvalue %dx.types.CBufRet.f32 %640, 3
  %999 = extractvalue %dx.types.CBufRet.f32 %643, 1
  %1000 = call float @dx.op.legacyF16ToF32(i32 131, i32 %649)  ; LegacyF16ToF32(value)
  %1001 = fadd fast float %653, %1000
  %1002 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %36)  ; CreateHandleForLib(Resource)
  %1003 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %1004 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1002, %dx.types.Handle %1003, float %992, float %993, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1005 = extractvalue %dx.types.ResRet.f32 %1004, 2
  %1006 = extractvalue %dx.types.ResRet.f32 %1004, 3
  %1007 = fmul fast float %1005, 2.000000e+00
  %1008 = fmul fast float %1006, 2.000000e+00
  %1009 = fadd fast float %1007, -1.000000e+00
  %1010 = fadd fast float %1008, -1.000000e+00
  %1011 = call float @dx.op.dot2.f32(i32 54, float %1009, float %1010, float %1009, float %1010)  ; Dot2(ax,ay,bx,by)
  %1012 = fsub fast float 1.000000e+00, %1011
  %1013 = call float @dx.op.binary.f32(i32 35, float %1012, float 0.000000e+00)  ; FMax(a,b)
  %1014 = call float @dx.op.unary.f32(i32 24, float %1013)  ; Sqrt(value)
  %1015 = fsub fast float -0.000000e+00, %1009
  %1016 = call float @dx.op.dot3.f32(i32 55, float %1014, float 0.000000e+00, float %1015, float %1014, float 0.000000e+00, float %1015)  ; Dot3(ax,ay,az,bx,by,bz)
  %1017 = call float @dx.op.unary.f32(i32 25, float %1016)  ; Rsqrt(value)
  %1018 = fmul fast float %1017, %1014
  %1019 = fmul fast float %1017, %1015
  %1020 = fmul fast float %1019, %1010
  %1021 = fmul fast float %1018, %1014
  %1022 = fmul fast float %1019, %1009
  %1023 = fsub fast float %1021, %1022
  %1024 = fmul fast float %1010, %1018
  %1025 = fsub fast float -0.000000e+00, %1024
  %1026 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1027 = extractvalue %dx.types.CBufRet.f32 %1026, 0
  %1028 = extractvalue %dx.types.CBufRet.f32 %1026, 1
  %1029 = extractvalue %dx.types.CBufRet.f32 %1026, 2
  %1030 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1031 = extractvalue %dx.types.CBufRet.f32 %1030, 0
  %1032 = extractvalue %dx.types.CBufRet.f32 %1030, 1
  %1033 = extractvalue %dx.types.CBufRet.f32 %1030, 2
  %1034 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1035 = extractvalue %dx.types.CBufRet.f32 %1034, 0
  %1036 = extractvalue %dx.types.CBufRet.f32 %1034, 1
  %1037 = extractvalue %dx.types.CBufRet.f32 %1034, 2
  %1038 = fmul fast float %1027, %1018
  %1039 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1035, float %1038)  ; FMad(a,b,c)
  %1040 = fmul fast float %1028, %1018
  %1041 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1036, float %1040)  ; FMad(a,b,c)
  %1042 = fmul fast float %1029, %1018
  %1043 = call float @dx.op.tertiary.f32(i32 46, float %1019, float %1037, float %1042)  ; FMad(a,b,c)
  %1044 = fmul fast float %1020, %1027
  %1045 = call float @dx.op.tertiary.f32(i32 46, float %1023, float %1031, float %1044)  ; FMad(a,b,c)
  %1046 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1035, float %1045)  ; FMad(a,b,c)
  %1047 = fmul fast float %1020, %1028
  %1048 = call float @dx.op.tertiary.f32(i32 46, float %1023, float %1032, float %1047)  ; FMad(a,b,c)
  %1049 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1036, float %1048)  ; FMad(a,b,c)
  %1050 = fmul fast float %1020, %1029
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %1023, float %1033, float %1050)  ; FMad(a,b,c)
  %1052 = call float @dx.op.tertiary.f32(i32 46, float %1025, float %1037, float %1051)  ; FMad(a,b,c)
  %1053 = fmul fast float %1027, %1009
  %1054 = call float @dx.op.tertiary.f32(i32 46, float %1010, float %1031, float %1053)  ; FMad(a,b,c)
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %1014, float %1035, float %1054)  ; FMad(a,b,c)
  %1056 = fmul fast float %1028, %1009
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %1010, float %1032, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %1014, float %1036, float %1057)  ; FMad(a,b,c)
  %1059 = fmul fast float %1029, %1009
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1010, float %1033, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1014, float %1037, float %1060)  ; FMad(a,b,c)
  %1062 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %1063 = icmp eq i32 %1062, 254
  %1064 = select i1 %1063, float 1.000000e+00, float -1.000000e+00
  %1065 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %35)  ; CreateHandleForLib(Resource)
  %1066 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %14)  ; CreateHandleForLib(Resource)
  %1067 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1065, %dx.types.Handle %1066, float %990, float %991, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1068 = extractvalue %dx.types.ResRet.f32 %1067, 0
  %1069 = extractvalue %dx.types.ResRet.f32 %1067, 1
  %1070 = extractvalue %dx.types.ResRet.f32 %1067, 2
  %1071 = extractvalue %dx.types.ResRet.f32 %1067, 3
  %1072 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1073 = extractvalue %dx.types.CBufRet.f32 %1072, 0
  %1074 = extractvalue %dx.types.CBufRet.f32 %1072, 1
  %1075 = extractvalue %dx.types.CBufRet.f32 %1072, 2
  %1076 = extractvalue %dx.types.CBufRet.f32 %1072, 3
  %1077 = call float @dx.op.dot4.f32(i32 56, float %1068, float %1069, float %1070, float %1071, float %1073, float %1074, float %1075, float %1076)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1078 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1079 = extractvalue %dx.types.CBufRet.f32 %1078, 1
  %1080 = fmul fast float %1079, %984
  %1081 = fmul fast float %1079, %985
  %1082 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %63, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %1083 = extractvalue %dx.types.CBufRet.f32 %1082, 0
  %1084 = fadd fast float %1083, %639
  %1085 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %34)  ; CreateHandleForLib(Resource)
  %1086 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %13)  ; CreateHandleForLib(Resource)
  %1087 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1085, %dx.types.Handle %1086, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1088 = extractvalue %dx.types.ResRet.f32 %1087, 1
  %1089 = extractvalue %dx.types.ResRet.f32 %1087, 2
  %1090 = extractvalue %dx.types.CBufRet.f32 %1078, 2
  %1091 = extractvalue %dx.types.CBufRet.f32 %1078, 3
  %1092 = fsub fast float %1090, %1091
  %1093 = fmul fast float %1092, %1089
  %1094 = fadd fast float %1093, %1091
  %1095 = call float @dx.op.unary.f32(i32 7, float %1094)  ; Saturate(value)
  %1096 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %33)  ; CreateHandleForLib(Resource)
  %1097 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %12)  ; CreateHandleForLib(Resource)
  %1098 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1096, %dx.types.Handle %1097, float %990, float %991, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1099 = extractvalue %dx.types.ResRet.f32 %1098, 0
  %1100 = extractvalue %dx.types.ResRet.f32 %1098, 1
  %1101 = extractvalue %dx.types.ResRet.f32 %1098, 2
  %1102 = extractvalue %dx.types.ResRet.f32 %1098, 3
  %1103 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1104 = extractvalue %dx.types.CBufRet.f32 %1103, 0
  %1105 = extractvalue %dx.types.CBufRet.f32 %1103, 1
  %1106 = extractvalue %dx.types.CBufRet.f32 %1103, 2
  %1107 = extractvalue %dx.types.CBufRet.f32 %1103, 3
  %1108 = call float @dx.op.dot4.f32(i32 56, float %1099, float %1100, float %1101, float %1102, float %1104, float %1105, float %1106, float %1107)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1109 = fmul fast float %1108, 2.000000e+00
  %1110 = fadd fast float %1095, -1.000000e+00
  %1111 = fadd fast float %1110, %1109
  %1112 = call float @dx.op.binary.f32(i32 35, float %1111, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1113 = call float @dx.op.binary.f32(i32 36, float %1112, float 1.000000e+00)  ; FMin(a,b)
  %1114 = fadd fast float %1113, %1077
  %1115 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %32)  ; CreateHandleForLib(Resource)
  %1116 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %11)  ; CreateHandleForLib(Resource)
  %1117 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1115, %dx.types.Handle %1116, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1118 = extractvalue %dx.types.ResRet.f32 %1117, 1
  %1119 = extractvalue %dx.types.ResRet.f32 %1117, 2
  %1120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1121 = extractvalue %dx.types.CBufRet.f32 %1120, 1
  %1122 = extractvalue %dx.types.CBufRet.f32 %1120, 2
  %1123 = fsub fast float %1121, %1122
  %1124 = fmul fast float %1123, %1119
  %1125 = fadd fast float %1124, %1122
  %1126 = call float @dx.op.unary.f32(i32 7, float %1125)  ; Saturate(value)
  %1127 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1128 = extractvalue %dx.types.CBufRet.f32 %1127, 0
  %1129 = extractvalue %dx.types.CBufRet.f32 %1127, 1
  %1130 = extractvalue %dx.types.CBufRet.f32 %1127, 2
  %1131 = extractvalue %dx.types.CBufRet.f32 %1127, 3
  %1132 = call float @dx.op.dot4.f32(i32 56, float %1068, float %1069, float %1070, float %1071, float %1128, float %1129, float %1130, float %1131)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1133 = fmul fast float %1132, 2.000000e+00
  %1134 = fadd fast float %1126, -1.000000e+00
  %1135 = fadd fast float %1134, %1133
  %1136 = call float @dx.op.binary.f32(i32 35, float %1135, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1137 = call float @dx.op.binary.f32(i32 36, float %1136, float 1.000000e+00)  ; FMin(a,b)
  %1138 = fadd fast float %1114, %1137
  %1139 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %31)  ; CreateHandleForLib(Resource)
  %1140 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %10)  ; CreateHandleForLib(Resource)
  %1141 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1139, %dx.types.Handle %1140, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1142 = extractvalue %dx.types.ResRet.f32 %1141, 1
  %1143 = extractvalue %dx.types.ResRet.f32 %1141, 2
  %1144 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1145 = extractvalue %dx.types.CBufRet.f32 %1144, 1
  %1146 = extractvalue %dx.types.CBufRet.f32 %1144, 2
  %1147 = fsub fast float %1145, %1146
  %1148 = fmul fast float %1147, %1143
  %1149 = fadd fast float %1148, %1146
  %1150 = call float @dx.op.unary.f32(i32 7, float %1149)  ; Saturate(value)
  %1151 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1152 = extractvalue %dx.types.CBufRet.f32 %1151, 0
  %1153 = extractvalue %dx.types.CBufRet.f32 %1151, 1
  %1154 = extractvalue %dx.types.CBufRet.f32 %1151, 2
  %1155 = extractvalue %dx.types.CBufRet.f32 %1151, 3
  %1156 = call float @dx.op.dot4.f32(i32 56, float %1068, float %1069, float %1070, float %1071, float %1152, float %1153, float %1154, float %1155)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1157 = fmul fast float %1156, 2.000000e+00
  %1158 = fadd fast float %1150, -1.000000e+00
  %1159 = fadd fast float %1158, %1157
  %1160 = call float @dx.op.binary.f32(i32 35, float %1159, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1161 = call float @dx.op.binary.f32(i32 36, float %1160, float 1.000000e+00)  ; FMin(a,b)
  %1162 = fadd fast float %1138, %1161
  %1163 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %30)  ; CreateHandleForLib(Resource)
  %1164 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %9)  ; CreateHandleForLib(Resource)
  %1165 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1163, %dx.types.Handle %1164, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1166 = extractvalue %dx.types.ResRet.f32 %1165, 1
  %1167 = extractvalue %dx.types.ResRet.f32 %1165, 2
  %1168 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1169 = extractvalue %dx.types.CBufRet.f32 %1168, 1
  %1170 = extractvalue %dx.types.CBufRet.f32 %1168, 2
  %1171 = fsub fast float %1169, %1170
  %1172 = fmul fast float %1171, %1167
  %1173 = fadd fast float %1172, %1170
  %1174 = call float @dx.op.unary.f32(i32 7, float %1173)  ; Saturate(value)
  %1175 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1176 = extractvalue %dx.types.CBufRet.f32 %1175, 0
  %1177 = extractvalue %dx.types.CBufRet.f32 %1175, 1
  %1178 = extractvalue %dx.types.CBufRet.f32 %1175, 2
  %1179 = extractvalue %dx.types.CBufRet.f32 %1175, 3
  %1180 = call float @dx.op.dot4.f32(i32 56, float %1068, float %1069, float %1070, float %1071, float %1176, float %1177, float %1178, float %1179)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1181 = fmul fast float %1180, 2.000000e+00
  %1182 = fadd fast float %1174, -1.000000e+00
  %1183 = fadd fast float %1182, %1181
  %1184 = call float @dx.op.binary.f32(i32 35, float %1183, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1185 = call float @dx.op.binary.f32(i32 36, float %1184, float 1.000000e+00)  ; FMin(a,b)
  %1186 = fadd fast float %1162, %1185
  %1187 = fdiv fast float 1.000000e+00, %1186
  %1188 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %29)  ; CreateHandleForLib(Resource)
  %1189 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %17)  ; CreateHandleForLib(Resource)
  %1190 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1188, %dx.types.Handle %1189, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1191 = extractvalue %dx.types.ResRet.f32 %1190, 0
  %1192 = extractvalue %dx.types.ResRet.f32 %1190, 1
  %1193 = fmul fast float %1191, 2.000000e+00
  %1194 = fmul fast float %1192, 2.000000e+00
  %1195 = fadd fast float %1193, -1.000000e+00
  %1196 = fadd fast float %1194, -1.000000e+00
  %1197 = call float @dx.op.dot2.f32(i32 54, float %1195, float %1196, float %1195, float %1196)  ; Dot2(ax,ay,bx,by)
  %1198 = fsub fast float 1.000000e+00, %1197
  %1199 = call float @dx.op.unary.f32(i32 7, float %1198)  ; Saturate(value)
  %1200 = call float @dx.op.unary.f32(i32 24, float %1199)  ; Sqrt(value)
  %1201 = fmul fast float %1187, %1077
  %1202 = fmul fast float %1195, %1201
  %1203 = fmul fast float %1196, %1201
  %1204 = fmul fast float %1200, %1201
  %1205 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %28)  ; CreateHandleForLib(Resource)
  %1206 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %8)  ; CreateHandleForLib(Resource)
  %1207 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1205, %dx.types.Handle %1206, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1208 = extractvalue %dx.types.ResRet.f32 %1207, 0
  %1209 = extractvalue %dx.types.ResRet.f32 %1207, 1
  %1210 = fmul fast float %1208, 2.000000e+00
  %1211 = fmul fast float %1209, 2.000000e+00
  %1212 = fadd fast float %1210, -1.000000e+00
  %1213 = fadd fast float %1211, -1.000000e+00
  %1214 = call float @dx.op.dot2.f32(i32 54, float %1212, float %1213, float %1212, float %1213)  ; Dot2(ax,ay,bx,by)
  %1215 = fsub fast float 1.000000e+00, %1214
  %1216 = call float @dx.op.unary.f32(i32 7, float %1215)  ; Saturate(value)
  %1217 = call float @dx.op.unary.f32(i32 24, float %1216)  ; Sqrt(value)
  %1218 = fmul fast float %1187, %1113
  %1219 = fmul fast float %1212, %1218
  %1220 = fmul fast float %1213, %1218
  %1221 = fmul fast float %1217, %1218
  %1222 = fadd fast float %1219, %1202
  %1223 = fadd fast float %1220, %1203
  %1224 = fadd fast float %1221, %1204
  %1225 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %27)  ; CreateHandleForLib(Resource)
  %1226 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleForLib(Resource)
  %1227 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1225, %dx.types.Handle %1226, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1228 = extractvalue %dx.types.ResRet.f32 %1227, 0
  %1229 = extractvalue %dx.types.ResRet.f32 %1227, 1
  %1230 = fmul fast float %1228, 2.000000e+00
  %1231 = fmul fast float %1229, 2.000000e+00
  %1232 = fadd fast float %1230, -1.000000e+00
  %1233 = fadd fast float %1231, -1.000000e+00
  %1234 = call float @dx.op.dot2.f32(i32 54, float %1232, float %1233, float %1232, float %1233)  ; Dot2(ax,ay,bx,by)
  %1235 = fsub fast float 1.000000e+00, %1234
  %1236 = call float @dx.op.unary.f32(i32 7, float %1235)  ; Saturate(value)
  %1237 = call float @dx.op.unary.f32(i32 24, float %1236)  ; Sqrt(value)
  %1238 = fmul fast float %1187, %1137
  %1239 = fmul fast float %1232, %1238
  %1240 = fmul fast float %1233, %1238
  %1241 = fmul fast float %1237, %1238
  %1242 = fadd fast float %1222, %1239
  %1243 = fadd fast float %1223, %1240
  %1244 = fadd fast float %1224, %1241
  %1245 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %26)  ; CreateHandleForLib(Resource)
  %1246 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %6)  ; CreateHandleForLib(Resource)
  %1247 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1245, %dx.types.Handle %1246, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1248 = extractvalue %dx.types.ResRet.f32 %1247, 0
  %1249 = extractvalue %dx.types.ResRet.f32 %1247, 1
  %1250 = fmul fast float %1248, 2.000000e+00
  %1251 = fmul fast float %1249, 2.000000e+00
  %1252 = fadd fast float %1250, -1.000000e+00
  %1253 = fadd fast float %1251, -1.000000e+00
  %1254 = call float @dx.op.dot2.f32(i32 54, float %1252, float %1253, float %1252, float %1253)  ; Dot2(ax,ay,bx,by)
  %1255 = fsub fast float 1.000000e+00, %1254
  %1256 = call float @dx.op.unary.f32(i32 7, float %1255)  ; Saturate(value)
  %1257 = call float @dx.op.unary.f32(i32 24, float %1256)  ; Sqrt(value)
  %1258 = fmul fast float %1187, %1161
  %1259 = fmul fast float %1252, %1258
  %1260 = fmul fast float %1253, %1258
  %1261 = fmul fast float %1257, %1258
  %1262 = fadd fast float %1242, %1259
  %1263 = fadd fast float %1243, %1260
  %1264 = fadd fast float %1244, %1261
  %1265 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %25)  ; CreateHandleForLib(Resource)
  %1266 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %5)  ; CreateHandleForLib(Resource)
  %1267 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1265, %dx.types.Handle %1266, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1268 = extractvalue %dx.types.ResRet.f32 %1267, 0
  %1269 = extractvalue %dx.types.ResRet.f32 %1267, 1
  %1270 = fmul fast float %1268, 2.000000e+00
  %1271 = fmul fast float %1269, 2.000000e+00
  %1272 = fadd fast float %1270, -1.000000e+00
  %1273 = fadd fast float %1271, -1.000000e+00
  %1274 = call float @dx.op.dot2.f32(i32 54, float %1272, float %1273, float %1272, float %1273)  ; Dot2(ax,ay,bx,by)
  %1275 = fsub fast float 1.000000e+00, %1274
  %1276 = call float @dx.op.unary.f32(i32 7, float %1275)  ; Saturate(value)
  %1277 = call float @dx.op.unary.f32(i32 24, float %1276)  ; Sqrt(value)
  %1278 = fmul fast float %1187, %1185
  %1279 = fmul fast float %1272, %1278
  %1280 = fmul fast float %1273, %1278
  %1281 = fmul fast float %1277, %1278
  %1282 = fadd fast float %1262, %1279
  %1283 = fadd fast float %1263, %1280
  %1284 = fadd fast float %1264, %1281
  %1285 = fmul fast float %1282, %998
  %1286 = fmul fast float %1283, %998
  %1287 = fmul fast float %1284, %998
  %1288 = fadd fast float %1285, %641
  %1289 = fadd fast float %1286, %997
  %1290 = fadd fast float %1287, %642
  %1291 = call float @dx.op.dot3.f32(i32 55, float %1288, float %1289, float %1290, float %1288, float %1289, float %1290)  ; Dot3(ax,ay,az,bx,by,bz)
  %1292 = call float @dx.op.unary.f32(i32 25, float %1291)  ; Rsqrt(value)
  %1293 = fmul fast float %1288, %1292
  %1294 = fmul fast float %1289, %1292
  %1295 = fmul fast float %1290, %1292
  %1296 = fmul fast float %1293, %1039
  %1297 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %1046, float %1296)  ; FMad(a,b,c)
  %1298 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1055, float %1297)  ; FMad(a,b,c)
  %1299 = fmul fast float %1293, %1041
  %1300 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %1049, float %1299)  ; FMad(a,b,c)
  %1301 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1058, float %1300)  ; FMad(a,b,c)
  %1302 = fmul fast float %1293, %1043
  %1303 = call float @dx.op.tertiary.f32(i32 46, float %1294, float %1052, float %1302)  ; FMad(a,b,c)
  %1304 = call float @dx.op.tertiary.f32(i32 46, float %1295, float %1061, float %1303)  ; FMad(a,b,c)
  %1305 = call float @dx.op.dot3.f32(i32 55, float %1298, float %1301, float %1304, float %1298, float %1301, float %1304)  ; Dot3(ax,ay,az,bx,by,bz)
  %1306 = call float @dx.op.unary.f32(i32 25, float %1305)  ; Rsqrt(value)
  %1307 = fmul fast float %1298, %1064
  %1308 = fmul fast float %1307, %1306
  %1309 = fmul fast float %1301, %1064
  %1310 = fmul fast float %1309, %1306
  %1311 = fmul fast float %1304, %1064
  %1312 = fmul fast float %1311, %1306
  %1313 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %59, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1314 = extractvalue %dx.types.CBufRet.f32 %1313, 0
  %1315 = extractvalue %dx.types.CBufRet.f32 %1313, 1
  %1316 = extractvalue %dx.types.CBufRet.f32 %1313, 2
  %1317 = extractvalue %dx.types.CBufRet.f32 %1313, 3
  %1318 = fmul fast float %1315, %1314
  %1319 = fmul fast float %1316, %1314
  %1320 = fmul fast float %1317, %1314
  %1321 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %24)  ; CreateHandleForLib(Resource)
  %1322 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1321, %dx.types.Handle %1189, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1323 = extractvalue %dx.types.ResRet.f32 %1322, 0
  %1324 = extractvalue %dx.types.ResRet.f32 %1322, 1
  %1325 = extractvalue %dx.types.ResRet.f32 %1322, 2
  %1326 = fmul fast float %1323, %1201
  %1327 = fmul fast float %1324, %1201
  %1328 = fmul fast float %1325, %1201
  %1329 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %23)  ; CreateHandleForLib(Resource)
  %1330 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleForLib(Resource)
  %1331 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1329, %dx.types.Handle %1330, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1332 = extractvalue %dx.types.ResRet.f32 %1331, 0
  %1333 = extractvalue %dx.types.ResRet.f32 %1331, 1
  %1334 = extractvalue %dx.types.ResRet.f32 %1331, 2
  %1335 = fmul fast float %1332, %1218
  %1336 = fmul fast float %1333, %1218
  %1337 = fmul fast float %1334, %1218
  %1338 = fadd fast float %1335, %1326
  %1339 = fadd fast float %1336, %1327
  %1340 = fadd fast float %1337, %1328
  %1341 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %22)  ; CreateHandleForLib(Resource)
  %1342 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleForLib(Resource)
  %1343 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1341, %dx.types.Handle %1342, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1344 = extractvalue %dx.types.ResRet.f32 %1343, 0
  %1345 = extractvalue %dx.types.ResRet.f32 %1343, 1
  %1346 = extractvalue %dx.types.ResRet.f32 %1343, 2
  %1347 = fmul fast float %1344, %1238
  %1348 = fmul fast float %1345, %1238
  %1349 = fmul fast float %1346, %1238
  %1350 = fadd fast float %1338, %1347
  %1351 = fadd fast float %1339, %1348
  %1352 = fadd fast float %1340, %1349
  %1353 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %21)  ; CreateHandleForLib(Resource)
  %1354 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %1355 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1353, %dx.types.Handle %1354, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1356 = extractvalue %dx.types.ResRet.f32 %1355, 0
  %1357 = extractvalue %dx.types.ResRet.f32 %1355, 1
  %1358 = extractvalue %dx.types.ResRet.f32 %1355, 2
  %1359 = fmul fast float %1356, %1258
  %1360 = fmul fast float %1357, %1258
  %1361 = fmul fast float %1358, %1258
  %1362 = fadd fast float %1350, %1359
  %1363 = fadd fast float %1351, %1360
  %1364 = fadd fast float %1352, %1361
  %1365 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %20)  ; CreateHandleForLib(Resource)
  %1366 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleForLib(Resource)
  %1367 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1365, %dx.types.Handle %1366, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %1084)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1368 = extractvalue %dx.types.ResRet.f32 %1367, 0
  %1369 = extractvalue %dx.types.ResRet.f32 %1367, 1
  %1370 = extractvalue %dx.types.ResRet.f32 %1367, 2
  %1371 = fmul fast float %1368, %1278
  %1372 = fmul fast float %1369, %1278
  %1373 = fmul fast float %1370, %1278
  %1374 = fadd fast float %1362, %1371
  %1375 = fadd fast float %1363, %1372
  %1376 = fadd fast float %1364, %1373
  %1377 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %19)  ; CreateHandleForLib(Resource)
  %1378 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1377, %dx.types.Handle %1189, float %1080, float %1081, float undef, float undef, i32 0, i32 0, i32 undef, float %639)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1379 = extractvalue %dx.types.ResRet.f32 %1378, 1
  %1380 = fmul fast float %1379, %1201
  %1381 = fmul fast float %1218, %1088
  %1382 = fmul fast float %1238, %1118
  %1383 = fmul fast float %1258, %1142
  %1384 = fmul fast float %1278, %1166
  %1385 = fadd fast float %1382, %1381
  %1386 = fadd fast float %1385, %1383
  %1387 = fadd fast float %1386, %1384
  %1388 = fadd fast float %1387, %1380
  %1389 = mul nuw nsw i32 %775, 40
  %1390 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %767, i32 %1389, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1391 = extractvalue %dx.types.ResRet.f32 %1390, 0
  %1392 = bitcast float %1391 to i32
  %1393 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %1394 = zext i1 %1063 to i32
  %1395 = call float @dx.op.unary.f32(i32 7, float %1374)  ; Saturate(value)
  %1396 = call float @dx.op.unary.f32(i32 7, float %1375)  ; Saturate(value)
  %1397 = call float @dx.op.unary.f32(i32 7, float %1376)  ; Saturate(value)
  %1398 = call float @dx.op.unary.f32(i32 7, float %1388)  ; Saturate(value)
  %1399 = fmul fast float %1398, %999
  %1400 = fadd fast float %1399, %644
  %1401 = call float @dx.op.dot3.f32(i32 55, float %1308, float %1310, float %1312, float %1308, float %1310, float %1312)  ; Dot3(ax,ay,az,bx,by,bz)
  %1402 = call float @dx.op.unary.f32(i32 25, float %1401)  ; Rsqrt(value)
  %1403 = fmul fast float %1402, %1308
  %1404 = fmul fast float %1402, %1310
  %1405 = fmul fast float %1402, %1312
  %1406 = call float @dx.op.binary.f32(i32 35, float %1318, float 0.000000e+00)  ; FMax(a,b)
  %1407 = call float @dx.op.binary.f32(i32 35, float %1319, float 0.000000e+00)  ; FMax(a,b)
  %1408 = call float @dx.op.binary.f32(i32 35, float %1320, float 0.000000e+00)  ; FMax(a,b)
  %1409 = and i32 %67, 16777216
  %1410 = icmp eq i32 %1409, 0
  br i1 %1410, label %1477, label %1411

; <label>:1411                                    ; preds = %996
  %1412 = extractvalue %dx.types.CBufRet.f32 %645, 2
  %1413 = extractvalue %dx.types.CBufRet.f32 %645, 0
  %1414 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %41)  ; CreateHandleForLib(Resource)
  %1415 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1416 = extractvalue %dx.types.ResRet.f32 %1415, 0
  %1417 = extractvalue %dx.types.ResRet.f32 %1415, 1
  %1418 = extractvalue %dx.types.ResRet.f32 %1415, 2
  %1419 = extractvalue %dx.types.ResRet.f32 %1415, 3
  %1420 = call float @dx.op.dot4.f32(i32 56, float %1416, float %1417, float %1418, float %1419, float %1403, float %1404, float %1405, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1421 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1422 = extractvalue %dx.types.ResRet.f32 %1421, 0
  %1423 = extractvalue %dx.types.ResRet.f32 %1421, 1
  %1424 = extractvalue %dx.types.ResRet.f32 %1421, 2
  %1425 = extractvalue %dx.types.ResRet.f32 %1421, 3
  %1426 = call float @dx.op.dot4.f32(i32 56, float %1422, float %1423, float %1424, float %1425, float %1403, float %1404, float %1405, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1427 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1428 = extractvalue %dx.types.ResRet.f32 %1427, 0
  %1429 = extractvalue %dx.types.ResRet.f32 %1427, 1
  %1430 = extractvalue %dx.types.ResRet.f32 %1427, 2
  %1431 = extractvalue %dx.types.ResRet.f32 %1427, 3
  %1432 = call float @dx.op.dot4.f32(i32 56, float %1428, float %1429, float %1430, float %1431, float %1403, float %1404, float %1405, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1433 = fmul fast float %1403, %1404
  %1434 = fmul fast float %1404, %1405
  %1435 = fmul fast float %1405, %1405
  %1436 = fmul fast float %1405, %1403
  %1437 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1438 = extractvalue %dx.types.ResRet.f32 %1437, 0
  %1439 = extractvalue %dx.types.ResRet.f32 %1437, 1
  %1440 = extractvalue %dx.types.ResRet.f32 %1437, 2
  %1441 = extractvalue %dx.types.ResRet.f32 %1437, 3
  %1442 = call float @dx.op.dot4.f32(i32 56, float %1438, float %1439, float %1440, float %1441, float %1433, float %1434, float %1435, float %1436)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1443 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1444 = extractvalue %dx.types.ResRet.f32 %1443, 0
  %1445 = extractvalue %dx.types.ResRet.f32 %1443, 1
  %1446 = extractvalue %dx.types.ResRet.f32 %1443, 2
  %1447 = extractvalue %dx.types.ResRet.f32 %1443, 3
  %1448 = call float @dx.op.dot4.f32(i32 56, float %1444, float %1445, float %1446, float %1447, float %1433, float %1434, float %1435, float %1436)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1449 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1450 = extractvalue %dx.types.ResRet.f32 %1449, 0
  %1451 = extractvalue %dx.types.ResRet.f32 %1449, 1
  %1452 = extractvalue %dx.types.ResRet.f32 %1449, 2
  %1453 = extractvalue %dx.types.ResRet.f32 %1449, 3
  %1454 = call float @dx.op.dot4.f32(i32 56, float %1450, float %1451, float %1452, float %1453, float %1433, float %1434, float %1435, float %1436)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1455 = fmul fast float %1403, %1403
  %1456 = fmul fast float %1404, %1404
  %1457 = fsub fast float %1455, %1456
  %1458 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1414, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1459 = extractvalue %dx.types.ResRet.f32 %1458, 0
  %1460 = extractvalue %dx.types.ResRet.f32 %1458, 1
  %1461 = extractvalue %dx.types.ResRet.f32 %1458, 2
  %1462 = fmul fast float %1459, %1457
  %1463 = fmul fast float %1460, %1457
  %1464 = fmul fast float %1461, %1457
  %1465 = fadd fast float %1442, %1420
  %1466 = fadd fast float %1448, %1426
  %1467 = fadd fast float %1454, %1432
  %1468 = fadd fast float %1465, %1462
  %1469 = fadd fast float %1466, %1463
  %1470 = fadd fast float %1467, %1464
  %1471 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1468)  ; FMax(a,b)
  %1472 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1469)  ; FMax(a,b)
  %1473 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1470)  ; FMax(a,b)
  %1474 = fmul fast float %1471, %1413
  %1475 = fmul fast float %1472, %646
  %1476 = fmul fast float %1473, %1412
  br label %1477

; <label>:1477                                    ; preds = %1411, %996
  %1478 = phi float [ %1474, %1411 ], [ 0.000000e+00, %996 ]
  %1479 = phi float [ %1475, %1411 ], [ 0.000000e+00, %996 ]
  %1480 = phi float [ %1476, %1411 ], [ 0.000000e+00, %996 ]
  %1481 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1001)  ; LegacyF32ToF16(value)
  %1482 = call i32 @dx.op.legacyF32ToF16(i32 130, float %651)  ; LegacyF32ToF16(value)
  %1483 = shl i32 %1482, 16
  %1484 = or i32 %1483, %1481
  %1485 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1406)  ; LegacyF32ToF16(value)
  %1486 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1407)  ; LegacyF32ToF16(value)
  %1487 = shl i32 %1486, 16
  %1488 = or i32 %1487, %1485
  %1489 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1408)  ; LegacyF32ToF16(value)
  %1490 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1403)  ; LegacyF32ToF16(value)
  %1491 = shl i32 %1490, 16
  %1492 = or i32 %1491, %1489
  %1493 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1404)  ; LegacyF32ToF16(value)
  %1494 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1405)  ; LegacyF32ToF16(value)
  %1495 = shl i32 %1494, 16
  %1496 = or i32 %1495, %1493
  %1497 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1395)  ; LegacyF32ToF16(value)
  %1498 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1396)  ; LegacyF32ToF16(value)
  %1499 = shl i32 %1498, 16
  %1500 = or i32 %1499, %1497
  %1501 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1397)  ; LegacyF32ToF16(value)
  %1502 = call i32 @dx.op.legacyF32ToF16(i32 130, float 1.000000e+00)  ; LegacyF32ToF16(value)
  %1503 = shl i32 %1502, 16
  %1504 = or i32 %1503, %1501
  %1505 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1400)  ; LegacyF32ToF16(value)
  %1506 = shl i32 %1505, 16
  %1507 = or i32 %1506, 32768
  %1508 = shl nuw nsw i32 %1394, 23
  %1509 = shl i32 %1392, 19
  %1510 = and i32 %1509, -536870912
  %1511 = or i32 %1508, %1510
  %1512 = or i32 %1511, %1502
  %1513 = or i32 %1512, 65536
  %1514 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1478)  ; LegacyF32ToF16(value)
  %1515 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1479)  ; LegacyF32ToF16(value)
  %1516 = shl i32 %1515, 16
  %1517 = or i32 %1516, %1514
  %1518 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1480)  ; LegacyF32ToF16(value)
  %1519 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %1520 = shl i32 %1519, 16
  %1521 = or i32 %1520, %1519
  store float %1393, float* %65, align 4
  store i32 %1484, i32* %647, align 4
  store float 0.000000e+00, float* %638, align 4
  %1522 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 0
  store i32 %1488, i32* %1522, align 4
  %1523 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  store i32 %1492, i32* %1523, align 4
  %1524 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  store i32 %1496, i32* %1524, align 4
  %1525 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 0
  store i32 %1500, i32* %1525, align 4
  %1526 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 1
  store i32 %1504, i32* %1526, align 4
  %1527 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 %1507, i32* %1527, align 4
  store i32 %1513, i32* %66, align 4
  %1528 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 0
  store i32 %1517, i32* %1528, align 4
  %1529 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 1
  store i32 %1518, i32* %1529, align 4
  %1530 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 6911, i32* %1530, align 4
  %1531 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 0
  store i32 %1521, i32* %1531, align 4
  %1532 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 1
  store i32 %1521, i32* %1532, align 4
  %1533 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 10
  store i32 0, i32* %1533, align 4
  br i1 %69, label %1534, label %1547

; <label>:1534                                    ; preds = %1477
  %1535 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %1536 = extractvalue %dx.types.CBufRet.i32 %713, 3
  %1537 = sub i32 %1535, %1536
  %1538 = mul i32 %755, 40
  %1539 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %767, i32 %1538, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1540 = extractvalue %dx.types.ResRet.f32 %1539, 2
  %1541 = bitcast float %1540 to i32
  %1542 = icmp eq i32 %1541, 1
  %1543 = select i1 %1542, i32 0, i32 %1537
  %1544 = extractvalue %dx.types.ResRet.f32 %1539, 1
  %1545 = bitcast float %1544 to i32
  %1546 = add i32 %1545, %1543
  store i32 %1546, i32* %1530, align 4, !tbaa !105
  br label %1547

; <label>:1547                                    ; preds = %1534, %1477, %634
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.View(i32, %View) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32, %LandscapeMVF) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32, %LandscapeContinuousLODParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32, %LandscapeParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32, %HitGroupSystemRootConstants) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32, %"class.Buffer<float>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32, %"class.StructuredBuffer<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!60, !63}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, null, !35, !42}
!5 = !{!6, !8, !9, !10, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_PrimitiveSceneData", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_InstanceSceneData", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_SkyIrradianceEnvironmentMap", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", !"View_LandscapeIndirection", i32 0, i32 3, i32 1, i32 10, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{i32 4, %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", !"View_LandscapePerComponentData", i32 0, i32 4, i32 1, i32 10, i32 0, !13}
!13 = !{i32 0, i32 9}
!14 = !{i32 5, %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", !"LandscapeContinuousLODParameters_SectionLODBias", i32 0, i32 5, i32 1, i32 10, i32 0, !13}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_HeightmapTexture", i32 0, i32 6, i32 1, i32 2, i32 0, !13}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_NormalmapTexture", i32 0, i32 7, i32 1, i32 2, i32 0, !13}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_0", i32 0, i32 8, i32 1, i32 2, i32 0, !13}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_1", i32 0, i32 9, i32 1, i32 2, i32 0, !13}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_2", i32 0, i32 10, i32 1, i32 2, i32 0, !13}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_3", i32 0, i32 11, i32 1, i32 2, i32 0, !13}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_4", i32 0, i32 12, i32 1, i32 2, i32 0, !13}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_5", i32 0, i32 13, i32 1, i32 2, i32 0, !13}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_6", i32 0, i32 14, i32 1, i32 2, i32 0, !13}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_7", i32 0, i32 15, i32 1, i32 2, i32 0, !13}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_8", i32 0, i32 16, i32 1, i32 2, i32 0, !13}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_9", i32 0, i32 17, i32 1, i32 2, i32 0, !13}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_10", i32 0, i32 18, i32 1, i32 2, i32 0, !13}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_11", i32 0, i32 19, i32 1, i32 2, i32 0, !13}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_12", i32 0, i32 20, i32 1, i32 2, i32 0, !13}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_13", i32 0, i32 21, i32 1, i32 2, i32 0, !13}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_14", i32 0, i32 22, i32 1, i32 2, i32 0, !13}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_15", i32 0, i32 23, i32 1, i32 2, i32 0, !13}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_16", i32 0, i32 24, i32 1, i32 2, i32 0, !13}
!34 = !{i32 25, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!35 = !{!36, !37, !38, !39, !40, !41}
!36 = !{i32 0, %View* @View, !"View", i32 0, i32 0, i32 1, i32 4960, null}
!37 = !{i32 1, %LandscapeMVF* @LandscapeMVF, !"LandscapeMVF", i32 0, i32 1, i32 1, i32 8, null}
!38 = !{i32 2, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, !"LandscapeContinuousLODParameters", i32 0, i32 2, i32 1, i32 24, null}
!39 = !{i32 3, %LandscapeParameters* @LandscapeParameters, !"LandscapeParameters", i32 0, i32 3, i32 1, i32 208, null}
!40 = !{i32 4, %Material* @Material, !"Material", i32 0, i32 4, i32 1, i32 176, null}
!41 = !{i32 5, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 16, null}
!42 = !{!43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59}
!43 = !{i32 0, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", !"View_MaterialTextureBilinearWrapedSampler", i32 0, i32 0, i32 1, i32 0, null}
!44 = !{i32 1, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_HeightmapTextureSampler", i32 0, i32 1, i32 1, i32 0, null}
!45 = !{i32 2, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_NormalmapTextureSampler", i32 0, i32 2, i32 1, i32 0, null}
!46 = !{i32 3, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", !"Material_Texture2D_0Sampler", i32 0, i32 3, i32 1, i32 0, null}
!47 = !{i32 4, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", !"Material_Texture2D_1Sampler", i32 0, i32 4, i32 1, i32 0, null}
!48 = !{i32 5, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", !"Material_Texture2D_2Sampler", i32 0, i32 5, i32 1, i32 0, null}
!49 = !{i32 6, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", !"Material_Texture2D_3Sampler", i32 0, i32 6, i32 1, i32 0, null}
!50 = !{i32 7, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", !"Material_Texture2D_4Sampler", i32 0, i32 7, i32 1, i32 0, null}
!51 = !{i32 8, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", !"Material_Texture2D_5Sampler", i32 0, i32 8, i32 1, i32 0, null}
!52 = !{i32 9, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", !"Material_Texture2D_7Sampler", i32 0, i32 9, i32 1, i32 0, null}
!53 = !{i32 10, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", !"Material_Texture2D_8Sampler", i32 0, i32 10, i32 1, i32 0, null}
!54 = !{i32 11, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", !"Material_Texture2D_9Sampler", i32 0, i32 11, i32 1, i32 0, null}
!55 = !{i32 12, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", !"Material_Texture2D_10Sampler", i32 0, i32 12, i32 1, i32 0, null}
!56 = !{i32 13, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", !"Material_Texture2D_12Sampler", i32 0, i32 13, i32 1, i32 0, null}
!57 = !{i32 14, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", !"Material_Texture2D_13Sampler", i32 0, i32 14, i32 1, i32 0, null}
!58 = !{i32 15, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", !"Material_Texture2D_14Sampler", i32 0, i32 15, i32 1, i32 0, null}
!59 = !{i32 16, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", !"Material_Texture2D_15Sampler", i32 0, i32 16, i32 1, i32 0, null}
!60 = !{null, !"", null, !4, !61}
!61 = !{i32 0, i64 8388624, i32 5, !62}
!62 = !{i32 0}
!63 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FDefaultAttributes*)* @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", !"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", null, null, !64}
!64 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !62}
!65 = !{!66, !68}
!66 = distinct !{!66, !67, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %PixelMaterialInputs"}
!67 = distinct !{!67, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z"}
!68 = distinct !{!68, !69, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z: %PixelMaterialInputs"}
!69 = distinct !{!69, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z"}
!70 = !{!71, !66, !68}
!71 = distinct !{!71, !67, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %Parameters"}
!72 = !{!73, !75, !77, !78}
!73 = distinct !{!73, !74, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!74 = distinct !{!74, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!75 = distinct !{!75, !76, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!76 = distinct !{!76, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!77 = distinct !{!77, !76, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!78 = distinct !{!78, !79, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z: %Interpolants"}
!79 = distinct !{!79, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z"}
!80 = !{!81, !66, !68}
!81 = distinct !{!81, !82, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z: %agg.result"}
!82 = distinct !{!82, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z"}
!83 = !{!84, !86, !75, !77, !78}
!84 = distinct !{!84, !85, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!85 = distinct !{!85, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!86 = distinct !{!86, !87, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!87 = distinct !{!87, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!88 = !{!89, !91, !92, !94, !95}
!89 = distinct !{!89, !90, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutDiffuseLighting"}
!90 = distinct !{!90, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z"}
!91 = distinct !{!91, !90, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutSubsurfaceLighting"}
!92 = distinct !{!92, !93, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutDiffuseLighting"}
!93 = distinct !{!93, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z"}
!94 = distinct !{!94, !93, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutSubsurfaceLighting"}
!95 = distinct !{!95, !93, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutIndirectIrradiance"}
!96 = !{!97, !99, !73, !75, !77, !78}
!97 = distinct !{!97, !98, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!98 = distinct !{!98, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!99 = distinct !{!99, !100, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!100 = distinct !{!100, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!101 = !{!102, !102, i64 0}
!102 = !{!"float", !103, i64 0}
!103 = !{!"omnipotent char", !104, i64 0}
!104 = !{!"Simple C/C++ TBAA"}
!105 = !{!106, !106, i64 0}
!106 = !{!"int", !103, i64 0}
!107 = !{!108}
!108 = distinct !{!108, !109, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!109 = distinct !{!109, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!110 = distinct !{!110, !"dx.controlflow.hints", i32 1}
!111 = !{!112}
!112 = distinct !{!112, !113, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!113 = distinct !{!113, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!114 = !{!115}
!115 = distinct !{!115, !116, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!116 = distinct !{!116, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ"}
!117 = !{!75, !77, !78}
!118 = !{!86, !75, !77, !78}
