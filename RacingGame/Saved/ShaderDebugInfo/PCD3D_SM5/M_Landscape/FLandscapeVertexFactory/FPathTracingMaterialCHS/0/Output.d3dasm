; shader hash: bfa3c8141b7dea501c5e7c111e97ab72
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2016
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2032
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2048
;       float4 View_ScreenToViewSpace;                ; Offset: 2064
;       int View_NumSceneColorMSAASamples;            ; Offset: 2080
;       float View_PreExposure;                       ; Offset: 2084
;       float View_OneOverPreExposure;                ; Offset: 2088
;       float PrePadding_View_2092;                   ; Offset: 2092
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2096
;       float4 View_SpecularOverrideParameter;        ; Offset: 2112
;       float4 View_NormalOverrideParameter;          ; Offset: 2128
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2144
;       float View_PrevFrameGameTime;                 ; Offset: 2152
;       float View_PrevFrameRealTime;                 ; Offset: 2156
;       float View_OutOfBoundsMask;                   ; Offset: 2160
;       float PrePadding_View_2164;                   ; Offset: 2164
;       float PrePadding_View_2168;                   ; Offset: 2168
;       float PrePadding_View_2172;                   ; Offset: 2172
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2176
;       float View_CullingSign;                       ; Offset: 2188
;       float View_NearPlane;                         ; Offset: 2192
;       float View_GameTime;                          ; Offset: 2196
;       float View_RealTime;                          ; Offset: 2200
;       float View_DeltaTime;                         ; Offset: 2204
;       float View_MaterialTextureMipBias;            ; Offset: 2208
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2212
;       uint View_Random;                             ; Offset: 2216
;       uint View_FrameNumber;                        ; Offset: 2220
;       uint View_StateFrameIndexMod8;                ; Offset: 2224
;       uint View_StateFrameIndex;                    ; Offset: 2228
;       uint View_DebugViewModeMask;                  ; Offset: 2232
;       float View_CameraCut;                         ; Offset: 2236
;       float View_UnlitViewmodeMask;                 ; Offset: 2240
;       float PrePadding_View_2244;                   ; Offset: 2244
;       float PrePadding_View_2248;                   ; Offset: 2248
;       float PrePadding_View_2252;                   ; Offset: 2252
;       float4 View_DirectionalLightColor;            ; Offset: 2256
;       float3 View_DirectionalLightDirection;        ; Offset: 2272
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2288
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2320
;       float4 View_TemporalAAParams;                 ; Offset: 2352
;       float4 View_CircleDOFParams;                  ; Offset: 2368
;       uint View_ForceDrawAllVelocities;             ; Offset: 2384
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2388
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2392
;       float View_DepthOfFieldScale;                 ; Offset: 2396
;       float View_DepthOfFieldFocalLength;           ; Offset: 2400
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2404
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2408
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2412
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2416
;       float View_GeneralPurposeTweak;               ; Offset: 2420
;       float View_GeneralPurposeTweak2;              ; Offset: 2424
;       float View_DemosaicVposOffset;                ; Offset: 2428
;       float View_DecalDepthBias;                    ; Offset: 2432
;       float PrePadding_View_2436;                   ; Offset: 2436
;       float PrePadding_View_2440;                   ; Offset: 2440
;       float PrePadding_View_2444;                   ; Offset: 2444
;       float3 View_IndirectLightingColorScale;       ; Offset: 2448
;       float PrePadding_View_2460;                   ; Offset: 2460
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2496
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2528
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2560
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2592
;       float4 View_AtmosphereLightDiscCosHalfApexAngle[2];; Offset: 2624
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2656
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2672
;       float PrePadding_View_2684;                   ; Offset: 2684
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2688
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2704
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2768
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2784
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2788
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2792
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2796
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2800
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2816
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2820
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2824
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2828
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2832
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2836
;       float PrePadding_View_2840;                   ; Offset: 2840
;       float PrePadding_View_2844;                   ; Offset: 2844
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2848
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2860
;       float View_RealTimeReflectionCapture;         ; Offset: 2864
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2868
;       float PrePadding_View_2872;                   ; Offset: 2872
;       float PrePadding_View_2876;                   ; Offset: 2876
;       float4 View_AmbientCubemapTint;               ; Offset: 2880
;       float View_AmbientCubemapIntensity;           ; Offset: 2896
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2900
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2904
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2908
;       float4 View_SkyLightColor;                    ; Offset: 2912
;       float4 View_MobileSkyIrradianceEnvironmentMap[7];; Offset: 2928
;       float View_MobilePreviewMode;                 ; Offset: 3040
;       float View_HMDEyePaddingOffset;               ; Offset: 3044
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3048
;       float View_ShowDecalsMask;                    ; Offset: 3052
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3056
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3060
;       float PrePadding_View_3064;                   ; Offset: 3064
;       float PrePadding_View_3068;                   ; Offset: 3068
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3072
;       int View_StereoPassIndex;                     ; Offset: 3084
;       float4 View_GlobalVolumeCenterAndExtent[6];   ; Offset: 3088
;       float4 View_GlobalVolumeWorldToUVAddAndMul[6];; Offset: 3184
;       float4 View_GlobalDistanceFieldMipWorldToUVScale[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipWorldToUVBias[6];; Offset: 3376
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3472
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3476
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3480
;       int PrePadding_View_3484;                     ; Offset: 3484
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3488
;       float PrePadding_View_3500;                   ; Offset: 3500
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3504
;       float View_GlobalVolumeDimension;             ; Offset: 3516
;       float View_GlobalVolumeTexelSize;             ; Offset: 3520
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3524
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3528
;       float View_FullyCoveredExpandSurfaceScale;    ; Offset: 3532
;       float View_UncoveredExpandSurfaceScale;       ; Offset: 3536
;       float View_UncoveredMinStepScale;             ; Offset: 3540
;       int2 View_CursorPosition;                     ; Offset: 3544
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3552
;       float PrePadding_View_3556;                   ; Offset: 3556
;       float PrePadding_View_3560;                   ; Offset: 3560
;       float PrePadding_View_3564;                   ; Offset: 3564
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3568
;       float PrePadding_View_3580;                   ; Offset: 3580
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3600
;       float View_VolumetricFogMaxDistance;          ; Offset: 3608
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3632
;       float PrePadding_View_3644;                   ; Offset: 3644
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3648
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3660
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3664
;       float View_StereoIPD;                         ; Offset: 3676
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3680
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3696
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3728
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3732
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3736
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3740
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3744
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3748
;       uint PrePadding_View_3752;                    ; Offset: 3752
;       uint PrePadding_View_3756;                    ; Offset: 3756
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3760
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3776
;       float PrePadding_View_3784;                   ; Offset: 3784
;       float PrePadding_View_3788;                   ; Offset: 3788
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3792
;       float View_OverrideLandscapeLOD;              ; Offset: 3808
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3812
;       float View_MinRoughness;                      ; Offset: 3816
;       float PrePadding_View_3820;                   ; Offset: 3820
;       float4 View_HairRenderInfo;                   ; Offset: 3824
;       uint View_EnableSkyLight;                     ; Offset: 3840
;       uint View_HairRenderInfoBits;                 ; Offset: 3844
;       uint View_HairComponents;                     ; Offset: 3848
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3852
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3856
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3872
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3888
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3900
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 3904
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 3908
;       int View_PhysicsFieldClipmapCount;            ; Offset: 3912
;       int View_PhysicsFieldTargetCount;             ; Offset: 3916
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 3920
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4432
;       uint View_GPUSceneViewId;                     ; Offset: 4436
;       uint PrePadding_View_4440;                    ; Offset: 4440
;       uint PrePadding_View_4444;                    ; Offset: 4444
;       uint PrePadding_View_4448;                    ; Offset: 4448
;       uint PrePadding_View_4452;                    ; Offset: 4452
;       uint PrePadding_View_4456;                    ; Offset: 4456
;       uint PrePadding_View_4460;                    ; Offset: 4460
;       uint PrePadding_View_4464;                    ; Offset: 4464
;       uint PrePadding_View_4468;                    ; Offset: 4468
;       uint PrePadding_View_4472;                    ; Offset: 4472
;       uint PrePadding_View_4476;                    ; Offset: 4476
;       uint PrePadding_View_4480;                    ; Offset: 4480
;       uint PrePadding_View_4484;                    ; Offset: 4484
;       uint PrePadding_View_4488;                    ; Offset: 4488
;       uint PrePadding_View_4492;                    ; Offset: 4492
;       uint PrePadding_View_4496;                    ; Offset: 4496
;       uint PrePadding_View_4500;                    ; Offset: 4500
;       uint PrePadding_View_4504;                    ; Offset: 4504
;       uint PrePadding_View_4508;                    ; Offset: 4508
;       uint PrePadding_View_4512;                    ; Offset: 4512
;       uint PrePadding_View_4516;                    ; Offset: 4516
;       uint PrePadding_View_4520;                    ; Offset: 4520
;       uint PrePadding_View_4524;                    ; Offset: 4524
;       uint PrePadding_View_4528;                    ; Offset: 4528
;       uint PrePadding_View_4532;                    ; Offset: 4532
;       uint PrePadding_View_4536;                    ; Offset: 4536
;       uint PrePadding_View_4540;                    ; Offset: 4540
;       uint PrePadding_View_4544;                    ; Offset: 4544
;       uint PrePadding_View_4548;                    ; Offset: 4548
;       uint PrePadding_View_4552;                    ; Offset: 4552
;       uint PrePadding_View_4556;                    ; Offset: 4556
;       uint PrePadding_View_4560;                    ; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint PrePadding_View_4568;                    ; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint PrePadding_View_4576;                    ; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint PrePadding_View_4584;                    ; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint PrePadding_View_4592;                    ; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint PrePadding_View_4600;                    ; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint PrePadding_View_4608;                    ; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint PrePadding_View_4616;                    ; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint PrePadding_View_4624;                    ; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint PrePadding_View_4632;                    ; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint PrePadding_View_4640;                    ; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint PrePadding_View_4648;                    ; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint PrePadding_View_4656;                    ; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint PrePadding_View_4664;                    ; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint PrePadding_View_4672;                    ; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint PrePadding_View_4680;                    ; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint PrePadding_View_4688;                    ; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint PrePadding_View_4696;                    ; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint PrePadding_View_4704;                    ; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint PrePadding_View_4712;                    ; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint PrePadding_View_4720;                    ; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint PrePadding_View_4728;                    ; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint PrePadding_View_4736;                    ; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint PrePadding_View_4744;                    ; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint PrePadding_View_4752;                    ; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint PrePadding_View_4760;                    ; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint PrePadding_View_4768;                    ; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint PrePadding_View_4776;                    ; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint PrePadding_View_4784;                    ; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint PrePadding_View_4792;                    ; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint PrePadding_View_4800;                    ; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint PrePadding_View_4808;                    ; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint PrePadding_View_4816;                    ; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint PrePadding_View_4824;                    ; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint PrePadding_View_4832;                    ; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint PrePadding_View_4840;                    ; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint PrePadding_View_4848;                    ; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint PrePadding_View_4856;                    ; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint PrePadding_View_4864;                    ; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint PrePadding_View_4872;                    ; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint PrePadding_View_4880;                    ; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint PrePadding_View_4888;                    ; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint PrePadding_View_4896;                    ; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint PrePadding_View_4904;                    ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint PrePadding_View_4912;                    ; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint PrePadding_View_4920;                    ; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint PrePadding_View_4928;                    ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint PrePadding_View_4936;                    ; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint PrePadding_View_4944;                    ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint View_bShadingEnergyConservation;         ; Offset: 4952
;       uint View_bShadingEnergyPreservation;         ; Offset: 4956
;   
;   } View;                                           ; Offset:    0 Size:  4960
;
; }
;
; cbuffer LandscapeMVF
; {
;
;   struct LandscapeMVF
;   {
;
;       int2 LandscapeMVF_SubXY;                      ; Offset:    0
;   
;   } LandscapeMVF;                                   ; Offset:    0 Size:     8
;
; }
;
; cbuffer LandscapeContinuousLODParameters
; {
;
;   struct LandscapeContinuousLODParameters
;   {
;
;       int LandscapeContinuousLODParameters_LandscapeIndex;; Offset:    0
;       int PrePadding_LandscapeContinuousLODParameters_4;; Offset:    4
;       int2 LandscapeContinuousLODParameters_Min;    ; Offset:    8
;       int2 LandscapeContinuousLODParameters_Size;   ; Offset:   16
;   
;   } LandscapeContinuousLODParameters;               ; Offset:    0 Size:    24
;
; }
;
; cbuffer LandscapeParameters
; {
;
;   struct LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       int PrePadding_LandscapeParameters_20;        ; Offset:   20
;       int PrePadding_LandscapeParameters_24;        ; Offset:   24
;       int PrePadding_LandscapeParameters_28;        ; Offset:   28
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   32
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   64
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   80
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:   96
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_BlendableLayerMask;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;   
;   } LandscapeParameters;                            ; Offset:    0 Size:   208
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[11];          ; Offset:    0
;   
;   } Material;                                       ; Offset:    0 Size:   176
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint UserData;                            ; Offset:    8
;           uint BaseInstanceIndex;                   ; Offset:   12
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; LandscapeMVF                      cbuffer      NA          NA     CB1            cb1     1
; LandscapeContinuousLODParameters   cbuffer      NA          NA     CB2            cb2     1
; LandscapeParameters               cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB5     cb0,space2     1
; View_MaterialTextureBilinearWrapedSampler   sampler      NA          NA      S0             s0     1
; LandscapeParameters_HeightmapTextureSampler   sampler      NA          NA      S1             s1     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S2             s2     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S3             s3     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_7Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S12            s12     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S13            s13     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S16            s16     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_LandscapeIndirection         texture     u32         buf      T2             t2     1
; View_LandscapePerComponentData    texture     f32         buf      T3             t3     1
; LandscapeContinuousLODParameters_SectionLODBias   texture     f32         buf      T4             t4     1
; LandscapeParameters_HeightmapTexture   texture     f32          2d      T5             t5     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d      T6             t6     1
; Material_Texture2D_0              texture     f32          2d      T7             t7     1
; Material_Texture2D_1              texture     f32          2d      T8             t8     1
; Material_Texture2D_2              texture     f32          2d      T9             t9     1
; Material_Texture2D_3              texture     f32          2d     T10            t10     1
; Material_Texture2D_4              texture     f32          2d     T11            t11     1
; Material_Texture2D_5              texture     f32          2d     T12            t12     1
; Material_Texture2D_6              texture     f32          2d     T13            t13     1
; Material_Texture2D_7              texture     f32          2d     T14            t14     1
; Material_Texture2D_8              texture     f32          2d     T15            t15     1
; Material_Texture2D_9              texture     f32          2d     T16            t16     1
; Material_Texture2D_10             texture     f32          2d     T17            t17     1
; Material_Texture2D_11             texture     f32          2d     T18            t18     1
; Material_Texture2D_12             texture     f32          2d     T19            t19     1
; Material_Texture2D_13             texture     f32          2d     T20            t20     1
; Material_Texture2D_14             texture     f32          2d     T21            t21     1
; Material_Texture2D_15             texture     f32          2d     T22            t22     1
; Material_Texture2D_16             texture     f32          2d     T23            t23     1
; HitGroupSystemIndexBuffer         texture    byte         r/o     T24      t0,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.SamplerState = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Buffer<float>" = type { float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [7 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%LandscapeMVF = type { <2 x i32> }
%LandscapeContinuousLODParameters = type { i32, i32, <2 x i32>, <2 x i32> }
%LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, %class.matrix.float.4.4 }
%Material = type { [11 x <4 x float>] }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32 }
%struct.FPackedPathTracingPayload = type { %struct.FMinimalPayload, i32, i32, [13 x i32] }
%struct.FMinimalPayload = type { float }
%struct.FDefaultAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A" = external constant %"class.Buffer<unsigned int>", align 4
@"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_0Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_1Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_2Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_3Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_4Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_5Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_8Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_9Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_10Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_13Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_14Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_15Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@View = external constant %View
@LandscapeMVF = external constant %LandscapeMVF
@LandscapeContinuousLODParameters = external constant %LandscapeContinuousLODParameters
@LandscapeParameters = external constant %LandscapeParameters
@Material = external constant %Material
@HitGroupSystemRootConstants = external constant %HitGroupSystemRootConstants
@NeighborOffset.i.i.i.i.0.hca = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 1, i32 0]
@NeighborOffset.i.i.i.i.1.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 0, i32 1]

; Function Attrs: nounwind
define void @"\01?PathTracingMaterialCHS@@YAXUFPackedPathTracingPayload@@UFDefaultAttributes@@@Z"(%struct.FPackedPathTracingPayload* noalias nocapture %PackedPayload, %struct.FDefaultAttributes* nocapture readonly %Attributes) #0 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", align 4, !noalias !64
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", align 4, !noalias !64
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", align 4, !noalias !64
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", align 4, !noalias !64
  %5 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", align 4, !noalias !69
  %6 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", align 4, !noalias !69
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", align 4, !noalias !69
  %8 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", align 4, !noalias !69
  %9 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", align 4, !noalias !69
  %10 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", align 4, !noalias !69
  %11 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", align 4, !noalias !69
  %12 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", align 4, !noalias !69
  %13 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", align 4, !noalias !69
  %14 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", align 4, !noalias !69
  %15 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", align 4
  %16 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", align 4, !noalias !71
  %17 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", align 4, !noalias !77
  %18 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !80
  %19 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %20 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %21 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %22 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %23 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %24 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !64
  %25 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %26 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %27 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %28 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %29 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %30 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %31 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %32 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %33 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %34 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %35 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !69
  %36 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %37 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !71
  %38 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", align 4, !noalias !71
  %39 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", align 4, !noalias !71
  %40 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", align 4, !noalias !71
  %41 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !85
  %42 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %43 = load %HitGroupSystemRootConstants, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, align 4
  %44 = load %Material, %Material* @Material, align 4
  %45 = load %LandscapeParameters, %LandscapeParameters* @LandscapeParameters, align 4
  %46 = load %LandscapeContinuousLODParameters, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, align 4
  %47 = load %LandscapeMVF, %LandscapeMVF* @LandscapeMVF, align 4
  %48 = load %View, %View* @View, align 4
  %49 = alloca [3 x float], align 4
  %50 = alloca [3 x float], align 4
  %51 = alloca [3 x float], align 4
  %52 = alloca [3 x i32], align 4
  %53 = alloca [4 x float], align 4
  %54 = alloca [3 x float], align 4
  %55 = call %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32 160, %HitGroupSystemRootConstants %43)  ; CreateHandleForLib(Resource)
  %56 = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %44)  ; CreateHandleForLib(Resource)
  %57 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32 160, %LandscapeParameters %45)  ; CreateHandleForLib(Resource)
  %58 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32 160, %LandscapeContinuousLODParameters %46)  ; CreateHandleForLib(Resource)
  %59 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32 160, %LandscapeMVF %47)  ; CreateHandleForLib(Resource)
  %60 = call %dx.types.Handle @dx.op.createHandleForLib.View(i32 160, %View %48)  ; CreateHandleForLib(Resource)
  %61 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %62 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %61, float* %62, align 4, !tbaa !90
  %63 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 60)  ; CBufferLoadLegacy(handle,regIndex)
  %64 = extractvalue %dx.types.CBufRet.f32 %63, 0
  %65 = extractvalue %dx.types.CBufRet.f32 %63, 1
  %66 = extractvalue %dx.types.CBufRet.f32 %63, 2
  %67 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 72)  ; CBufferLoadLegacy(handle,regIndex)
  %68 = extractvalue %dx.types.CBufRet.f32 %67, 0
  %69 = extractvalue %dx.types.CBufRet.f32 %67, 1
  %70 = extractvalue %dx.types.CBufRet.f32 %67, 2
  %71 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %72 = extractvalue %dx.types.CBufRet.f32 %71, 0
  %73 = extractvalue %dx.types.CBufRet.f32 %71, 2
  %74 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %75 = extractvalue %dx.types.CBufRet.f32 %74, 0
  %76 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 1
  %77 = load i32, i32* %76, align 4, !tbaa !94, !noalias !96
  %78 = and i32 %77, 65535
  %79 = lshr i32 %77, 16
  %80 = call float @dx.op.legacyF16ToF32(i32 131, i32 %79)  ; LegacyF16ToF32(value)
  %81 = fmul fast float %61, %80
  %82 = getelementptr inbounds %struct.FDefaultAttributes, %struct.FDefaultAttributes* %Attributes, i32 0, i32 0
  %83 = load <2 x float>, <2 x float>* %82, align 4, !noalias !99
  %84 = extractelement <2 x float> %83, i32 0
  %85 = fsub fast float 1.000000e+00, %84
  %86 = extractelement <2 x float> %83, i32 1
  %87 = fsub fast float %85, %86
  %88 = getelementptr inbounds [3 x float], [3 x float]* %54, i32 0, i32 0
  store float %87, float* %88, align 4
  %89 = getelementptr inbounds [3 x float], [3 x float]* %54, i32 0, i32 1
  store float %84, float* %89, align 4
  %90 = getelementptr inbounds [3 x float], [3 x float]* %54, i32 0, i32 2
  store float %86, float* %90, align 4
  br label %91

; <label>:91                                      ; preds = %426, %0
  %92 = phi float [ 0.000000e+00, %0 ], [ %619, %426 ]
  %93 = phi float [ 0.000000e+00, %0 ], [ %620, %426 ]
  %94 = phi float [ 0.000000e+00, %0 ], [ %621, %426 ]
  %95 = phi float [ 0.000000e+00, %0 ], [ %622, %426 ]
  %96 = phi float [ 0.000000e+00, %0 ], [ %613, %426 ]
  %97 = phi float [ 0.000000e+00, %0 ], [ %614, %426 ]
  %98 = phi i32 [ 0, %0 ], [ %626, %426 ]
  %99 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %100 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %101 = extractvalue %dx.types.CBufRet.i32 %100, 1
  %102 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %103 = extractvalue %dx.types.CBufRet.i32 %102, 3
  %104 = sub nsw i32 %101, %103
  %105 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.i32 %105, 0
  %107 = mul nsw i32 %104, %106
  %108 = extractvalue %dx.types.CBufRet.i32 %100, 0
  %109 = extractvalue %dx.types.CBufRet.i32 %102, 2
  %110 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %111 = extractvalue %dx.types.CBufRet.i32 %110, 0
  %112 = sitofp i32 %111 to float
  %113 = extractvalue %dx.types.CBufRet.i32 %102, 0
  %114 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %115 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %114, i32 %113, i32 undef)  ; BufferLoad(srv,index,wot)
  %116 = extractvalue %dx.types.ResRet.i32 %115, 0
  %117 = add i32 %107, %108
  %118 = sub i32 %117, %109
  %119 = add i32 %118, %116
  %120 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %121 = extractvalue %dx.types.CBufRet.f32 %120, 0
  %122 = fcmp fast oge float %121, 0.000000e+00
  %123 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %124 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %123, i32 %119, i32 undef)  ; BufferLoad(srv,index,wot)
  %125 = extractvalue %dx.types.ResRet.f32 %124, 0
  %126 = select i1 %122, float %121, float %125
  %127 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %128 = extractvalue %dx.types.CBufRet.i32 %127, 1
  %129 = sitofp i32 %128 to float
  %130 = fadd fast float %129, %126
  %131 = call float @dx.op.binary.f32(i32 36, float %130, float %112)  ; FMin(a,b)
  %132 = call float @dx.op.unary.f32(i32 27, float %131)  ; Round_ni(value)
  %133 = fptoui float %132 to i32
  %134 = extractvalue %dx.types.CBufRet.i32 %100, 2
  %135 = and i32 %133, 31
  %136 = ashr i32 %134, %135
  %137 = add nsw i32 %136, -1
  %138 = sitofp i32 %137 to float
  %139 = fadd fast float %138, 1.000000e+00
  %140 = fptoui float %139 to i32
  %141 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %55, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %142 = extractvalue %dx.types.CBufRet.i32 %141, 1
  %143 = extractvalue %dx.types.CBufRet.i32 %141, 0
  %144 = and i32 %143, 255
  %145 = mul i32 %99, 3
  %146 = icmp eq i32 %144, 0
  br i1 %146, label %147, label %150

; <label>:147                                     ; preds = %91
  %148 = add i32 %145, 1
  %149 = add i32 %145, 2
  br label %174

; <label>:150                                     ; preds = %91
  %151 = icmp eq i32 %144, 2
  %152 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %18)  ; CreateHandleForLib(Resource)
  br i1 %151, label %153, label %167

; <label>:153                                     ; preds = %150
  %154 = mul i32 %99, 6
  %155 = add i32 %154, %142
  %156 = and i32 %155, -4
  %157 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %152, i32 %156, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %158 = extractvalue %dx.types.ResRet.i32 %157, 0
  %159 = extractvalue %dx.types.ResRet.i32 %157, 1
  %160 = icmp eq i32 %156, %155
  %161 = lshr i32 %158, 16
  %162 = and i32 %159, 65535
  br i1 %160, label %163, label %165

; <label>:163                                     ; preds = %153
  %164 = and i32 %158, 65535
  br label %174

; <label>:165                                     ; preds = %153
  %166 = lshr i32 %159, 16
  br label %174

; <label>:167                                     ; preds = %150
  %168 = mul i32 %144, %145
  %169 = add i32 %168, %142
  %170 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %152, i32 %169, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %171 = extractvalue %dx.types.ResRet.i32 %170, 0
  %172 = extractvalue %dx.types.ResRet.i32 %170, 1
  %173 = extractvalue %dx.types.ResRet.i32 %170, 2
  br label %174

; <label>:174                                     ; preds = %167, %165, %163, %147
  %175 = phi i32 [ %145, %147 ], [ %171, %167 ], [ %164, %163 ], [ %161, %165 ]
  %176 = phi i32 [ %148, %147 ], [ %172, %167 ], [ %161, %163 ], [ %162, %165 ]
  %177 = phi i32 [ %149, %147 ], [ %173, %167 ], [ %162, %163 ], [ %166, %165 ]
  %178 = getelementptr inbounds [3 x i32], [3 x i32]* %52, i32 0, i32 0
  store i32 %175, i32* %178, align 4
  %179 = getelementptr inbounds [3 x i32], [3 x i32]* %52, i32 0, i32 1
  store i32 %176, i32* %179, align 4
  %180 = getelementptr inbounds [3 x i32], [3 x i32]* %52, i32 0, i32 2
  store i32 %177, i32* %180, align 4
  %181 = getelementptr [3 x i32], [3 x i32]* %52, i32 0, i32 %98
  %182 = load i32, i32* %181, align 4, !tbaa !94, !noalias !100
  %183 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %184 = urem i32 %182, %140
  %185 = uitofp i32 %184 to float
  %186 = udiv i32 %182, %140
  %187 = uitofp i32 %186 to float
  %188 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %59, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %189 = extractvalue %dx.types.CBufRet.i32 %188, 0
  %190 = sitofp i32 %189 to float
  %191 = extractvalue %dx.types.CBufRet.i32 %188, 1
  %192 = sitofp i32 %191 to float
  %193 = and i32 %183, 2147483647
  %194 = mul i32 %193, 40
  %195 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %42)  ; CreateHandleForLib(Resource)
  %196 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %195, i32 %194, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %197 = extractvalue %dx.types.ResRet.f32 %196, 1
  %198 = bitcast float %197 to i32
  %199 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 277)  ; CBufferLoadLegacy(handle,regIndex)
  %200 = extractvalue %dx.types.CBufRet.i32 %199, 0
  %201 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %41)  ; CreateHandleForLib(Resource)
  %202 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %201, i32 %198, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %203 = extractvalue %dx.types.ResRet.f32 %202, 0
  %204 = bitcast float %203 to i32
  %205 = and i32 %204, 1048575
  %206 = icmp eq i32 %205, 1048575
  br i1 %206, label %315, label %207, !dx.controlflow.hints !101

; <label>:207                                     ; preds = %174
  %208 = mul nuw nsw i32 %205, 40
  %209 = or i32 %208, 1
  %210 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %195, i32 %209, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %211 = extractvalue %dx.types.ResRet.f32 %210, 0
  %212 = extractvalue %dx.types.ResRet.f32 %210, 1
  %213 = extractvalue %dx.types.ResRet.f32 %210, 2
  %214 = add i32 %200, %198
  %215 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %201, i32 %214, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %216 = extractvalue %dx.types.ResRet.f32 %215, 0
  %217 = extractvalue %dx.types.ResRet.f32 %215, 1
  %218 = extractvalue %dx.types.ResRet.f32 %215, 2
  %219 = extractvalue %dx.types.ResRet.f32 %215, 3
  %220 = bitcast float %216 to i32
  %221 = bitcast float %217 to i32
  %222 = bitcast float %218 to i32
  %223 = bitcast float %219 to i32
  %224 = shl i32 %200, 1
  %225 = add i32 %224, %198
  %226 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %201, i32 %225, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %227 = extractvalue %dx.types.ResRet.f32 %226, 0
  %228 = extractvalue %dx.types.ResRet.f32 %226, 1
  %229 = extractvalue %dx.types.ResRet.f32 %226, 2
  %230 = and i32 %220, 65535
  %231 = uitofp i32 %230 to float
  %232 = lshr i32 %220, 16
  %233 = uitofp i32 %232 to float
  %234 = and i32 %221, 32767
  %235 = uitofp i32 %234 to float
  %236 = fadd fast float %231, -3.276800e+04
  %237 = fadd fast float %233, -3.276800e+04
  %238 = fadd fast float %235, -1.638400e+04
  %239 = fmul fast float %238, 0x3F06A0F8E0000000
  %240 = and i32 %221, 32768
  %241 = icmp ne i32 %240, 0
  %242 = fadd fast float %236, %237
  %243 = fmul fast float %242, 0x3F00002000000000
  %244 = fsub fast float %236, %237
  %245 = fmul fast float %244, 0x3F00002000000000
  %246 = call float @dx.op.unary.f32(i32 6, float %243)  ; FAbs(value)
  %247 = call float @dx.op.unary.f32(i32 6, float %245)  ; FAbs(value)
  %248 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %246, float %247)  ; Dot2(ax,ay,bx,by)
  %249 = fsub fast float 2.000000e+00, %248
  %250 = call float @dx.op.dot3.f32(i32 55, float %243, float %245, float %249, float %243, float %245, float %249)  ; Dot3(ax,ay,az,bx,by,bz)
  %251 = call float @dx.op.unary.f32(i32 25, float %250)  ; Rsqrt(value)
  %252 = fmul fast float %251, %243
  %253 = fmul fast float %251, %245
  %254 = fmul fast float %251, %249
  %255 = fadd fast float %254, 1.000000e+00
  %256 = fdiv fast float 1.000000e+00, %255
  %257 = fmul fast float %253, %252
  %258 = fmul fast float %257, %256
  %259 = fsub fast float -0.000000e+00, %258
  %260 = fmul fast float %252, %252
  %261 = fmul fast float %260, %256
  %262 = fsub fast float 1.000000e+00, %261
  %263 = fmul fast float %253, %253
  %264 = fmul fast float %263, %256
  %265 = fsub fast float 1.000000e+00, %264
  %266 = fmul fast float %239, %239
  %267 = fsub fast float 1.000000e+00, %266
  %268 = call float @dx.op.unary.f32(i32 24, float %267)  ; Sqrt(value)
  %269 = select i1 %241, float %239, float %268
  %270 = select i1 %241, float %268, float %239
  %271 = fmul fast float %262, %269
  %272 = fmul fast float %269, %259
  %273 = fmul fast float %269, %252
  %274 = fmul fast float %270, %259
  %275 = fmul fast float %265, %270
  %276 = fmul fast float %253, %270
  %277 = fsub fast float -0.000000e+00, %276
  %278 = fadd fast float %271, %274
  %279 = fadd fast float %272, %275
  %280 = fsub fast float %277, %273
  %281 = fmul fast float %280, %253
  %282 = fmul fast float %279, %254
  %283 = fsub fast float %281, %282
  %284 = fmul fast float %278, %254
  %285 = fmul fast float %280, %252
  %286 = fsub fast float %284, %285
  %287 = fmul fast float %279, %252
  %288 = fmul fast float %278, %253
  %289 = fsub fast float %287, %288
  %290 = lshr i32 %223, 16
  %291 = shl i32 %290, 23
  %292 = add i32 %291, -125829120
  %293 = bitcast i32 %292 to float
  %294 = lshr i32 %222, 16
  %295 = and i32 %222, 65535
  %296 = and i32 %223, 65535
  %297 = uitofp i32 %295 to float
  %298 = uitofp i32 %294 to float
  %299 = uitofp i32 %296 to float
  %300 = fadd fast float %297, -3.276800e+04
  %301 = fadd fast float %298, -3.276800e+04
  %302 = fadd fast float %299, -3.276800e+04
  %303 = fmul fast float %293, %300
  %304 = fmul fast float %293, %301
  %305 = fmul fast float %293, %302
  %306 = fmul fast float %278, %303
  %307 = fmul fast float %279, %303
  %308 = fmul fast float %280, %303
  %309 = fmul fast float %283, %304
  %310 = fmul fast float %286, %304
  %311 = fmul fast float %289, %304
  %312 = fmul fast float %252, %305
  %313 = fmul fast float %253, %305
  %314 = fmul fast float %254, %305
  br label %315

; <label>:315                                     ; preds = %207, %174
  %316 = phi float [ 0.000000e+00, %174 ], [ %211, %207 ]
  %317 = phi float [ 0.000000e+00, %174 ], [ %212, %207 ]
  %318 = phi float [ 0.000000e+00, %174 ], [ %213, %207 ]
  %319 = phi float [ 0.000000e+00, %174 ], [ %306, %207 ]
  %320 = phi float [ 0.000000e+00, %174 ], [ %307, %207 ]
  %321 = phi float [ 0.000000e+00, %174 ], [ %308, %207 ]
  %322 = phi float [ 0.000000e+00, %174 ], [ %309, %207 ]
  %323 = phi float [ 0.000000e+00, %174 ], [ %310, %207 ]
  %324 = phi float [ 0.000000e+00, %174 ], [ %311, %207 ]
  %325 = phi float [ 0.000000e+00, %174 ], [ %312, %207 ]
  %326 = phi float [ 0.000000e+00, %174 ], [ %313, %207 ]
  %327 = phi float [ 0.000000e+00, %174 ], [ %314, %207 ]
  %328 = phi float [ 0.000000e+00, %174 ], [ %227, %207 ]
  %329 = phi float [ 0.000000e+00, %174 ], [ %228, %207 ]
  %330 = phi float [ 0.000000e+00, %174 ], [ %229, %207 ]
  %331 = sub nsw i32 %108, %109
  %332 = add nsw i32 %331, %107
  %333 = add i32 %116, %332
  %334 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %123, i32 %333, i32 undef)  ; BufferLoad(srv,index,wot)
  %335 = extractvalue %dx.types.ResRet.f32 %334, 0
  %336 = select i1 %122, float %121, float %335
  %337 = fadd fast float %129, %336
  %338 = call float @dx.op.binary.f32(i32 36, float %337, float %112)  ; FMin(a,b)
  %339 = call float @dx.op.unary.f32(i32 27, float %338)  ; Round_ni(value)
  %340 = fptoui float %339 to i32
  %341 = and i32 %340, 31
  %342 = ashr i32 %134, %341
  %343 = add nsw i32 %342, -1
  %344 = sitofp i32 %343 to float
  %345 = fdiv fast float 1.000000e+00, %344
  %346 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %38)  ; CreateHandleForLib(Resource)
  %347 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %346, i32 %332, i32 undef)  ; BufferLoad(srv,index,wot)
  %348 = fmul fast float %345, %185
  %349 = fmul fast float %345, %187
  %350 = fadd fast float %348, %190
  %351 = fadd fast float %349, %192
  %352 = extractvalue %dx.types.CBufRet.i32 %100, 3
  %353 = sitofp i32 %352 to float
  %354 = fdiv fast float %350, %353
  %355 = fdiv fast float %351, %353
  %356 = fsub fast float 1.000000e+00, %354
  %357 = fmul fast float %355, 2.000000e+00
  %358 = fmul fast float %356, 2.000000e+00
  %359 = fmul fast float %338, %357
  %360 = fmul fast float %338, %358
  %361 = fsub fast float 1.000000e+00, %357
  %362 = fsub fast float 1.000000e+00, %358
  br label %363

; <label>:363                                     ; preds = %421, %315
  %364 = phi i32 [ -1, %315 ], [ %425, %421 ]
  %365 = phi i32 [ 0, %315 ], [ %423, %421 ]
  %366 = phi i32 [ 0, %315 ], [ %419, %421 ]
  %367 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %368 = extractvalue %dx.types.CBufRet.i32 %367, 0
  %369 = extractvalue %dx.types.CBufRet.i32 %367, 1
  %370 = add i32 %368, %365
  %371 = add i32 %369, %364
  %372 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %373 = extractvalue %dx.types.CBufRet.i32 %372, 2
  %374 = extractvalue %dx.types.CBufRet.i32 %372, 3
  %375 = call i32 @dx.op.binary.i32(i32 37, i32 %373, i32 %370)  ; IMax(a,b)
  %376 = call i32 @dx.op.binary.i32(i32 37, i32 %374, i32 %371)  ; IMax(a,b)
  %377 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %58, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %378 = extractvalue %dx.types.CBufRet.i32 %377, 0
  %379 = extractvalue %dx.types.CBufRet.i32 %377, 1
  %380 = add i32 %373, -1
  %381 = add i32 %380, %378
  %382 = add i32 %374, -1
  %383 = add i32 %382, %379
  %384 = call i32 @dx.op.binary.i32(i32 38, i32 %381, i32 %375)  ; IMin(a,b)
  %385 = call i32 @dx.op.binary.i32(i32 38, i32 %383, i32 %376)  ; IMin(a,b)
  %386 = sub nsw i32 %385, %374
  %387 = mul nsw i32 %386, %378
  %388 = sub i32 %384, %373
  %389 = add nsw i32 %388, %387
  %390 = extractvalue %dx.types.CBufRet.i32 %372, 0
  %391 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %40)  ; CreateHandleForLib(Resource)
  %392 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %391, i32 %390, i32 undef)  ; BufferLoad(srv,index,wot)
  %393 = extractvalue %dx.types.ResRet.i32 %392, 0
  %394 = add i32 %389, %393
  %395 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %396 = extractvalue %dx.types.CBufRet.f32 %395, 0
  %397 = fcmp fast oge float %396, 0.000000e+00
  %398 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %399 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %398, i32 %394, i32 undef)  ; BufferLoad(srv,index,wot)
  %400 = extractvalue %dx.types.ResRet.f32 %399, 0
  %401 = select i1 %397, float %396, float %400
  %402 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %57, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %403 = extractvalue %dx.types.CBufRet.i32 %402, 0
  %404 = sitofp i32 %403 to float
  %405 = add i32 %393, %332
  %406 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %398, i32 %405, i32 undef)  ; BufferLoad(srv,index,wot)
  %407 = extractvalue %dx.types.ResRet.f32 %406, 0
  %408 = select i1 %397, float %396, float %407
  %409 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %410 = extractvalue %dx.types.CBufRet.i32 %409, 1
  %411 = sitofp i32 %410 to float
  %412 = fadd fast float %411, %408
  %413 = call float @dx.op.binary.f32(i32 36, float %412, float %404)  ; FMin(a,b)
  %414 = call float @dx.op.binary.f32(i32 35, float %401, float %413)  ; FMax(a,b)
  %415 = getelementptr inbounds [4 x float], [4 x float]* %53, i32 0, i32 %366
  %416 = fadd fast float %411, %414
  %417 = select i1 %397, float %396, float %416
  %418 = call float @dx.op.binary.f32(i32 36, float %417, float %404)  ; FMin(a,b)
  store float %418, float* %415, align 4, !tbaa !90, !noalias !71
  %419 = add nuw nsw i32 %366, 1
  %420 = icmp eq i32 %419, 4
  br i1 %420, label %426, label %421

; <label>:421                                     ; preds = %363
  %422 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.0.hca, i32 0, i32 %419
  %423 = load i32, i32* %422, align 4
  %424 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.1.hca, i32 0, i32 %419
  %425 = load i32, i32* %424, align 4
  br label %363

; <label>:426                                     ; preds = %363
  %427 = uitofp i32 %340 to float
  %428 = extractvalue %dx.types.ResRet.f32 %347, 0
  %429 = fsub fast float 1.000000e+00, %355
  %430 = fmul fast float %354, 2.000000e+00
  %431 = fmul fast float %429, 2.000000e+00
  %432 = fmul fast float %338, %430
  %433 = fmul fast float %338, %431
  %434 = fsub fast float 1.000000e+00, %430
  %435 = fsub fast float 1.000000e+00, %431
  %436 = getelementptr inbounds [4 x float], [4 x float]* %53, i32 0, i32 0
  %437 = load float, float* %436, align 4, !tbaa !90, !noalias !71
  %438 = getelementptr inbounds [4 x float], [4 x float]* %53, i32 0, i32 1
  %439 = load float, float* %438, align 4, !tbaa !90, !noalias !71
  %440 = getelementptr inbounds [4 x float], [4 x float]* %53, i32 0, i32 2
  %441 = load float, float* %440, align 4, !tbaa !90, !noalias !71
  %442 = getelementptr inbounds [4 x float], [4 x float]* %53, i32 0, i32 3
  %443 = load float, float* %442, align 4, !tbaa !90, !noalias !71
  %444 = fmul fast float %437, %361
  %445 = fmul fast float %439, %434
  %446 = fmul fast float %441, %362
  %447 = fmul fast float %443, %435
  %448 = fadd fast float %444, %359
  %449 = fadd fast float %445, %432
  %450 = fadd fast float %446, %360
  %451 = fadd fast float %447, %433
  %452 = fadd fast float %350, %351
  %453 = fdiv fast float %452, %353
  %454 = fcmp fast ogt float %453, 1.000000e+00
  %455 = fcmp fast olt float %354, %355
  %456 = select i1 %455, float %451, float %450
  %457 = select i1 %455, float %449, float %448
  %458 = select i1 %454, float %456, float %457
  %459 = call float @dx.op.unary.f32(i32 27, float %458)  ; Round_ni(value)
  %460 = fsub fast float %458, %459
  %461 = fsub fast float %459, %427
  %462 = fsub fast float -0.000000e+00, %461
  %463 = call float @dx.op.unary.f32(i32 21, float %462)  ; Exp(value)
  %464 = fmul fast float %463, %185
  %465 = fmul fast float %463, %187
  %466 = call float @dx.op.unary.f32(i32 27, float %464)  ; Round_ni(value)
  %467 = call float @dx.op.unary.f32(i32 27, float %465)  ; Round_ni(value)
  %468 = fsub fast float -0.000000e+00, %459
  %469 = call float @dx.op.unary.f32(i32 21, float %468)  ; Exp(value)
  %470 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %471 = extractvalue %dx.types.CBufRet.f32 %470, 0
  %472 = fmul fast float %471, %469
  %473 = fadd fast float %472, -1.000000e+00
  %474 = fmul fast float %469, 5.000000e-01
  %475 = fmul fast float %474, %471
  %476 = call float @dx.op.binary.f32(i32 35, float %475, float 2.000000e+00)  ; FMax(a,b)
  %477 = fadd fast float %476, -1.000000e+00
  %478 = extractvalue %dx.types.CBufRet.f32 %470, 1
  %479 = fmul fast float %478, %473
  %480 = fmul fast float %478, %477
  %481 = fdiv fast float %466, %479
  %482 = fdiv fast float %467, %479
  %483 = fmul fast float %466, 5.000000e-01
  %484 = fmul fast float %467, 5.000000e-01
  %485 = call float @dx.op.unary.f32(i32 27, float %483)  ; Round_ni(value)
  %486 = call float @dx.op.unary.f32(i32 27, float %484)  ; Round_ni(value)
  %487 = fdiv fast float %485, %480
  %488 = fdiv fast float %486, %480
  %489 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %490 = extractvalue %dx.types.CBufRet.f32 %489, 0
  %491 = extractvalue %dx.types.CBufRet.f32 %489, 1
  %492 = fmul fast float %490, %481
  %493 = fmul fast float %491, %482
  %494 = extractvalue %dx.types.CBufRet.f32 %489, 2
  %495 = extractvalue %dx.types.CBufRet.f32 %489, 3
  %496 = fadd fast float %492, %494
  %497 = fadd fast float %493, %495
  %498 = fmul fast float %490, 5.000000e-01
  %499 = fmul fast float %491, 5.000000e-01
  %500 = fadd fast float %496, %498
  %501 = fadd fast float %497, %499
  %502 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %503 = extractvalue %dx.types.CBufRet.f32 %502, 0
  %504 = extractvalue %dx.types.CBufRet.f32 %502, 1
  %505 = fmul fast float %503, %190
  %506 = fmul fast float %504, %192
  %507 = fadd fast float %500, %505
  %508 = fadd fast float %501, %506
  %509 = fsub fast float %459, %428
  %510 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %511 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %16)  ; CreateHandleForLib(Resource)
  %512 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %510, %dx.types.Handle %511, float %507, float %508, float undef, float undef, i32 0, i32 0, i32 undef, float %509)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %513 = extractvalue %dx.types.ResRet.f32 %512, 0
  %514 = extractvalue %dx.types.ResRet.f32 %512, 1
  %515 = fmul fast float %513, 6.528000e+04
  %516 = fmul fast float %514, 2.550000e+02
  %517 = fadd fast float %516, -3.276800e+04
  %518 = fadd fast float %517, %515
  %519 = fmul fast float %490, %487
  %520 = fmul fast float %491, %488
  %521 = fadd fast float %519, %494
  %522 = fadd fast float %520, %495
  %523 = fadd fast float %521, %498
  %524 = fadd fast float %522, %499
  %525 = fadd fast float %523, %505
  %526 = fadd fast float %524, %506
  %527 = fsub fast float 1.000000e+00, %428
  %528 = fadd fast float %527, %459
  %529 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %510, %dx.types.Handle %511, float %525, float %526, float undef, float undef, i32 0, i32 0, i32 undef, float %528)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %530 = extractvalue %dx.types.ResRet.f32 %529, 0
  %531 = extractvalue %dx.types.ResRet.f32 %529, 1
  %532 = fmul fast float %530, 6.528000e+04
  %533 = fmul fast float %531, 2.550000e+02
  %534 = fsub fast float %487, %481
  %535 = fsub fast float %488, %482
  %536 = fsub fast float -3.276800e+04, %518
  %537 = fadd fast float %536, %533
  %538 = fadd fast float %537, %532
  %539 = fmul fast float %534, %460
  %540 = fmul fast float %535, %460
  %541 = fmul fast float %538, %460
  %542 = fadd fast float %539, %481
  %543 = fadd fast float %540, %482
  %544 = fadd fast float %541, %518
  %545 = fmul fast float %544, 7.812500e-03
  %546 = extractvalue %dx.types.CBufRet.f32 %502, 3
  %547 = fmul fast float %546, %190
  %548 = fmul fast float %546, %192
  %549 = fadd fast float %547, %542
  %550 = fadd fast float %548, %543
  %551 = fmul fast float %549, %319
  %552 = fmul fast float %549, %320
  %553 = fmul fast float %549, %321
  %554 = fmul fast float %550, %322
  %555 = fmul fast float %550, %323
  %556 = fmul fast float %550, %324
  %557 = fmul fast float %545, %326
  %558 = fsub fast float %316, %64
  %559 = fsub fast float %317, %65
  %560 = fsub fast float %318, %66
  %561 = fmul fast float %558, 2.097152e+06
  %562 = fmul fast float %559, 2.097152e+06
  %563 = fmul fast float %560, 2.097152e+06
  %564 = fadd fast float %561, %68
  %565 = fadd fast float %564, %328
  %566 = fadd fast float %565, %554
  %567 = fadd fast float %566, %551
  %568 = fadd fast float %562, %69
  %569 = fadd fast float %568, %329
  %570 = fadd fast float %569, %555
  %571 = fadd fast float %570, %552
  %572 = fadd fast float %563, %70
  %573 = fadd fast float %572, %330
  %574 = fadd fast float %573, %556
  %575 = fadd fast float %574, %553
  %576 = extractvalue %dx.types.CBufRet.f32 %470, 2
  %577 = fadd fast float %576, %542
  %578 = fadd fast float %577, %547
  %579 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %580 = extractvalue %dx.types.CBufRet.f32 %579, 0
  %581 = fmul fast float %580, %542
  %582 = extractvalue %dx.types.CBufRet.f32 %579, 2
  %583 = fadd fast float %581, %582
  %584 = extractvalue %dx.types.CBufRet.f32 %502, 2
  %585 = fmul fast float %584, %190
  %586 = fadd fast float %583, %585
  %587 = fmul fast float %490, %542
  %588 = fadd fast float %587, %494
  %589 = fadd fast float %588, %498
  %590 = fadd fast float %589, %505
  %591 = fmul fast float %545, %325
  %592 = fmul fast float %545, %327
  %593 = fadd fast float %567, %591
  %594 = fadd fast float %571, %557
  %595 = fadd fast float %575, %592
  %596 = extractvalue %dx.types.CBufRet.f32 %470, 3
  %597 = fadd fast float %596, %543
  %598 = fadd fast float %597, %548
  %599 = extractvalue %dx.types.CBufRet.f32 %579, 1
  %600 = fmul fast float %599, %543
  %601 = extractvalue %dx.types.CBufRet.f32 %579, 3
  %602 = fadd fast float %600, %601
  %603 = fmul fast float %584, %192
  %604 = fadd fast float %602, %603
  %605 = fmul fast float %491, %543
  %606 = fadd fast float %605, %495
  %607 = fadd fast float %606, %499
  %608 = fadd fast float %607, %506
  %609 = getelementptr [3 x float], [3 x float]* %54, i32 0, i32 %98
  %610 = load float, float* %609, align 4, !tbaa !90, !noalias !99
  %611 = fmul fast float %610, %578
  %612 = fmul fast float %610, %598
  %613 = fadd fast float %611, %96
  %614 = fadd fast float %612, %97
  %615 = fmul fast float %610, %586
  %616 = fmul fast float %610, %604
  %617 = fmul fast float %610, %590
  %618 = fmul fast float %610, %608
  %619 = fadd fast float %615, %92
  %620 = fadd fast float %616, %93
  %621 = fadd fast float %617, %94
  %622 = fadd fast float %618, %95
  %623 = getelementptr [3 x float], [3 x float]* %49, i32 0, i32 %98
  %624 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 %98
  %625 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 %98
  store float %593, float* %623, align 4
  store float %594, float* %624, align 4
  store float %595, float* %625, align 4
  %626 = add nuw nsw i32 %98, 1
  %627 = icmp eq i32 %626, 3
  br i1 %627, label %628, label %91

; <label>:628                                     ; preds = %426
  %629 = extractvalue %dx.types.CBufRet.f32 %71, 1
  %630 = extractvalue %dx.types.CBufRet.f32 %71, 3
  %631 = extractvalue %dx.types.CBufRet.f32 %74, 1
  %632 = call float @dx.op.legacyF16ToF32(i32 131, i32 %78)  ; LegacyF16ToF32(value)
  %633 = fadd fast float %81, %632
  %634 = getelementptr [3 x float], [3 x float]* %49, i32 0, i32 1
  %635 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 1
  %636 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 1
  %637 = load float, float* %634, align 4
  %638 = load float, float* %635, align 4
  %639 = load float, float* %636, align 4
  %640 = getelementptr [3 x float], [3 x float]* %49, i32 0, i32 0
  %641 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 0
  %642 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 0
  %643 = load float, float* %640, align 4
  %644 = load float, float* %641, align 4
  %645 = load float, float* %642, align 4
  %646 = fsub fast float %637, %643
  %647 = fsub fast float %638, %644
  %648 = fsub fast float %639, %645
  %649 = getelementptr [3 x float], [3 x float]* %49, i32 0, i32 2
  %650 = getelementptr [3 x float], [3 x float]* %50, i32 0, i32 2
  %651 = getelementptr [3 x float], [3 x float]* %51, i32 0, i32 2
  %652 = load float, float* %649, align 4
  %653 = load float, float* %650, align 4
  %654 = load float, float* %651, align 4
  %655 = fsub fast float %652, %643
  %656 = fsub fast float %653, %644
  %657 = fsub fast float %654, %645
  %658 = fmul fast float %656, %648
  %659 = fmul fast float %657, %647
  %660 = fsub fast float %658, %659
  %661 = fmul fast float %657, %646
  %662 = fmul fast float %655, %648
  %663 = fsub fast float %661, %662
  %664 = fmul fast float %655, %647
  %665 = fmul fast float %656, %646
  %666 = fsub fast float %664, %665
  %667 = call float @dx.op.dot3.f32(i32 55, float %660, float %663, float %666, float %660, float %663, float %666)  ; Dot3(ax,ay,az,bx,by,bz)
  %668 = call float @dx.op.unary.f32(i32 25, float %667)  ; Rsqrt(value)
  %669 = fmul fast float %660, %668
  %670 = fmul fast float %663, %668
  %671 = fmul fast float %666, %668
  %672 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %36)  ; CreateHandleForLib(Resource)
  %673 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %674 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %672, %dx.types.Handle %673, float %621, float %622, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %675 = extractvalue %dx.types.ResRet.f32 %674, 2
  %676 = extractvalue %dx.types.ResRet.f32 %674, 3
  %677 = fmul fast float %675, 2.000000e+00
  %678 = fmul fast float %676, 2.000000e+00
  %679 = fadd fast float %677, -1.000000e+00
  %680 = fadd fast float %678, -1.000000e+00
  %681 = call float @dx.op.dot2.f32(i32 54, float %679, float %680, float %679, float %680)  ; Dot2(ax,ay,bx,by)
  %682 = fsub fast float 1.000000e+00, %681
  %683 = call float @dx.op.binary.f32(i32 35, float %682, float 0.000000e+00)  ; FMax(a,b)
  %684 = call float @dx.op.unary.f32(i32 24, float %683)  ; Sqrt(value)
  %685 = fsub fast float -0.000000e+00, %679
  %686 = call float @dx.op.dot3.f32(i32 55, float %684, float 0.000000e+00, float %685, float %684, float 0.000000e+00, float %685)  ; Dot3(ax,ay,az,bx,by,bz)
  %687 = call float @dx.op.unary.f32(i32 25, float %686)  ; Rsqrt(value)
  %688 = fmul fast float %687, %684
  %689 = fmul fast float %687, %685
  %690 = fmul fast float %689, %680
  %691 = fmul fast float %688, %684
  %692 = fmul fast float %689, %679
  %693 = fsub fast float %691, %692
  %694 = fmul fast float %680, %688
  %695 = fsub fast float -0.000000e+00, %694
  %696 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %697 = extractvalue %dx.types.CBufRet.f32 %696, 0
  %698 = extractvalue %dx.types.CBufRet.f32 %696, 1
  %699 = extractvalue %dx.types.CBufRet.f32 %696, 2
  %700 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %701 = extractvalue %dx.types.CBufRet.f32 %700, 0
  %702 = extractvalue %dx.types.CBufRet.f32 %700, 1
  %703 = extractvalue %dx.types.CBufRet.f32 %700, 2
  %704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %57, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %705 = extractvalue %dx.types.CBufRet.f32 %704, 0
  %706 = extractvalue %dx.types.CBufRet.f32 %704, 1
  %707 = extractvalue %dx.types.CBufRet.f32 %704, 2
  %708 = fmul fast float %697, %688
  %709 = call float @dx.op.tertiary.f32(i32 46, float %689, float %705, float %708)  ; FMad(a,b,c)
  %710 = fmul fast float %698, %688
  %711 = call float @dx.op.tertiary.f32(i32 46, float %689, float %706, float %710)  ; FMad(a,b,c)
  %712 = fmul fast float %699, %688
  %713 = call float @dx.op.tertiary.f32(i32 46, float %689, float %707, float %712)  ; FMad(a,b,c)
  %714 = fmul fast float %690, %697
  %715 = call float @dx.op.tertiary.f32(i32 46, float %693, float %701, float %714)  ; FMad(a,b,c)
  %716 = call float @dx.op.tertiary.f32(i32 46, float %695, float %705, float %715)  ; FMad(a,b,c)
  %717 = fmul fast float %690, %698
  %718 = call float @dx.op.tertiary.f32(i32 46, float %693, float %702, float %717)  ; FMad(a,b,c)
  %719 = call float @dx.op.tertiary.f32(i32 46, float %695, float %706, float %718)  ; FMad(a,b,c)
  %720 = fmul fast float %690, %699
  %721 = call float @dx.op.tertiary.f32(i32 46, float %693, float %703, float %720)  ; FMad(a,b,c)
  %722 = call float @dx.op.tertiary.f32(i32 46, float %695, float %707, float %721)  ; FMad(a,b,c)
  %723 = fmul fast float %697, %679
  %724 = call float @dx.op.tertiary.f32(i32 46, float %680, float %701, float %723)  ; FMad(a,b,c)
  %725 = call float @dx.op.tertiary.f32(i32 46, float %684, float %705, float %724)  ; FMad(a,b,c)
  %726 = fmul fast float %698, %679
  %727 = call float @dx.op.tertiary.f32(i32 46, float %680, float %702, float %726)  ; FMad(a,b,c)
  %728 = call float @dx.op.tertiary.f32(i32 46, float %684, float %706, float %727)  ; FMad(a,b,c)
  %729 = fmul fast float %699, %679
  %730 = call float @dx.op.tertiary.f32(i32 46, float %680, float %703, float %729)  ; FMad(a,b,c)
  %731 = call float @dx.op.tertiary.f32(i32 46, float %684, float %707, float %730)  ; FMad(a,b,c)
  %732 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %733 = icmp eq i32 %732, 254
  %734 = select i1 %733, float 1.000000e+00, float -1.000000e+00
  %735 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %35)  ; CreateHandleForLib(Resource)
  %736 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %14)  ; CreateHandleForLib(Resource)
  %737 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %735, %dx.types.Handle %736, float %619, float %620, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %738 = extractvalue %dx.types.ResRet.f32 %737, 0
  %739 = extractvalue %dx.types.ResRet.f32 %737, 1
  %740 = extractvalue %dx.types.ResRet.f32 %737, 2
  %741 = extractvalue %dx.types.ResRet.f32 %737, 3
  %742 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %743 = extractvalue %dx.types.CBufRet.f32 %742, 0
  %744 = extractvalue %dx.types.CBufRet.f32 %742, 1
  %745 = extractvalue %dx.types.CBufRet.f32 %742, 2
  %746 = extractvalue %dx.types.CBufRet.f32 %742, 3
  %747 = call float @dx.op.dot4.f32(i32 56, float %738, float %739, float %740, float %741, float %743, float %744, float %745, float %746)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %748 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %749 = extractvalue %dx.types.CBufRet.f32 %748, 1
  %750 = fmul fast float %749, %613
  %751 = fmul fast float %749, %614
  %752 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %60, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %753 = extractvalue %dx.types.CBufRet.f32 %752, 0
  %754 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %34)  ; CreateHandleForLib(Resource)
  %755 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %13)  ; CreateHandleForLib(Resource)
  %756 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %754, %dx.types.Handle %755, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %757 = extractvalue %dx.types.ResRet.f32 %756, 1
  %758 = extractvalue %dx.types.ResRet.f32 %756, 2
  %759 = extractvalue %dx.types.CBufRet.f32 %748, 2
  %760 = extractvalue %dx.types.CBufRet.f32 %748, 3
  %761 = fsub fast float %759, %760
  %762 = fmul fast float %761, %758
  %763 = fadd fast float %762, %760
  %764 = call float @dx.op.unary.f32(i32 7, float %763)  ; Saturate(value)
  %765 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %33)  ; CreateHandleForLib(Resource)
  %766 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %12)  ; CreateHandleForLib(Resource)
  %767 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %765, %dx.types.Handle %766, float %619, float %620, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %768 = extractvalue %dx.types.ResRet.f32 %767, 0
  %769 = extractvalue %dx.types.ResRet.f32 %767, 1
  %770 = extractvalue %dx.types.ResRet.f32 %767, 2
  %771 = extractvalue %dx.types.ResRet.f32 %767, 3
  %772 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %773 = extractvalue %dx.types.CBufRet.f32 %772, 0
  %774 = extractvalue %dx.types.CBufRet.f32 %772, 1
  %775 = extractvalue %dx.types.CBufRet.f32 %772, 2
  %776 = extractvalue %dx.types.CBufRet.f32 %772, 3
  %777 = call float @dx.op.dot4.f32(i32 56, float %768, float %769, float %770, float %771, float %773, float %774, float %775, float %776)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %778 = fmul fast float %777, 2.000000e+00
  %779 = fadd fast float %764, -1.000000e+00
  %780 = fadd fast float %779, %778
  %781 = call float @dx.op.binary.f32(i32 35, float %780, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %782 = call float @dx.op.binary.f32(i32 36, float %781, float 1.000000e+00)  ; FMin(a,b)
  %783 = fadd fast float %782, %747
  %784 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %32)  ; CreateHandleForLib(Resource)
  %785 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %11)  ; CreateHandleForLib(Resource)
  %786 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %784, %dx.types.Handle %785, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %787 = extractvalue %dx.types.ResRet.f32 %786, 1
  %788 = extractvalue %dx.types.ResRet.f32 %786, 2
  %789 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %790 = extractvalue %dx.types.CBufRet.f32 %789, 1
  %791 = extractvalue %dx.types.CBufRet.f32 %789, 2
  %792 = fsub fast float %790, %791
  %793 = fmul fast float %792, %788
  %794 = fadd fast float %793, %791
  %795 = call float @dx.op.unary.f32(i32 7, float %794)  ; Saturate(value)
  %796 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %797 = extractvalue %dx.types.CBufRet.f32 %796, 0
  %798 = extractvalue %dx.types.CBufRet.f32 %796, 1
  %799 = extractvalue %dx.types.CBufRet.f32 %796, 2
  %800 = extractvalue %dx.types.CBufRet.f32 %796, 3
  %801 = call float @dx.op.dot4.f32(i32 56, float %738, float %739, float %740, float %741, float %797, float %798, float %799, float %800)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %802 = fmul fast float %801, 2.000000e+00
  %803 = fadd fast float %795, -1.000000e+00
  %804 = fadd fast float %803, %802
  %805 = call float @dx.op.binary.f32(i32 35, float %804, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %806 = call float @dx.op.binary.f32(i32 36, float %805, float 1.000000e+00)  ; FMin(a,b)
  %807 = fadd fast float %783, %806
  %808 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %31)  ; CreateHandleForLib(Resource)
  %809 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %10)  ; CreateHandleForLib(Resource)
  %810 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %808, %dx.types.Handle %809, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %811 = extractvalue %dx.types.ResRet.f32 %810, 1
  %812 = extractvalue %dx.types.ResRet.f32 %810, 2
  %813 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %814 = extractvalue %dx.types.CBufRet.f32 %813, 1
  %815 = extractvalue %dx.types.CBufRet.f32 %813, 2
  %816 = fsub fast float %814, %815
  %817 = fmul fast float %816, %812
  %818 = fadd fast float %817, %815
  %819 = call float @dx.op.unary.f32(i32 7, float %818)  ; Saturate(value)
  %820 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %821 = extractvalue %dx.types.CBufRet.f32 %820, 0
  %822 = extractvalue %dx.types.CBufRet.f32 %820, 1
  %823 = extractvalue %dx.types.CBufRet.f32 %820, 2
  %824 = extractvalue %dx.types.CBufRet.f32 %820, 3
  %825 = call float @dx.op.dot4.f32(i32 56, float %738, float %739, float %740, float %741, float %821, float %822, float %823, float %824)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %826 = fmul fast float %825, 2.000000e+00
  %827 = fadd fast float %819, -1.000000e+00
  %828 = fadd fast float %827, %826
  %829 = call float @dx.op.binary.f32(i32 35, float %828, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %830 = call float @dx.op.binary.f32(i32 36, float %829, float 1.000000e+00)  ; FMin(a,b)
  %831 = fadd fast float %807, %830
  %832 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %30)  ; CreateHandleForLib(Resource)
  %833 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %9)  ; CreateHandleForLib(Resource)
  %834 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %832, %dx.types.Handle %833, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %835 = extractvalue %dx.types.ResRet.f32 %834, 1
  %836 = extractvalue %dx.types.ResRet.f32 %834, 2
  %837 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %838 = extractvalue %dx.types.CBufRet.f32 %837, 1
  %839 = extractvalue %dx.types.CBufRet.f32 %837, 2
  %840 = fsub fast float %838, %839
  %841 = fmul fast float %840, %836
  %842 = fadd fast float %841, %839
  %843 = call float @dx.op.unary.f32(i32 7, float %842)  ; Saturate(value)
  %844 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %845 = extractvalue %dx.types.CBufRet.f32 %844, 0
  %846 = extractvalue %dx.types.CBufRet.f32 %844, 1
  %847 = extractvalue %dx.types.CBufRet.f32 %844, 2
  %848 = extractvalue %dx.types.CBufRet.f32 %844, 3
  %849 = call float @dx.op.dot4.f32(i32 56, float %738, float %739, float %740, float %741, float %845, float %846, float %847, float %848)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %850 = fmul fast float %849, 2.000000e+00
  %851 = fadd fast float %843, -1.000000e+00
  %852 = fadd fast float %851, %850
  %853 = call float @dx.op.binary.f32(i32 35, float %852, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %854 = call float @dx.op.binary.f32(i32 36, float %853, float 1.000000e+00)  ; FMin(a,b)
  %855 = fadd fast float %831, %854
  %856 = fdiv fast float 1.000000e+00, %855
  %857 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %29)  ; CreateHandleForLib(Resource)
  %858 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %17)  ; CreateHandleForLib(Resource)
  %859 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %857, %dx.types.Handle %858, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %860 = extractvalue %dx.types.ResRet.f32 %859, 0
  %861 = extractvalue %dx.types.ResRet.f32 %859, 1
  %862 = fmul fast float %860, 2.000000e+00
  %863 = fmul fast float %861, 2.000000e+00
  %864 = fadd fast float %862, -1.000000e+00
  %865 = fadd fast float %863, -1.000000e+00
  %866 = call float @dx.op.dot2.f32(i32 54, float %864, float %865, float %864, float %865)  ; Dot2(ax,ay,bx,by)
  %867 = fsub fast float 1.000000e+00, %866
  %868 = call float @dx.op.unary.f32(i32 7, float %867)  ; Saturate(value)
  %869 = call float @dx.op.unary.f32(i32 24, float %868)  ; Sqrt(value)
  %870 = fmul fast float %856, %747
  %871 = fmul fast float %864, %870
  %872 = fmul fast float %865, %870
  %873 = fmul fast float %869, %870
  %874 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %28)  ; CreateHandleForLib(Resource)
  %875 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %8)  ; CreateHandleForLib(Resource)
  %876 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %874, %dx.types.Handle %875, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %877 = extractvalue %dx.types.ResRet.f32 %876, 0
  %878 = extractvalue %dx.types.ResRet.f32 %876, 1
  %879 = fmul fast float %877, 2.000000e+00
  %880 = fmul fast float %878, 2.000000e+00
  %881 = fadd fast float %879, -1.000000e+00
  %882 = fadd fast float %880, -1.000000e+00
  %883 = call float @dx.op.dot2.f32(i32 54, float %881, float %882, float %881, float %882)  ; Dot2(ax,ay,bx,by)
  %884 = fsub fast float 1.000000e+00, %883
  %885 = call float @dx.op.unary.f32(i32 7, float %884)  ; Saturate(value)
  %886 = call float @dx.op.unary.f32(i32 24, float %885)  ; Sqrt(value)
  %887 = fmul fast float %856, %782
  %888 = fmul fast float %881, %887
  %889 = fmul fast float %882, %887
  %890 = fmul fast float %886, %887
  %891 = fadd fast float %888, %871
  %892 = fadd fast float %889, %872
  %893 = fadd fast float %890, %873
  %894 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %27)  ; CreateHandleForLib(Resource)
  %895 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleForLib(Resource)
  %896 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %894, %dx.types.Handle %895, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %897 = extractvalue %dx.types.ResRet.f32 %896, 0
  %898 = extractvalue %dx.types.ResRet.f32 %896, 1
  %899 = fmul fast float %897, 2.000000e+00
  %900 = fmul fast float %898, 2.000000e+00
  %901 = fadd fast float %899, -1.000000e+00
  %902 = fadd fast float %900, -1.000000e+00
  %903 = call float @dx.op.dot2.f32(i32 54, float %901, float %902, float %901, float %902)  ; Dot2(ax,ay,bx,by)
  %904 = fsub fast float 1.000000e+00, %903
  %905 = call float @dx.op.unary.f32(i32 7, float %904)  ; Saturate(value)
  %906 = call float @dx.op.unary.f32(i32 24, float %905)  ; Sqrt(value)
  %907 = fmul fast float %856, %806
  %908 = fmul fast float %901, %907
  %909 = fmul fast float %902, %907
  %910 = fmul fast float %906, %907
  %911 = fadd fast float %891, %908
  %912 = fadd fast float %892, %909
  %913 = fadd fast float %893, %910
  %914 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %26)  ; CreateHandleForLib(Resource)
  %915 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %6)  ; CreateHandleForLib(Resource)
  %916 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %914, %dx.types.Handle %915, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %917 = extractvalue %dx.types.ResRet.f32 %916, 0
  %918 = extractvalue %dx.types.ResRet.f32 %916, 1
  %919 = fmul fast float %917, 2.000000e+00
  %920 = fmul fast float %918, 2.000000e+00
  %921 = fadd fast float %919, -1.000000e+00
  %922 = fadd fast float %920, -1.000000e+00
  %923 = call float @dx.op.dot2.f32(i32 54, float %921, float %922, float %921, float %922)  ; Dot2(ax,ay,bx,by)
  %924 = fsub fast float 1.000000e+00, %923
  %925 = call float @dx.op.unary.f32(i32 7, float %924)  ; Saturate(value)
  %926 = call float @dx.op.unary.f32(i32 24, float %925)  ; Sqrt(value)
  %927 = fmul fast float %856, %830
  %928 = fmul fast float %921, %927
  %929 = fmul fast float %922, %927
  %930 = fmul fast float %926, %927
  %931 = fadd fast float %911, %928
  %932 = fadd fast float %912, %929
  %933 = fadd fast float %913, %930
  %934 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %25)  ; CreateHandleForLib(Resource)
  %935 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %5)  ; CreateHandleForLib(Resource)
  %936 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %934, %dx.types.Handle %935, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %937 = extractvalue %dx.types.ResRet.f32 %936, 0
  %938 = extractvalue %dx.types.ResRet.f32 %936, 1
  %939 = fmul fast float %937, 2.000000e+00
  %940 = fmul fast float %938, 2.000000e+00
  %941 = fadd fast float %939, -1.000000e+00
  %942 = fadd fast float %940, -1.000000e+00
  %943 = call float @dx.op.dot2.f32(i32 54, float %941, float %942, float %941, float %942)  ; Dot2(ax,ay,bx,by)
  %944 = fsub fast float 1.000000e+00, %943
  %945 = call float @dx.op.unary.f32(i32 7, float %944)  ; Saturate(value)
  %946 = call float @dx.op.unary.f32(i32 24, float %945)  ; Sqrt(value)
  %947 = fmul fast float %856, %854
  %948 = fmul fast float %941, %947
  %949 = fmul fast float %942, %947
  %950 = fmul fast float %946, %947
  %951 = fadd fast float %931, %948
  %952 = fadd fast float %932, %949
  %953 = fadd fast float %933, %950
  %954 = fmul fast float %951, %630
  %955 = fmul fast float %952, %630
  %956 = fmul fast float %953, %630
  %957 = fadd fast float %954, %72
  %958 = fadd fast float %955, %629
  %959 = fadd fast float %956, %73
  %960 = call float @dx.op.dot3.f32(i32 55, float %957, float %958, float %959, float %957, float %958, float %959)  ; Dot3(ax,ay,az,bx,by,bz)
  %961 = call float @dx.op.unary.f32(i32 25, float %960)  ; Rsqrt(value)
  %962 = fmul fast float %957, %961
  %963 = fmul fast float %958, %961
  %964 = fmul fast float %959, %961
  %965 = fmul fast float %962, %709
  %966 = call float @dx.op.tertiary.f32(i32 46, float %963, float %716, float %965)  ; FMad(a,b,c)
  %967 = call float @dx.op.tertiary.f32(i32 46, float %964, float %725, float %966)  ; FMad(a,b,c)
  %968 = fmul fast float %962, %711
  %969 = call float @dx.op.tertiary.f32(i32 46, float %963, float %719, float %968)  ; FMad(a,b,c)
  %970 = call float @dx.op.tertiary.f32(i32 46, float %964, float %728, float %969)  ; FMad(a,b,c)
  %971 = fmul fast float %962, %713
  %972 = call float @dx.op.tertiary.f32(i32 46, float %963, float %722, float %971)  ; FMad(a,b,c)
  %973 = call float @dx.op.tertiary.f32(i32 46, float %964, float %731, float %972)  ; FMad(a,b,c)
  %974 = call float @dx.op.dot3.f32(i32 55, float %967, float %970, float %973, float %967, float %970, float %973)  ; Dot3(ax,ay,az,bx,by,bz)
  %975 = call float @dx.op.unary.f32(i32 25, float %974)  ; Rsqrt(value)
  %976 = fmul fast float %967, %734
  %977 = fmul fast float %976, %975
  %978 = fmul fast float %970, %734
  %979 = fmul fast float %978, %975
  %980 = fmul fast float %973, %734
  %981 = fmul fast float %980, %975
  %982 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %56, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %983 = extractvalue %dx.types.CBufRet.f32 %982, 0
  %984 = extractvalue %dx.types.CBufRet.f32 %982, 1
  %985 = extractvalue %dx.types.CBufRet.f32 %982, 2
  %986 = extractvalue %dx.types.CBufRet.f32 %982, 3
  %987 = fmul fast float %984, %983
  %988 = fmul fast float %985, %983
  %989 = fmul fast float %986, %983
  %990 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %24)  ; CreateHandleForLib(Resource)
  %991 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %990, %dx.types.Handle %858, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %992 = extractvalue %dx.types.ResRet.f32 %991, 0
  %993 = extractvalue %dx.types.ResRet.f32 %991, 1
  %994 = extractvalue %dx.types.ResRet.f32 %991, 2
  %995 = fmul fast float %992, %870
  %996 = fmul fast float %993, %870
  %997 = fmul fast float %994, %870
  %998 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %23)  ; CreateHandleForLib(Resource)
  %999 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleForLib(Resource)
  %1000 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %998, %dx.types.Handle %999, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1001 = extractvalue %dx.types.ResRet.f32 %1000, 0
  %1002 = extractvalue %dx.types.ResRet.f32 %1000, 1
  %1003 = extractvalue %dx.types.ResRet.f32 %1000, 2
  %1004 = fmul fast float %1001, %887
  %1005 = fmul fast float %1002, %887
  %1006 = fmul fast float %1003, %887
  %1007 = fadd fast float %1004, %995
  %1008 = fadd fast float %1005, %996
  %1009 = fadd fast float %1006, %997
  %1010 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %22)  ; CreateHandleForLib(Resource)
  %1011 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleForLib(Resource)
  %1012 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1010, %dx.types.Handle %1011, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1013 = extractvalue %dx.types.ResRet.f32 %1012, 0
  %1014 = extractvalue %dx.types.ResRet.f32 %1012, 1
  %1015 = extractvalue %dx.types.ResRet.f32 %1012, 2
  %1016 = fmul fast float %1013, %907
  %1017 = fmul fast float %1014, %907
  %1018 = fmul fast float %1015, %907
  %1019 = fadd fast float %1007, %1016
  %1020 = fadd fast float %1008, %1017
  %1021 = fadd fast float %1009, %1018
  %1022 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %21)  ; CreateHandleForLib(Resource)
  %1023 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %1024 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1022, %dx.types.Handle %1023, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1025 = extractvalue %dx.types.ResRet.f32 %1024, 0
  %1026 = extractvalue %dx.types.ResRet.f32 %1024, 1
  %1027 = extractvalue %dx.types.ResRet.f32 %1024, 2
  %1028 = fmul fast float %1025, %927
  %1029 = fmul fast float %1026, %927
  %1030 = fmul fast float %1027, %927
  %1031 = fadd fast float %1019, %1028
  %1032 = fadd fast float %1020, %1029
  %1033 = fadd fast float %1021, %1030
  %1034 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %20)  ; CreateHandleForLib(Resource)
  %1035 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleForLib(Resource)
  %1036 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1034, %dx.types.Handle %1035, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float %753)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1037 = extractvalue %dx.types.ResRet.f32 %1036, 0
  %1038 = extractvalue %dx.types.ResRet.f32 %1036, 1
  %1039 = extractvalue %dx.types.ResRet.f32 %1036, 2
  %1040 = fmul fast float %1037, %947
  %1041 = fmul fast float %1038, %947
  %1042 = fmul fast float %1039, %947
  %1043 = fadd fast float %1031, %1040
  %1044 = fadd fast float %1032, %1041
  %1045 = fadd fast float %1033, %1042
  %1046 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %19)  ; CreateHandleForLib(Resource)
  %1047 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1046, %dx.types.Handle %858, float %750, float %751, float undef, float undef, i32 0, i32 0, i32 undef, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1048 = extractvalue %dx.types.ResRet.f32 %1047, 1
  %1049 = fmul fast float %1048, %870
  %1050 = fmul fast float %887, %757
  %1051 = fmul fast float %907, %787
  %1052 = fmul fast float %927, %811
  %1053 = fmul fast float %947, %835
  %1054 = fadd fast float %1051, %1050
  %1055 = fadd fast float %1054, %1052
  %1056 = fadd fast float %1055, %1053
  %1057 = fadd fast float %1056, %1049
  %1058 = mul nuw nsw i32 %205, 40
  %1059 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %195, i32 %1058, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1060 = extractvalue %dx.types.ResRet.f32 %1059, 0
  %1061 = bitcast float %1060 to i32
  %1062 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %1063 = zext i1 %733 to i32
  %1064 = call float @dx.op.unary.f32(i32 7, float %1043)  ; Saturate(value)
  %1065 = call float @dx.op.unary.f32(i32 7, float %1044)  ; Saturate(value)
  %1066 = call float @dx.op.unary.f32(i32 7, float %1045)  ; Saturate(value)
  %1067 = call float @dx.op.unary.f32(i32 7, float %1057)  ; Saturate(value)
  %1068 = fmul fast float %1067, %631
  %1069 = fadd fast float %1068, %75
  %1070 = and i32 %1061, 64
  %1071 = icmp ne i32 %1070, 0
  %1072 = select i1 %1071, float -1.000000e+00, float 1.000000e+00
  %1073 = fmul fast float %1072, %734
  %1074 = fmul fast float %669, %1073
  %1075 = fmul fast float %670, %1073
  %1076 = fmul fast float %671, %1073
  %1077 = call float @dx.op.dot3.f32(i32 55, float %725, float %728, float %731, float %725, float %728, float %731)  ; Dot3(ax,ay,az,bx,by,bz)
  %1078 = call float @dx.op.unary.f32(i32 25, float %1077)  ; Rsqrt(value)
  %1079 = fmul fast float %734, %725
  %1080 = fmul fast float %1079, %1078
  %1081 = fmul fast float %734, %728
  %1082 = fmul fast float %1081, %1078
  %1083 = fmul fast float %734, %731
  %1084 = fmul fast float %1083, %1078
  %1085 = call float @dx.op.binary.f32(i32 35, float %987, float 0.000000e+00)  ; FMax(a,b)
  %1086 = call float @dx.op.binary.f32(i32 35, float %988, float 0.000000e+00)  ; FMax(a,b)
  %1087 = call float @dx.op.binary.f32(i32 35, float %989, float 0.000000e+00)  ; FMax(a,b)
  %1088 = call i32 @dx.op.legacyF32ToF16(i32 130, float %633)  ; LegacyF32ToF16(value)
  %1089 = call i32 @dx.op.legacyF32ToF16(i32 130, float %80)  ; LegacyF32ToF16(value)
  %1090 = shl i32 %1089, 16
  %1091 = or i32 %1090, %1088
  %1092 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1085)  ; LegacyF32ToF16(value)
  %1093 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1086)  ; LegacyF32ToF16(value)
  %1094 = shl i32 %1093, 16
  %1095 = or i32 %1094, %1092
  %1096 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1087)  ; LegacyF32ToF16(value)
  %1097 = call float @dx.op.unary.f32(i32 6, float %977)  ; FAbs(value)
  %1098 = call float @dx.op.unary.f32(i32 6, float %979)  ; FAbs(value)
  %1099 = call float @dx.op.unary.f32(i32 6, float %981)  ; FAbs(value)
  %1100 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %1097, float %1098, float %1099)  ; Dot3(ax,ay,az,bx,by,bz)
  %1101 = fdiv fast float %977, %1100
  %1102 = fdiv fast float %979, %1100
  %1103 = fcmp fast ugt float %981, 0.000000e+00
  br i1 %1103, label %1115, label %1104

; <label>:1104                                    ; preds = %628
  %1105 = call float @dx.op.unary.f32(i32 6, float %1102)  ; FAbs(value)
  %1106 = call float @dx.op.unary.f32(i32 6, float %1101)  ; FAbs(value)
  %1107 = fsub fast float 1.000000e+00, %1105
  %1108 = fsub fast float 1.000000e+00, %1106
  %1109 = fcmp fast oge float %1101, 0.000000e+00
  %1110 = fcmp fast oge float %1102, 0.000000e+00
  %1111 = select i1 %1109, float 1.000000e+00, float -1.000000e+00
  %1112 = select i1 %1110, float 1.000000e+00, float -1.000000e+00
  %1113 = fmul fast float %1107, %1111
  %1114 = fmul fast float %1108, %1112
  br label %1115

; <label>:1115                                    ; preds = %1104, %628
  %1116 = phi float [ %1113, %1104 ], [ %1101, %628 ]
  %1117 = phi float [ %1114, %1104 ], [ %1102, %628 ]
  %1118 = fmul fast float %1116, 2.047000e+03
  %1119 = fmul fast float %1117, 2.047000e+03
  %1120 = fadd fast float %1118, 2.047000e+03
  %1121 = fadd fast float %1119, 2.047000e+03
  %1122 = call float @dx.op.unary.f32(i32 26, float %1120)  ; Round_ne(value)
  %1123 = call float @dx.op.unary.f32(i32 26, float %1121)  ; Round_ne(value)
  %1124 = fptosi float %1122 to i32
  %1125 = fptosi float %1123 to i32
  %1126 = shl i32 %1125, 12
  %1127 = add i32 %1126, %1124
  %1128 = call float @dx.op.unary.f32(i32 6, float %1074)  ; FAbs(value)
  %1129 = call float @dx.op.unary.f32(i32 6, float %1075)  ; FAbs(value)
  %1130 = call float @dx.op.unary.f32(i32 6, float %1076)  ; FAbs(value)
  %1131 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %1128, float %1129, float %1130)  ; Dot3(ax,ay,az,bx,by,bz)
  %1132 = fdiv fast float %1074, %1131
  %1133 = fdiv fast float %1075, %1131
  %1134 = fcmp fast ugt float %1076, 0.000000e+00
  br i1 %1134, label %1146, label %1135

; <label>:1135                                    ; preds = %1115
  %1136 = call float @dx.op.unary.f32(i32 6, float %1133)  ; FAbs(value)
  %1137 = call float @dx.op.unary.f32(i32 6, float %1132)  ; FAbs(value)
  %1138 = fsub fast float 1.000000e+00, %1136
  %1139 = fsub fast float 1.000000e+00, %1137
  %1140 = fcmp fast oge float %1132, 0.000000e+00
  %1141 = fcmp fast oge float %1133, 0.000000e+00
  %1142 = select i1 %1140, float 1.000000e+00, float -1.000000e+00
  %1143 = select i1 %1141, float 1.000000e+00, float -1.000000e+00
  %1144 = fmul fast float %1138, %1142
  %1145 = fmul fast float %1139, %1143
  br label %1146

; <label>:1146                                    ; preds = %1135, %1115
  %1147 = phi float [ %1144, %1135 ], [ %1132, %1115 ]
  %1148 = phi float [ %1145, %1135 ], [ %1133, %1115 ]
  %1149 = fmul fast float %1147, 2.047000e+03
  %1150 = fmul fast float %1148, 2.047000e+03
  %1151 = fadd fast float %1149, 2.047000e+03
  %1152 = fadd fast float %1150, 2.047000e+03
  %1153 = call float @dx.op.unary.f32(i32 26, float %1151)  ; Round_ne(value)
  %1154 = call float @dx.op.unary.f32(i32 26, float %1152)  ; Round_ne(value)
  %1155 = fptosi float %1153 to i32
  %1156 = fptosi float %1154 to i32
  %1157 = shl i32 %1156, 12
  %1158 = add i32 %1157, %1155
  %1159 = shl i32 %1127, 16
  %1160 = or i32 %1159, %1096
  %1161 = lshr i32 %1127, 16
  %1162 = shl i32 %1158, 8
  %1163 = or i32 %1162, %1161
  %1164 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1064)  ; LegacyF32ToF16(value)
  %1165 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1065)  ; LegacyF32ToF16(value)
  %1166 = shl i32 %1165, 16
  %1167 = or i32 %1166, %1164
  %1168 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1066)  ; LegacyF32ToF16(value)
  %1169 = call i32 @dx.op.legacyF32ToF16(i32 130, float 1.000000e+00)  ; LegacyF32ToF16(value)
  %1170 = shl i32 %1169, 16
  %1171 = or i32 %1170, %1168
  %1172 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %1173 = call i32 @dx.op.legacyF32ToF16(i32 130, float 5.000000e-01)  ; LegacyF32ToF16(value)
  %1174 = shl i32 %1173, 16
  %1175 = or i32 %1174, %1172
  %1176 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1069)  ; LegacyF32ToF16(value)
  %1177 = shl i32 %1172, 16
  %1178 = or i32 %1177, %1176
  %1179 = shl nuw nsw i32 %1063, 23
  %1180 = shl i32 %1061, 19
  %1181 = and i32 %1180, -536870912
  %1182 = or i32 %1179, %1181
  %1183 = or i32 %1182, %1169
  %1184 = or i32 %1183, 65536
  %1185 = call float @dx.op.unary.f32(i32 6, float %1080)  ; FAbs(value)
  %1186 = call float @dx.op.unary.f32(i32 6, float %1082)  ; FAbs(value)
  %1187 = call float @dx.op.unary.f32(i32 6, float %1084)  ; FAbs(value)
  %1188 = call float @dx.op.dot3.f32(i32 55, float 1.000000e+00, float 1.000000e+00, float 1.000000e+00, float %1185, float %1186, float %1187)  ; Dot3(ax,ay,az,bx,by,bz)
  %1189 = fdiv fast float %1080, %1188
  %1190 = fdiv fast float %1082, %1188
  %1191 = fcmp fast ugt float %1084, 0.000000e+00
  br i1 %1191, label %1203, label %1192

; <label>:1192                                    ; preds = %1146
  %1193 = call float @dx.op.unary.f32(i32 6, float %1190)  ; FAbs(value)
  %1194 = call float @dx.op.unary.f32(i32 6, float %1189)  ; FAbs(value)
  %1195 = fsub fast float 1.000000e+00, %1193
  %1196 = fsub fast float 1.000000e+00, %1194
  %1197 = fcmp fast oge float %1189, 0.000000e+00
  %1198 = fcmp fast oge float %1190, 0.000000e+00
  %1199 = select i1 %1197, float 1.000000e+00, float -1.000000e+00
  %1200 = select i1 %1198, float 1.000000e+00, float -1.000000e+00
  %1201 = fmul fast float %1195, %1199
  %1202 = fmul fast float %1196, %1200
  br label %1203

; <label>:1203                                    ; preds = %1192, %1146
  %1204 = phi float [ %1201, %1192 ], [ %1189, %1146 ]
  %1205 = phi float [ %1202, %1192 ], [ %1190, %1146 ]
  %1206 = fmul fast float %1204, 2.047000e+03
  %1207 = fmul fast float %1205, 2.047000e+03
  %1208 = fadd fast float %1206, 2.047000e+03
  %1209 = fadd fast float %1207, 2.047000e+03
  %1210 = call float @dx.op.unary.f32(i32 26, float %1208)  ; Round_ne(value)
  %1211 = call float @dx.op.unary.f32(i32 26, float %1209)  ; Round_ne(value)
  %1212 = fptosi float %1210 to i32
  %1213 = fptosi float %1211 to i32
  %1214 = shl i32 %1213, 12
  %1215 = add i32 %1214, %1212
  %1216 = call float @dx.op.unary.f32(i32 6, float 0x7FF8000000000000)  ; FAbs(value)
  %1217 = fsub fast float 1.000000e+00, %1216
  %1218 = fmul fast float %1217, 2.047000e+03
  %1219 = fsub fast float 2.047000e+03, %1218
  %1220 = call float @dx.op.unary.f32(i32 26, float %1219)  ; Round_ne(value)
  %1221 = fptosi float %1220 to i32
  %1222 = mul i32 %1221, 4097
  %1223 = mul i32 %1221, 1048832
  %1224 = and i32 %1223, -16777216
  %1225 = or i32 %1224, %1215
  %1226 = and i32 %1222, 65535
  %1227 = or i32 %1226, %1177
  %1228 = or i32 %1177, %1172
  %1229 = or i32 %1170, %1169
  %1230 = or i32 %1177, %1169
  store float %1062, float* %62, align 4
  store i32 %1091, i32* %76, align 4
  %1231 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 2
  store i32 0, i32* %1231, align 4
  %1232 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 0
  store i32 %1095, i32* %1232, align 4
  %1233 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 1
  store i32 %1160, i32* %1233, align 4
  %1234 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 2
  store i32 %1163, i32* %1234, align 4
  %1235 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 3
  store i32 %1167, i32* %1235, align 4
  %1236 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 4
  store i32 %1171, i32* %1236, align 4
  %1237 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 5
  store i32 %1175, i32* %1237, align 4
  %1238 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 6
  store i32 %1178, i32* %1238, align 4
  %1239 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 7
  store i32 %1184, i32* %1239, align 4
  %1240 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 8
  store i32 %1225, i32* %1240, align 4
  %1241 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 9
  store i32 %1227, i32* %1241, align 4
  %1242 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 10
  store i32 %1228, i32* %1242, align 4
  %1243 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 11
  store i32 %1229, i32* %1243, align 4
  %1244 = getelementptr inbounds %struct.FPackedPathTracingPayload, %struct.FPackedPathTracingPayload* %PackedPayload, i32 0, i32 3, i32 12
  store i32 %1230, i32* %1244, align 4
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.View(i32, %View) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32, %LandscapeMVF) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32, %LandscapeContinuousLODParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32, %LandscapeParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32, %HitGroupSystemRootConstants) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32, %"class.Buffer<float>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32, %"class.StructuredBuffer<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!59, !62}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, null, !34, !41}
!5 = !{!6, !8, !9, !11, !13, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_PrimitiveSceneData", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_InstanceSceneData", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", !"View_LandscapeIndirection", i32 0, i32 2, i32 1, i32 10, i32 0, !10}
!10 = !{i32 0, i32 5}
!11 = !{i32 3, %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", !"View_LandscapePerComponentData", i32 0, i32 3, i32 1, i32 10, i32 0, !12}
!12 = !{i32 0, i32 9}
!13 = !{i32 4, %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", !"LandscapeContinuousLODParameters_SectionLODBias", i32 0, i32 4, i32 1, i32 10, i32 0, !12}
!14 = !{i32 5, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_HeightmapTexture", i32 0, i32 5, i32 1, i32 2, i32 0, !12}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_NormalmapTexture", i32 0, i32 6, i32 1, i32 2, i32 0, !12}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_0", i32 0, i32 7, i32 1, i32 2, i32 0, !12}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_1", i32 0, i32 8, i32 1, i32 2, i32 0, !12}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_2", i32 0, i32 9, i32 1, i32 2, i32 0, !12}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_3", i32 0, i32 10, i32 1, i32 2, i32 0, !12}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_4", i32 0, i32 11, i32 1, i32 2, i32 0, !12}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_5", i32 0, i32 12, i32 1, i32 2, i32 0, !12}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_6", i32 0, i32 13, i32 1, i32 2, i32 0, !12}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_7", i32 0, i32 14, i32 1, i32 2, i32 0, !12}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_8", i32 0, i32 15, i32 1, i32 2, i32 0, !12}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_9", i32 0, i32 16, i32 1, i32 2, i32 0, !12}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_10", i32 0, i32 17, i32 1, i32 2, i32 0, !12}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_11", i32 0, i32 18, i32 1, i32 2, i32 0, !12}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_12", i32 0, i32 19, i32 1, i32 2, i32 0, !12}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_13", i32 0, i32 20, i32 1, i32 2, i32 0, !12}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_14", i32 0, i32 21, i32 1, i32 2, i32 0, !12}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_15", i32 0, i32 22, i32 1, i32 2, i32 0, !12}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_16", i32 0, i32 23, i32 1, i32 2, i32 0, !12}
!33 = !{i32 24, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!34 = !{!35, !36, !37, !38, !39, !40}
!35 = !{i32 0, %View* @View, !"View", i32 0, i32 0, i32 1, i32 4960, null}
!36 = !{i32 1, %LandscapeMVF* @LandscapeMVF, !"LandscapeMVF", i32 0, i32 1, i32 1, i32 8, null}
!37 = !{i32 2, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, !"LandscapeContinuousLODParameters", i32 0, i32 2, i32 1, i32 24, null}
!38 = !{i32 3, %LandscapeParameters* @LandscapeParameters, !"LandscapeParameters", i32 0, i32 3, i32 1, i32 208, null}
!39 = !{i32 4, %Material* @Material, !"Material", i32 0, i32 4, i32 1, i32 176, null}
!40 = !{i32 5, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 16, null}
!41 = !{!42, !43, !44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58}
!42 = !{i32 0, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", !"View_MaterialTextureBilinearWrapedSampler", i32 0, i32 0, i32 1, i32 0, null}
!43 = !{i32 1, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_HeightmapTextureSampler", i32 0, i32 1, i32 1, i32 0, null}
!44 = !{i32 2, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_NormalmapTextureSampler", i32 0, i32 2, i32 1, i32 0, null}
!45 = !{i32 3, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", !"Material_Texture2D_0Sampler", i32 0, i32 3, i32 1, i32 0, null}
!46 = !{i32 4, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", !"Material_Texture2D_1Sampler", i32 0, i32 4, i32 1, i32 0, null}
!47 = !{i32 5, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", !"Material_Texture2D_2Sampler", i32 0, i32 5, i32 1, i32 0, null}
!48 = !{i32 6, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", !"Material_Texture2D_3Sampler", i32 0, i32 6, i32 1, i32 0, null}
!49 = !{i32 7, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", !"Material_Texture2D_4Sampler", i32 0, i32 7, i32 1, i32 0, null}
!50 = !{i32 8, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", !"Material_Texture2D_5Sampler", i32 0, i32 8, i32 1, i32 0, null}
!51 = !{i32 9, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", !"Material_Texture2D_7Sampler", i32 0, i32 9, i32 1, i32 0, null}
!52 = !{i32 10, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", !"Material_Texture2D_8Sampler", i32 0, i32 10, i32 1, i32 0, null}
!53 = !{i32 11, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", !"Material_Texture2D_9Sampler", i32 0, i32 11, i32 1, i32 0, null}
!54 = !{i32 12, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", !"Material_Texture2D_10Sampler", i32 0, i32 12, i32 1, i32 0, null}
!55 = !{i32 13, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", !"Material_Texture2D_12Sampler", i32 0, i32 13, i32 1, i32 0, null}
!56 = !{i32 14, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", !"Material_Texture2D_13Sampler", i32 0, i32 14, i32 1, i32 0, null}
!57 = !{i32 15, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", !"Material_Texture2D_14Sampler", i32 0, i32 15, i32 1, i32 0, null}
!58 = !{i32 16, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", !"Material_Texture2D_15Sampler", i32 0, i32 16, i32 1, i32 0, null}
!59 = !{null, !"", null, !4, !60}
!60 = !{i32 0, i64 8388624, i32 5, !61}
!61 = !{i32 0}
!62 = !{void (%struct.FPackedPathTracingPayload*, %struct.FDefaultAttributes*)* @"\01?PathTracingMaterialCHS@@YAXUFPackedPathTracingPayload@@UFDefaultAttributes@@@Z", !"\01?PathTracingMaterialCHS@@YAXUFPackedPathTracingPayload@@UFDefaultAttributes@@@Z", null, null, !63}
!63 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !61}
!64 = !{!65, !67}
!65 = distinct !{!65, !66, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %PixelMaterialInputs"}
!66 = distinct !{!66, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z"}
!67 = distinct !{!67, !68, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z: %PixelMaterialInputs"}
!68 = distinct !{!68, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z"}
!69 = !{!70, !65, !67}
!70 = distinct !{!70, !66, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %Parameters"}
!71 = !{!72, !74, !76}
!72 = distinct !{!72, !73, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!73 = distinct !{!73, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!74 = distinct !{!74, !75, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!75 = distinct !{!75, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!76 = distinct !{!76, !75, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!77 = !{!78, !65, !67}
!78 = distinct !{!78, !79, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z: %agg.result"}
!79 = distinct !{!79, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z"}
!80 = !{!81, !83, !74, !76}
!81 = distinct !{!81, !82, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!82 = distinct !{!82, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!83 = distinct !{!83, !84, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!84 = distinct !{!84, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!85 = !{!86, !88, !72, !74, !76}
!86 = distinct !{!86, !87, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!87 = distinct !{!87, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!88 = distinct !{!88, !89, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!89 = distinct !{!89, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!90 = !{!91, !91, i64 0}
!91 = !{!"float", !92, i64 0}
!92 = !{!"omnipotent char", !93, i64 0}
!93 = !{!"Simple C/C++ TBAA"}
!94 = !{!95, !95, i64 0}
!95 = !{!"int", !92, i64 0}
!96 = !{!97}
!97 = distinct !{!97, !98, !"\01?internal.GetRayCone@FPackedPathTracingPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!98 = distinct !{!98, !"\01?internal.GetRayCone@FPackedPathTracingPayload@@QAA?AUFRayCone@@XZ"}
!99 = !{!74, !76}
!100 = !{!83, !74, !76}
!101 = distinct !{!101, !"dx.controlflow.hints", i32 1}
