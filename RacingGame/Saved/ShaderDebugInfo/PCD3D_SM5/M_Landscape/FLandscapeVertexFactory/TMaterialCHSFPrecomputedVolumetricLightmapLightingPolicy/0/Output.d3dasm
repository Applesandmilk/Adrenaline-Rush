; shader hash: f8318d6e20fc0103e696c35622714033
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2016
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2032
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2048
;       float4 View_ScreenToViewSpace;                ; Offset: 2064
;       int View_NumSceneColorMSAASamples;            ; Offset: 2080
;       float View_PreExposure;                       ; Offset: 2084
;       float View_OneOverPreExposure;                ; Offset: 2088
;       float PrePadding_View_2092;                   ; Offset: 2092
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2096
;       float4 View_SpecularOverrideParameter;        ; Offset: 2112
;       float4 View_NormalOverrideParameter;          ; Offset: 2128
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2144
;       float View_PrevFrameGameTime;                 ; Offset: 2152
;       float View_PrevFrameRealTime;                 ; Offset: 2156
;       float View_OutOfBoundsMask;                   ; Offset: 2160
;       float PrePadding_View_2164;                   ; Offset: 2164
;       float PrePadding_View_2168;                   ; Offset: 2168
;       float PrePadding_View_2172;                   ; Offset: 2172
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2176
;       float View_CullingSign;                       ; Offset: 2188
;       float View_NearPlane;                         ; Offset: 2192
;       float View_GameTime;                          ; Offset: 2196
;       float View_RealTime;                          ; Offset: 2200
;       float View_DeltaTime;                         ; Offset: 2204
;       float View_MaterialTextureMipBias;            ; Offset: 2208
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2212
;       uint View_Random;                             ; Offset: 2216
;       uint View_FrameNumber;                        ; Offset: 2220
;       uint View_StateFrameIndexMod8;                ; Offset: 2224
;       uint View_StateFrameIndex;                    ; Offset: 2228
;       uint View_DebugViewModeMask;                  ; Offset: 2232
;       float View_CameraCut;                         ; Offset: 2236
;       float View_UnlitViewmodeMask;                 ; Offset: 2240
;       float PrePadding_View_2244;                   ; Offset: 2244
;       float PrePadding_View_2248;                   ; Offset: 2248
;       float PrePadding_View_2252;                   ; Offset: 2252
;       float4 View_DirectionalLightColor;            ; Offset: 2256
;       float3 View_DirectionalLightDirection;        ; Offset: 2272
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2288
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2320
;       float4 View_TemporalAAParams;                 ; Offset: 2352
;       float4 View_CircleDOFParams;                  ; Offset: 2368
;       uint View_ForceDrawAllVelocities;             ; Offset: 2384
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2388
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2392
;       float View_DepthOfFieldScale;                 ; Offset: 2396
;       float View_DepthOfFieldFocalLength;           ; Offset: 2400
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2404
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2408
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2412
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2416
;       float View_GeneralPurposeTweak;               ; Offset: 2420
;       float View_GeneralPurposeTweak2;              ; Offset: 2424
;       float View_DemosaicVposOffset;                ; Offset: 2428
;       float View_DecalDepthBias;                    ; Offset: 2432
;       float PrePadding_View_2436;                   ; Offset: 2436
;       float PrePadding_View_2440;                   ; Offset: 2440
;       float PrePadding_View_2444;                   ; Offset: 2444
;       float3 View_IndirectLightingColorScale;       ; Offset: 2448
;       float PrePadding_View_2460;                   ; Offset: 2460
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2496
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2528
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2560
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2592
;       float4 View_AtmosphereLightDiscCosHalfApexAngle[2];; Offset: 2624
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2656
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2672
;       float PrePadding_View_2684;                   ; Offset: 2684
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2688
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2704
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2768
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2784
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2788
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2792
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2796
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2800
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2816
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2820
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2824
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2828
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2832
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2836
;       float PrePadding_View_2840;                   ; Offset: 2840
;       float PrePadding_View_2844;                   ; Offset: 2844
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2848
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2860
;       float View_RealTimeReflectionCapture;         ; Offset: 2864
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2868
;       float PrePadding_View_2872;                   ; Offset: 2872
;       float PrePadding_View_2876;                   ; Offset: 2876
;       float4 View_AmbientCubemapTint;               ; Offset: 2880
;       float View_AmbientCubemapIntensity;           ; Offset: 2896
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2900
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2904
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2908
;       float4 View_SkyLightColor;                    ; Offset: 2912
;       float4 View_MobileSkyIrradianceEnvironmentMap[7];; Offset: 2928
;       float View_MobilePreviewMode;                 ; Offset: 3040
;       float View_HMDEyePaddingOffset;               ; Offset: 3044
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3048
;       float View_ShowDecalsMask;                    ; Offset: 3052
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3056
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3060
;       float PrePadding_View_3064;                   ; Offset: 3064
;       float PrePadding_View_3068;                   ; Offset: 3068
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3072
;       int View_StereoPassIndex;                     ; Offset: 3084
;       float4 View_GlobalVolumeCenterAndExtent[6];   ; Offset: 3088
;       float4 View_GlobalVolumeWorldToUVAddAndMul[6];; Offset: 3184
;       float4 View_GlobalDistanceFieldMipWorldToUVScale[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipWorldToUVBias[6];; Offset: 3376
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3472
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3476
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3480
;       int PrePadding_View_3484;                     ; Offset: 3484
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3488
;       float PrePadding_View_3500;                   ; Offset: 3500
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3504
;       float View_GlobalVolumeDimension;             ; Offset: 3516
;       float View_GlobalVolumeTexelSize;             ; Offset: 3520
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3524
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3528
;       float View_FullyCoveredExpandSurfaceScale;    ; Offset: 3532
;       float View_UncoveredExpandSurfaceScale;       ; Offset: 3536
;       float View_UncoveredMinStepScale;             ; Offset: 3540
;       int2 View_CursorPosition;                     ; Offset: 3544
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3552
;       float PrePadding_View_3556;                   ; Offset: 3556
;       float PrePadding_View_3560;                   ; Offset: 3560
;       float PrePadding_View_3564;                   ; Offset: 3564
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3568
;       float PrePadding_View_3580;                   ; Offset: 3580
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3600
;       float View_VolumetricFogMaxDistance;          ; Offset: 3608
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3632
;       float PrePadding_View_3644;                   ; Offset: 3644
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3648
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3660
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3664
;       float View_StereoIPD;                         ; Offset: 3676
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3680
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3696
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3728
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3732
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3736
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3740
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3744
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3748
;       uint PrePadding_View_3752;                    ; Offset: 3752
;       uint PrePadding_View_3756;                    ; Offset: 3756
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3760
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3776
;       float PrePadding_View_3784;                   ; Offset: 3784
;       float PrePadding_View_3788;                   ; Offset: 3788
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3792
;       float View_OverrideLandscapeLOD;              ; Offset: 3808
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3812
;       float View_MinRoughness;                      ; Offset: 3816
;       float PrePadding_View_3820;                   ; Offset: 3820
;       float4 View_HairRenderInfo;                   ; Offset: 3824
;       uint View_EnableSkyLight;                     ; Offset: 3840
;       uint View_HairRenderInfoBits;                 ; Offset: 3844
;       uint View_HairComponents;                     ; Offset: 3848
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3852
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3856
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3872
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3888
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3900
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 3904
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 3908
;       int View_PhysicsFieldClipmapCount;            ; Offset: 3912
;       int View_PhysicsFieldTargetCount;             ; Offset: 3916
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 3920
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4432
;       uint View_GPUSceneViewId;                     ; Offset: 4436
;       uint PrePadding_View_4440;                    ; Offset: 4440
;       uint PrePadding_View_4444;                    ; Offset: 4444
;       uint PrePadding_View_4448;                    ; Offset: 4448
;       uint PrePadding_View_4452;                    ; Offset: 4452
;       uint PrePadding_View_4456;                    ; Offset: 4456
;       uint PrePadding_View_4460;                    ; Offset: 4460
;       uint PrePadding_View_4464;                    ; Offset: 4464
;       uint PrePadding_View_4468;                    ; Offset: 4468
;       uint PrePadding_View_4472;                    ; Offset: 4472
;       uint PrePadding_View_4476;                    ; Offset: 4476
;       uint PrePadding_View_4480;                    ; Offset: 4480
;       uint PrePadding_View_4484;                    ; Offset: 4484
;       uint PrePadding_View_4488;                    ; Offset: 4488
;       uint PrePadding_View_4492;                    ; Offset: 4492
;       uint PrePadding_View_4496;                    ; Offset: 4496
;       uint PrePadding_View_4500;                    ; Offset: 4500
;       uint PrePadding_View_4504;                    ; Offset: 4504
;       uint PrePadding_View_4508;                    ; Offset: 4508
;       uint PrePadding_View_4512;                    ; Offset: 4512
;       uint PrePadding_View_4516;                    ; Offset: 4516
;       uint PrePadding_View_4520;                    ; Offset: 4520
;       uint PrePadding_View_4524;                    ; Offset: 4524
;       uint PrePadding_View_4528;                    ; Offset: 4528
;       uint PrePadding_View_4532;                    ; Offset: 4532
;       uint PrePadding_View_4536;                    ; Offset: 4536
;       uint PrePadding_View_4540;                    ; Offset: 4540
;       uint PrePadding_View_4544;                    ; Offset: 4544
;       uint PrePadding_View_4548;                    ; Offset: 4548
;       uint PrePadding_View_4552;                    ; Offset: 4552
;       uint PrePadding_View_4556;                    ; Offset: 4556
;       uint PrePadding_View_4560;                    ; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint PrePadding_View_4568;                    ; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint PrePadding_View_4576;                    ; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint PrePadding_View_4584;                    ; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint PrePadding_View_4592;                    ; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint PrePadding_View_4600;                    ; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint PrePadding_View_4608;                    ; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint PrePadding_View_4616;                    ; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint PrePadding_View_4624;                    ; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint PrePadding_View_4632;                    ; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint PrePadding_View_4640;                    ; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint PrePadding_View_4648;                    ; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint PrePadding_View_4656;                    ; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint PrePadding_View_4664;                    ; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint PrePadding_View_4672;                    ; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint PrePadding_View_4680;                    ; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint PrePadding_View_4688;                    ; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint PrePadding_View_4696;                    ; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint PrePadding_View_4704;                    ; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint PrePadding_View_4712;                    ; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint PrePadding_View_4720;                    ; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint PrePadding_View_4728;                    ; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint PrePadding_View_4736;                    ; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint PrePadding_View_4744;                    ; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint PrePadding_View_4752;                    ; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint PrePadding_View_4760;                    ; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint PrePadding_View_4768;                    ; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint PrePadding_View_4776;                    ; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint PrePadding_View_4784;                    ; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint PrePadding_View_4792;                    ; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint PrePadding_View_4800;                    ; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint PrePadding_View_4808;                    ; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint PrePadding_View_4816;                    ; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint PrePadding_View_4824;                    ; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint PrePadding_View_4832;                    ; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint PrePadding_View_4840;                    ; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint PrePadding_View_4848;                    ; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint PrePadding_View_4856;                    ; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint PrePadding_View_4864;                    ; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint PrePadding_View_4872;                    ; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint PrePadding_View_4880;                    ; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint PrePadding_View_4888;                    ; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint PrePadding_View_4896;                    ; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint PrePadding_View_4904;                    ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint PrePadding_View_4912;                    ; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint PrePadding_View_4920;                    ; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint PrePadding_View_4928;                    ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint PrePadding_View_4936;                    ; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint PrePadding_View_4944;                    ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint View_bShadingEnergyConservation;         ; Offset: 4952
;       uint View_bShadingEnergyPreservation;         ; Offset: 4956
;   
;   } View;                                           ; Offset:    0 Size:  4960
;
; }
;
; cbuffer LandscapeMVF
; {
;
;   struct LandscapeMVF
;   {
;
;       int2 LandscapeMVF_SubXY;                      ; Offset:    0
;   
;   } LandscapeMVF;                                   ; Offset:    0 Size:     8
;
; }
;
; cbuffer LandscapeContinuousLODParameters
; {
;
;   struct LandscapeContinuousLODParameters
;   {
;
;       int LandscapeContinuousLODParameters_LandscapeIndex;; Offset:    0
;       int PrePadding_LandscapeContinuousLODParameters_4;; Offset:    4
;       int2 LandscapeContinuousLODParameters_Min;    ; Offset:    8
;       int2 LandscapeContinuousLODParameters_Size;   ; Offset:   16
;   
;   } LandscapeContinuousLODParameters;               ; Offset:    0 Size:    24
;
; }
;
; cbuffer LandscapeParameters
; {
;
;   struct LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       int PrePadding_LandscapeParameters_20;        ; Offset:   20
;       int PrePadding_LandscapeParameters_24;        ; Offset:   24
;       int PrePadding_LandscapeParameters_28;        ; Offset:   28
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   32
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   64
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   80
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:   96
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_BlendableLayerMask;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;   
;   } LandscapeParameters;                            ; Offset:    0 Size:   208
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[11];          ; Offset:    0
;   
;   } Material;                                       ; Offset:    0 Size:   176
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint UserData;                            ; Offset:    8
;           uint BaseInstanceIndex;                   ; Offset:   12
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; LandscapeMVF                      cbuffer      NA          NA     CB1            cb1     1
; LandscapeContinuousLODParameters   cbuffer      NA          NA     CB2            cb2     1
; LandscapeParameters               cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB5     cb0,space2     1
; View_MaterialTextureBilinearWrapedSampler   sampler      NA          NA      S0             s0     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s1     1
; LandscapeParameters_HeightmapTextureSampler   sampler      NA          NA      S2             s2     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S3             s3     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_7Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S12            s12     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S13            s13     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S16            s16     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S17            s17     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients1   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T4             t4     1
; View_VolumetricLightmapBrickSHCoefficients3   texture     f32          3d      T5             t5     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T6             t6     1
; View_VolumetricLightmapBrickSHCoefficients5   texture     f32          3d      T7             t7     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T8             t8     1
; View_PrimitiveSceneData           texture  struct         r/o      T9             t9     1
; View_InstanceSceneData            texture  struct         r/o     T10            t10     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o     T11            t11     1
; View_LandscapeIndirection         texture     u32         buf     T12            t12     1
; View_LandscapePerComponentData    texture     f32         buf     T13            t13     1
; LandscapeContinuousLODParameters_SectionLODBias   texture     f32         buf     T14            t14     1
; LandscapeParameters_HeightmapTexture   texture     f32          2d     T15            t15     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d     T16            t16     1
; Material_Texture2D_0              texture     f32          2d     T17            t17     1
; Material_Texture2D_1              texture     f32          2d     T18            t18     1
; Material_Texture2D_2              texture     f32          2d     T19            t19     1
; Material_Texture2D_3              texture     f32          2d     T20            t20     1
; Material_Texture2D_4              texture     f32          2d     T21            t21     1
; Material_Texture2D_5              texture     f32          2d     T22            t22     1
; Material_Texture2D_6              texture     f32          2d     T23            t23     1
; Material_Texture2D_7              texture     f32          2d     T24            t24     1
; Material_Texture2D_8              texture     f32          2d     T25            t25     1
; Material_Texture2D_9              texture     f32          2d     T26            t26     1
; Material_Texture2D_10             texture     f32          2d     T27            t27     1
; Material_Texture2D_11             texture     f32          2d     T28            t28     1
; Material_Texture2D_12             texture     f32          2d     T29            t29     1
; Material_Texture2D_13             texture     f32          2d     T30            t30     1
; Material_Texture2D_14             texture     f32          2d     T31            t31     1
; Material_Texture2D_15             texture     f32          2d     T32            t32     1
; Material_Texture2D_16             texture     f32          2d     T33            t33     1
; HitGroupSystemIndexBuffer         texture    byte         r/o     T34      t0,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.SamplerState = type { i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Buffer<float>" = type { float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [7 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%LandscapeMVF = type { <2 x i32> }
%LandscapeContinuousLODParameters = type { i32, i32, <2 x i32>, <2 x i32> }
%LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, %class.matrix.float.4.4 }
%Material = type { [11 x <4 x float>] }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32 }
%struct.FPackedMaterialClosestHitPayload = type { %struct.FMinimalPayload, i32, float, [3 x i32], [2 x i32], i32, i32, [2 x i32], i32, [2 x i32], i32 }
%struct.FMinimalPayload = type { float }
%struct.FDefaultAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A" = external constant %"class.Texture3D<vector<unsigned int, 4> >", align 4
@"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A" = external constant %"class.Buffer<unsigned int>", align 4
@"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_0Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_1Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_2Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_3Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_4Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_5Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_8Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_9Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_10Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_13Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_14Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_15Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@View = external constant %View
@LandscapeMVF = external constant %LandscapeMVF
@LandscapeContinuousLODParameters = external constant %LandscapeContinuousLODParameters
@LandscapeParameters = external constant %LandscapeParameters
@Material = external constant %Material
@HitGroupSystemRootConstants = external constant %HitGroupSystemRootConstants
@NeighborOffset.i.i.i.i.i.0.hca = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 1, i32 0]
@NeighborOffset.i.i.i.i.i.1.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 0, i32 1]

; Function Attrs: nounwind
define void @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FDefaultAttributes* nocapture readonly %Attributes) #0 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", align 4, !noalias !75
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", align 4, !noalias !75
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", align 4, !noalias !75
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", align 4, !noalias !75
  %5 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", align 4, !noalias !80
  %6 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", align 4, !noalias !80
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", align 4, !noalias !80
  %8 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", align 4, !noalias !80
  %9 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", align 4, !noalias !80
  %10 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", align 4, !noalias !80
  %11 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", align 4, !noalias !80
  %12 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", align 4, !noalias !80
  %13 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", align 4, !noalias !80
  %14 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", align 4, !noalias !80
  %15 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", align 4
  %16 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", align 4, !noalias !82
  %17 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A", align 4, !noalias !90
  %18 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", align 4, !noalias !98
  %19 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !101
  %20 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %21 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %22 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %23 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %24 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %25 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !75
  %26 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %27 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %28 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %29 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %30 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %31 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %32 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %33 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %34 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %35 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %36 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !80
  %37 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %38 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %39 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", align 4, !noalias !82
  %40 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", align 4, !noalias !82
  %41 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", align 4, !noalias !82
  %42 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !90
  %43 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !106
  %44 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %45 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !90
  %46 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !111
  %47 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !114
  %48 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !111
  %49 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !114
  %50 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !111
  %51 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !114
  %52 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !114
  %53 = load %"class.Texture3D<vector<unsigned int, 4> >", %"class.Texture3D<vector<unsigned int, 4> >"* @"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A", align 4
  %54 = load %HitGroupSystemRootConstants, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, align 4
  %55 = load %Material, %Material* @Material, align 4
  %56 = load %LandscapeParameters, %LandscapeParameters* @LandscapeParameters, align 4
  %57 = load %LandscapeContinuousLODParameters, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, align 4
  %58 = load %LandscapeMVF, %LandscapeMVF* @LandscapeMVF, align 4
  %59 = load %View, %View* @View, align 4
  %60 = alloca [3 x float], align 4
  %61 = alloca [3 x float], align 4
  %62 = alloca [3 x float], align 4
  %63 = alloca [3 x i32], align 4
  %64 = alloca [3 x i32], align 4
  %65 = alloca [4 x float], align 4
  %66 = alloca [3 x float], align 4
  %67 = alloca [4 x float], align 4
  %68 = call %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32 160, %HitGroupSystemRootConstants %54)  ; CreateHandleForLib(Resource)
  %69 = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %55)  ; CreateHandleForLib(Resource)
  %70 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32 160, %LandscapeParameters %56)  ; CreateHandleForLib(Resource)
  %71 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32 160, %LandscapeContinuousLODParameters %57)  ; CreateHandleForLib(Resource)
  %72 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32 160, %LandscapeMVF %58)  ; CreateHandleForLib(Resource)
  %73 = call %dx.types.Handle @dx.op.createHandleForLib.View(i32 160, %View %59)  ; CreateHandleForLib(Resource)
  %74 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %75 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %74, float* %75, align 4, !tbaa !120
  %76 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6
  %77 = load i32, i32* %76, align 4, !tbaa !124
  %78 = and i32 %77, 33554432
  %79 = icmp ne i32 %78, 0
  br i1 %79, label %80, label %644

; <label>:80                                      ; preds = %0
  %81 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 0
  br label %82

; <label>:82                                      ; preds = %411, %80
  %83 = phi i32 [ %562, %411 ], [ 0, %80 ]
  %84 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %85 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %86 = extractvalue %dx.types.CBufRet.i32 %85, 1
  %87 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.i32 %87, 3
  %89 = sub nsw i32 %86, %88
  %90 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %91 = extractvalue %dx.types.CBufRet.i32 %90, 0
  %92 = mul nsw i32 %89, %91
  %93 = extractvalue %dx.types.CBufRet.i32 %85, 0
  %94 = extractvalue %dx.types.CBufRet.i32 %87, 2
  %95 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %96 = extractvalue %dx.types.CBufRet.i32 %95, 0
  %97 = sitofp i32 %96 to float
  %98 = extractvalue %dx.types.CBufRet.i32 %87, 0
  %99 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %41)  ; CreateHandleForLib(Resource)
  %100 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %99, i32 %98, i32 undef)  ; BufferLoad(srv,index,wot)
  %101 = extractvalue %dx.types.ResRet.i32 %100, 0
  %102 = add i32 %92, %93
  %103 = sub i32 %102, %94
  %104 = add i32 %103, %101
  %105 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %106 = extractvalue %dx.types.CBufRet.f32 %105, 0
  %107 = fcmp fast oge float %106, 0.000000e+00
  %108 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %40)  ; CreateHandleForLib(Resource)
  %109 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %108, i32 %104, i32 undef)  ; BufferLoad(srv,index,wot)
  %110 = extractvalue %dx.types.ResRet.f32 %109, 0
  %111 = select i1 %107, float %106, float %110
  %112 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %113 = extractvalue %dx.types.CBufRet.i32 %112, 1
  %114 = sitofp i32 %113 to float
  %115 = fadd fast float %114, %111
  %116 = call float @dx.op.binary.f32(i32 36, float %115, float %97)  ; FMin(a,b)
  %117 = call float @dx.op.unary.f32(i32 27, float %116)  ; Round_ni(value)
  %118 = fptoui float %117 to i32
  %119 = extractvalue %dx.types.CBufRet.i32 %85, 2
  %120 = and i32 %118, 31
  %121 = ashr i32 %119, %120
  %122 = add nsw i32 %121, -1
  %123 = sitofp i32 %122 to float
  %124 = fadd fast float %123, 1.000000e+00
  %125 = fptoui float %124 to i32
  %126 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %68, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %127 = extractvalue %dx.types.CBufRet.i32 %126, 1
  %128 = extractvalue %dx.types.CBufRet.i32 %126, 0
  %129 = and i32 %128, 255
  %130 = mul i32 %84, 3
  %131 = icmp eq i32 %129, 0
  br i1 %131, label %132, label %135

; <label>:132                                     ; preds = %82
  %133 = add i32 %130, 1
  %134 = add i32 %130, 2
  br label %159

; <label>:135                                     ; preds = %82
  %136 = icmp eq i32 %129, 2
  %137 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %19)  ; CreateHandleForLib(Resource)
  br i1 %136, label %138, label %152

; <label>:138                                     ; preds = %135
  %139 = mul i32 %84, 6
  %140 = add i32 %139, %127
  %141 = and i32 %140, -4
  %142 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %137, i32 %141, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %143 = extractvalue %dx.types.ResRet.i32 %142, 0
  %144 = extractvalue %dx.types.ResRet.i32 %142, 1
  %145 = icmp eq i32 %141, %140
  %146 = lshr i32 %143, 16
  %147 = and i32 %144, 65535
  br i1 %145, label %148, label %150

; <label>:148                                     ; preds = %138
  %149 = and i32 %143, 65535
  br label %159

; <label>:150                                     ; preds = %138
  %151 = lshr i32 %144, 16
  br label %159

; <label>:152                                     ; preds = %135
  %153 = mul i32 %129, %130
  %154 = add i32 %153, %127
  %155 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %137, i32 %154, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %156 = extractvalue %dx.types.ResRet.i32 %155, 0
  %157 = extractvalue %dx.types.ResRet.i32 %155, 1
  %158 = extractvalue %dx.types.ResRet.i32 %155, 2
  br label %159

; <label>:159                                     ; preds = %152, %150, %148, %132
  %160 = phi i32 [ %130, %132 ], [ %156, %152 ], [ %149, %148 ], [ %146, %150 ]
  %161 = phi i32 [ %133, %132 ], [ %157, %152 ], [ %146, %148 ], [ %147, %150 ]
  %162 = phi i32 [ %134, %132 ], [ %158, %152 ], [ %147, %148 ], [ %151, %150 ]
  %163 = getelementptr inbounds [3 x i32], [3 x i32]* %63, i32 0, i32 0
  store i32 %160, i32* %163, align 4
  %164 = getelementptr inbounds [3 x i32], [3 x i32]* %63, i32 0, i32 1
  store i32 %161, i32* %164, align 4
  %165 = getelementptr inbounds [3 x i32], [3 x i32]* %63, i32 0, i32 2
  store i32 %162, i32* %165, align 4
  %166 = getelementptr [3 x i32], [3 x i32]* %63, i32 0, i32 %83
  %167 = load i32, i32* %166, align 4, !tbaa !124, !noalias !126
  %168 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %169 = urem i32 %167, %125
  %170 = uitofp i32 %169 to float
  %171 = udiv i32 %167, %125
  %172 = uitofp i32 %171 to float
  %173 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %174 = extractvalue %dx.types.CBufRet.i32 %173, 0
  %175 = sitofp i32 %174 to float
  %176 = extractvalue %dx.types.CBufRet.i32 %173, 1
  %177 = sitofp i32 %176 to float
  %178 = and i32 %168, 2147483647
  %179 = mul i32 %178, 40
  %180 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %181 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %180, i32 %179, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %182 = extractvalue %dx.types.ResRet.f32 %181, 1
  %183 = bitcast float %182 to i32
  %184 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 277)  ; CBufferLoadLegacy(handle,regIndex)
  %185 = extractvalue %dx.types.CBufRet.i32 %184, 0
  %186 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %187 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %186, i32 %183, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %188 = extractvalue %dx.types.ResRet.f32 %187, 0
  %189 = bitcast float %188 to i32
  %190 = and i32 %189, 1048575
  %191 = icmp eq i32 %190, 1048575
  br i1 %191, label %300, label %192, !dx.controlflow.hints !129

; <label>:192                                     ; preds = %159
  %193 = mul nuw nsw i32 %190, 40
  %194 = or i32 %193, 1
  %195 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %180, i32 %194, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %196 = extractvalue %dx.types.ResRet.f32 %195, 0
  %197 = extractvalue %dx.types.ResRet.f32 %195, 1
  %198 = extractvalue %dx.types.ResRet.f32 %195, 2
  %199 = add i32 %185, %183
  %200 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %186, i32 %199, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %201 = extractvalue %dx.types.ResRet.f32 %200, 0
  %202 = extractvalue %dx.types.ResRet.f32 %200, 1
  %203 = extractvalue %dx.types.ResRet.f32 %200, 2
  %204 = extractvalue %dx.types.ResRet.f32 %200, 3
  %205 = bitcast float %201 to i32
  %206 = bitcast float %202 to i32
  %207 = bitcast float %203 to i32
  %208 = bitcast float %204 to i32
  %209 = shl i32 %185, 1
  %210 = add i32 %209, %183
  %211 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %186, i32 %210, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %212 = extractvalue %dx.types.ResRet.f32 %211, 0
  %213 = extractvalue %dx.types.ResRet.f32 %211, 1
  %214 = extractvalue %dx.types.ResRet.f32 %211, 2
  %215 = and i32 %205, 65535
  %216 = uitofp i32 %215 to float
  %217 = lshr i32 %205, 16
  %218 = uitofp i32 %217 to float
  %219 = and i32 %206, 32767
  %220 = uitofp i32 %219 to float
  %221 = fadd fast float %216, -3.276800e+04
  %222 = fadd fast float %218, -3.276800e+04
  %223 = fadd fast float %220, -1.638400e+04
  %224 = fmul fast float %223, 0x3F06A0F8E0000000
  %225 = and i32 %206, 32768
  %226 = icmp ne i32 %225, 0
  %227 = fadd fast float %221, %222
  %228 = fmul fast float %227, 0x3F00002000000000
  %229 = fsub fast float %221, %222
  %230 = fmul fast float %229, 0x3F00002000000000
  %231 = call float @dx.op.unary.f32(i32 6, float %228)  ; FAbs(value)
  %232 = call float @dx.op.unary.f32(i32 6, float %230)  ; FAbs(value)
  %233 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %231, float %232)  ; Dot2(ax,ay,bx,by)
  %234 = fsub fast float 2.000000e+00, %233
  %235 = call float @dx.op.dot3.f32(i32 55, float %228, float %230, float %234, float %228, float %230, float %234)  ; Dot3(ax,ay,az,bx,by,bz)
  %236 = call float @dx.op.unary.f32(i32 25, float %235)  ; Rsqrt(value)
  %237 = fmul fast float %236, %228
  %238 = fmul fast float %236, %230
  %239 = fmul fast float %236, %234
  %240 = fadd fast float %239, 1.000000e+00
  %241 = fdiv fast float 1.000000e+00, %240
  %242 = fmul fast float %238, %237
  %243 = fmul fast float %242, %241
  %244 = fsub fast float -0.000000e+00, %243
  %245 = fmul fast float %237, %237
  %246 = fmul fast float %245, %241
  %247 = fsub fast float 1.000000e+00, %246
  %248 = fmul fast float %238, %238
  %249 = fmul fast float %248, %241
  %250 = fsub fast float 1.000000e+00, %249
  %251 = fmul fast float %224, %224
  %252 = fsub fast float 1.000000e+00, %251
  %253 = call float @dx.op.unary.f32(i32 24, float %252)  ; Sqrt(value)
  %254 = select i1 %226, float %224, float %253
  %255 = select i1 %226, float %253, float %224
  %256 = fmul fast float %247, %254
  %257 = fmul fast float %254, %244
  %258 = fmul fast float %254, %237
  %259 = fmul fast float %255, %244
  %260 = fmul fast float %250, %255
  %261 = fmul fast float %238, %255
  %262 = fsub fast float -0.000000e+00, %261
  %263 = fadd fast float %256, %259
  %264 = fadd fast float %257, %260
  %265 = fsub fast float %262, %258
  %266 = fmul fast float %265, %238
  %267 = fmul fast float %264, %239
  %268 = fsub fast float %266, %267
  %269 = fmul fast float %263, %239
  %270 = fmul fast float %265, %237
  %271 = fsub fast float %269, %270
  %272 = fmul fast float %264, %237
  %273 = fmul fast float %263, %238
  %274 = fsub fast float %272, %273
  %275 = lshr i32 %208, 16
  %276 = shl i32 %275, 23
  %277 = add i32 %276, -125829120
  %278 = bitcast i32 %277 to float
  %279 = lshr i32 %207, 16
  %280 = and i32 %207, 65535
  %281 = and i32 %208, 65535
  %282 = uitofp i32 %280 to float
  %283 = uitofp i32 %279 to float
  %284 = uitofp i32 %281 to float
  %285 = fadd fast float %282, -3.276800e+04
  %286 = fadd fast float %283, -3.276800e+04
  %287 = fadd fast float %284, -3.276800e+04
  %288 = fmul fast float %278, %285
  %289 = fmul fast float %278, %286
  %290 = fmul fast float %278, %287
  %291 = fmul fast float %263, %288
  %292 = fmul fast float %264, %288
  %293 = fmul fast float %265, %288
  %294 = fmul fast float %268, %289
  %295 = fmul fast float %271, %289
  %296 = fmul fast float %274, %289
  %297 = fmul fast float %237, %290
  %298 = fmul fast float %238, %290
  %299 = fmul fast float %239, %290
  br label %300

; <label>:300                                     ; preds = %192, %159
  %301 = phi float [ 0.000000e+00, %159 ], [ %196, %192 ]
  %302 = phi float [ 0.000000e+00, %159 ], [ %197, %192 ]
  %303 = phi float [ 0.000000e+00, %159 ], [ %198, %192 ]
  %304 = phi float [ 0.000000e+00, %159 ], [ %291, %192 ]
  %305 = phi float [ 0.000000e+00, %159 ], [ %292, %192 ]
  %306 = phi float [ 0.000000e+00, %159 ], [ %293, %192 ]
  %307 = phi float [ 0.000000e+00, %159 ], [ %294, %192 ]
  %308 = phi float [ 0.000000e+00, %159 ], [ %295, %192 ]
  %309 = phi float [ 0.000000e+00, %159 ], [ %296, %192 ]
  %310 = phi float [ 0.000000e+00, %159 ], [ %297, %192 ]
  %311 = phi float [ 0.000000e+00, %159 ], [ %298, %192 ]
  %312 = phi float [ 0.000000e+00, %159 ], [ %299, %192 ]
  %313 = phi float [ 0.000000e+00, %159 ], [ %212, %192 ]
  %314 = phi float [ 0.000000e+00, %159 ], [ %213, %192 ]
  %315 = phi float [ 0.000000e+00, %159 ], [ %214, %192 ]
  %316 = sub nsw i32 %93, %94
  %317 = add nsw i32 %316, %92
  %318 = add i32 %101, %317
  %319 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %108, i32 %318, i32 undef)  ; BufferLoad(srv,index,wot)
  %320 = extractvalue %dx.types.ResRet.f32 %319, 0
  %321 = select i1 %107, float %106, float %320
  %322 = fadd fast float %114, %321
  %323 = call float @dx.op.binary.f32(i32 36, float %322, float %97)  ; FMin(a,b)
  %324 = call float @dx.op.unary.f32(i32 27, float %323)  ; Round_ni(value)
  %325 = fptoui float %324 to i32
  %326 = and i32 %325, 31
  %327 = ashr i32 %119, %326
  %328 = add nsw i32 %327, -1
  %329 = sitofp i32 %328 to float
  %330 = fdiv fast float 1.000000e+00, %329
  %331 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %39)  ; CreateHandleForLib(Resource)
  %332 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %331, i32 %317, i32 undef)  ; BufferLoad(srv,index,wot)
  %333 = fmul fast float %330, %170
  %334 = fmul fast float %330, %172
  %335 = fadd fast float %333, %175
  %336 = fadd fast float %334, %177
  %337 = extractvalue %dx.types.CBufRet.i32 %85, 3
  %338 = sitofp i32 %337 to float
  %339 = fdiv fast float %335, %338
  %340 = fdiv fast float %336, %338
  %341 = fsub fast float 1.000000e+00, %339
  %342 = fmul fast float %340, 2.000000e+00
  %343 = fmul fast float %341, 2.000000e+00
  %344 = fmul fast float %323, %342
  %345 = fmul fast float %323, %343
  %346 = fsub fast float 1.000000e+00, %342
  %347 = fsub fast float 1.000000e+00, %343
  br label %348

; <label>:348                                     ; preds = %406, %300
  %349 = phi i32 [ -1, %300 ], [ %410, %406 ]
  %350 = phi i32 [ 0, %300 ], [ %408, %406 ]
  %351 = phi i32 [ 0, %300 ], [ %404, %406 ]
  %352 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %353 = extractvalue %dx.types.CBufRet.i32 %352, 0
  %354 = extractvalue %dx.types.CBufRet.i32 %352, 1
  %355 = add i32 %353, %350
  %356 = add i32 %354, %349
  %357 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %358 = extractvalue %dx.types.CBufRet.i32 %357, 2
  %359 = extractvalue %dx.types.CBufRet.i32 %357, 3
  %360 = call i32 @dx.op.binary.i32(i32 37, i32 %358, i32 %355)  ; IMax(a,b)
  %361 = call i32 @dx.op.binary.i32(i32 37, i32 %359, i32 %356)  ; IMax(a,b)
  %362 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %363 = extractvalue %dx.types.CBufRet.i32 %362, 0
  %364 = extractvalue %dx.types.CBufRet.i32 %362, 1
  %365 = add i32 %358, -1
  %366 = add i32 %365, %363
  %367 = add i32 %359, -1
  %368 = add i32 %367, %364
  %369 = call i32 @dx.op.binary.i32(i32 38, i32 %366, i32 %360)  ; IMin(a,b)
  %370 = call i32 @dx.op.binary.i32(i32 38, i32 %368, i32 %361)  ; IMin(a,b)
  %371 = sub nsw i32 %370, %359
  %372 = mul nsw i32 %371, %363
  %373 = sub i32 %369, %358
  %374 = add nsw i32 %373, %372
  %375 = extractvalue %dx.types.CBufRet.i32 %357, 0
  %376 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %41)  ; CreateHandleForLib(Resource)
  %377 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %376, i32 %375, i32 undef)  ; BufferLoad(srv,index,wot)
  %378 = extractvalue %dx.types.ResRet.i32 %377, 0
  %379 = add i32 %374, %378
  %380 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %381 = extractvalue %dx.types.CBufRet.f32 %380, 0
  %382 = fcmp fast oge float %381, 0.000000e+00
  %383 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %40)  ; CreateHandleForLib(Resource)
  %384 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %383, i32 %379, i32 undef)  ; BufferLoad(srv,index,wot)
  %385 = extractvalue %dx.types.ResRet.f32 %384, 0
  %386 = select i1 %382, float %381, float %385
  %387 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %388 = extractvalue %dx.types.CBufRet.i32 %387, 0
  %389 = sitofp i32 %388 to float
  %390 = add i32 %378, %317
  %391 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %383, i32 %390, i32 undef)  ; BufferLoad(srv,index,wot)
  %392 = extractvalue %dx.types.ResRet.f32 %391, 0
  %393 = select i1 %382, float %381, float %392
  %394 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %395 = extractvalue %dx.types.CBufRet.i32 %394, 1
  %396 = sitofp i32 %395 to float
  %397 = fadd fast float %396, %393
  %398 = call float @dx.op.binary.f32(i32 36, float %397, float %389)  ; FMin(a,b)
  %399 = call float @dx.op.binary.f32(i32 35, float %386, float %398)  ; FMax(a,b)
  %400 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 %351
  %401 = fadd fast float %396, %399
  %402 = select i1 %382, float %381, float %401
  %403 = call float @dx.op.binary.f32(i32 36, float %402, float %389)  ; FMin(a,b)
  store float %403, float* %400, align 4, !tbaa !120, !noalias !130
  %404 = add nuw nsw i32 %351, 1
  %405 = icmp eq i32 %404, 4
  br i1 %405, label %411, label %406

; <label>:406                                     ; preds = %348
  %407 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %404
  %408 = load i32, i32* %407, align 4
  %409 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %404
  %410 = load i32, i32* %409, align 4
  br label %348

; <label>:411                                     ; preds = %348
  %412 = uitofp i32 %325 to float
  %413 = extractvalue %dx.types.ResRet.f32 %332, 0
  %414 = fsub fast float 1.000000e+00, %340
  %415 = fmul fast float %339, 2.000000e+00
  %416 = fmul fast float %414, 2.000000e+00
  %417 = fmul fast float %323, %415
  %418 = fmul fast float %323, %416
  %419 = fsub fast float 1.000000e+00, %415
  %420 = fsub fast float 1.000000e+00, %416
  %421 = load float, float* %81, align 4, !tbaa !120, !noalias !130
  %422 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 1
  %423 = load float, float* %422, align 4, !tbaa !120, !noalias !130
  %424 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 2
  %425 = load float, float* %424, align 4, !tbaa !120, !noalias !130
  %426 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 3
  %427 = load float, float* %426, align 4, !tbaa !120, !noalias !130
  %428 = fmul fast float %421, %346
  %429 = fmul fast float %423, %419
  %430 = fmul fast float %425, %347
  %431 = fmul fast float %427, %420
  %432 = fadd fast float %428, %344
  %433 = fadd fast float %429, %417
  %434 = fadd fast float %430, %345
  %435 = fadd fast float %431, %418
  %436 = fadd fast float %335, %336
  %437 = fdiv fast float %436, %338
  %438 = fcmp fast ogt float %437, 1.000000e+00
  %439 = fcmp fast olt float %339, %340
  %440 = select i1 %439, float %435, float %434
  %441 = select i1 %439, float %433, float %432
  %442 = select i1 %438, float %440, float %441
  %443 = call float @dx.op.unary.f32(i32 27, float %442)  ; Round_ni(value)
  %444 = fsub fast float %442, %443
  %445 = fsub fast float %443, %412
  %446 = fsub fast float -0.000000e+00, %445
  %447 = call float @dx.op.unary.f32(i32 21, float %446)  ; Exp(value)
  %448 = fmul fast float %447, %170
  %449 = fmul fast float %447, %172
  %450 = call float @dx.op.unary.f32(i32 27, float %448)  ; Round_ni(value)
  %451 = call float @dx.op.unary.f32(i32 27, float %449)  ; Round_ni(value)
  %452 = fsub fast float -0.000000e+00, %443
  %453 = call float @dx.op.unary.f32(i32 21, float %452)  ; Exp(value)
  %454 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %455 = extractvalue %dx.types.CBufRet.f32 %454, 0
  %456 = fmul fast float %455, %453
  %457 = fadd fast float %456, -1.000000e+00
  %458 = fmul fast float %453, 5.000000e-01
  %459 = fmul fast float %458, %455
  %460 = call float @dx.op.binary.f32(i32 35, float %459, float 2.000000e+00)  ; FMax(a,b)
  %461 = fadd fast float %460, -1.000000e+00
  %462 = extractvalue %dx.types.CBufRet.f32 %454, 1
  %463 = fmul fast float %462, %457
  %464 = fmul fast float %462, %461
  %465 = fdiv fast float %450, %463
  %466 = fdiv fast float %451, %463
  %467 = fmul fast float %450, 5.000000e-01
  %468 = fmul fast float %451, 5.000000e-01
  %469 = call float @dx.op.unary.f32(i32 27, float %467)  ; Round_ni(value)
  %470 = call float @dx.op.unary.f32(i32 27, float %468)  ; Round_ni(value)
  %471 = fdiv fast float %469, %464
  %472 = fdiv fast float %470, %464
  %473 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %474 = extractvalue %dx.types.CBufRet.f32 %473, 0
  %475 = extractvalue %dx.types.CBufRet.f32 %473, 1
  %476 = fmul fast float %474, %465
  %477 = fmul fast float %475, %466
  %478 = extractvalue %dx.types.CBufRet.f32 %473, 2
  %479 = extractvalue %dx.types.CBufRet.f32 %473, 3
  %480 = fadd fast float %476, %478
  %481 = fadd fast float %477, %479
  %482 = fmul fast float %474, 5.000000e-01
  %483 = fmul fast float %475, 5.000000e-01
  %484 = fadd fast float %480, %482
  %485 = fadd fast float %481, %483
  %486 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %487 = extractvalue %dx.types.CBufRet.f32 %486, 0
  %488 = extractvalue %dx.types.CBufRet.f32 %486, 1
  %489 = fmul fast float %487, %175
  %490 = fmul fast float %488, %177
  %491 = fadd fast float %484, %489
  %492 = fadd fast float %485, %490
  %493 = fsub fast float %443, %413
  %494 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %38)  ; CreateHandleForLib(Resource)
  %495 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %16)  ; CreateHandleForLib(Resource)
  %496 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %494, %dx.types.Handle %495, float %491, float %492, float undef, float undef, i32 0, i32 0, i32 undef, float %493)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %497 = extractvalue %dx.types.ResRet.f32 %496, 0
  %498 = extractvalue %dx.types.ResRet.f32 %496, 1
  %499 = fmul fast float %497, 6.528000e+04
  %500 = fmul fast float %498, 2.550000e+02
  %501 = fadd fast float %500, -3.276800e+04
  %502 = fadd fast float %501, %499
  %503 = fmul fast float %474, %471
  %504 = fmul fast float %475, %472
  %505 = fadd fast float %503, %478
  %506 = fadd fast float %504, %479
  %507 = fadd fast float %505, %482
  %508 = fadd fast float %506, %483
  %509 = fadd fast float %507, %489
  %510 = fadd fast float %508, %490
  %511 = fsub fast float 1.000000e+00, %413
  %512 = fadd fast float %511, %443
  %513 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %494, %dx.types.Handle %495, float %509, float %510, float undef, float undef, i32 0, i32 0, i32 undef, float %512)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %514 = extractvalue %dx.types.ResRet.f32 %513, 0
  %515 = extractvalue %dx.types.ResRet.f32 %513, 1
  %516 = fmul fast float %514, 6.528000e+04
  %517 = fmul fast float %515, 2.550000e+02
  %518 = fsub fast float %471, %465
  %519 = fsub fast float %472, %466
  %520 = fsub fast float -3.276800e+04, %502
  %521 = fadd fast float %520, %517
  %522 = fadd fast float %521, %516
  %523 = fmul fast float %518, %444
  %524 = fmul fast float %519, %444
  %525 = fmul fast float %522, %444
  %526 = fadd fast float %523, %465
  %527 = fadd fast float %524, %466
  %528 = fadd fast float %525, %502
  %529 = fmul fast float %528, 7.812500e-03
  %530 = extractvalue %dx.types.CBufRet.f32 %486, 3
  %531 = fmul fast float %530, %175
  %532 = fmul fast float %530, %177
  %533 = fadd fast float %526, %531
  %534 = fadd fast float %527, %532
  %535 = fmul fast float %533, %304
  %536 = fmul fast float %533, %305
  %537 = fmul fast float %533, %306
  %538 = fmul fast float %534, %307
  %539 = fmul fast float %534, %308
  %540 = fmul fast float %534, %309
  %541 = fmul fast float %529, %310
  %542 = fmul fast float %529, %311
  %543 = fmul fast float %529, %312
  %544 = fmul fast float %301, 2.097152e+06
  %545 = fmul fast float %302, 2.097152e+06
  %546 = fmul fast float %303, 2.097152e+06
  %547 = fadd fast float %313, %544
  %548 = fadd fast float %547, %538
  %549 = fadd fast float %548, %535
  %550 = fadd fast float %549, %541
  %551 = fadd fast float %314, %545
  %552 = fadd fast float %551, %539
  %553 = fadd fast float %552, %536
  %554 = fadd fast float %553, %542
  %555 = fadd fast float %315, %546
  %556 = fadd fast float %555, %540
  %557 = fadd fast float %556, %537
  %558 = fadd fast float %557, %543
  %559 = getelementptr [3 x float], [3 x float]* %60, i32 0, i32 %83
  %560 = getelementptr [3 x float], [3 x float]* %61, i32 0, i32 %83
  %561 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 %83
  store float %550, float* %559, align 4
  store float %554, float* %560, align 4
  store float %558, float* %561, align 4
  %562 = add nuw nsw i32 %83, 1
  %563 = icmp eq i32 %562, 3
  br i1 %563, label %564, label %82

; <label>:564                                     ; preds = %411
  %565 = getelementptr [3 x float], [3 x float]* %60, i32 0, i32 1
  %566 = getelementptr [3 x float], [3 x float]* %61, i32 0, i32 1
  %567 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 1
  %568 = load float, float* %565, align 4
  %569 = load float, float* %566, align 4
  %570 = load float, float* %567, align 4
  %571 = getelementptr [3 x float], [3 x float]* %60, i32 0, i32 0
  %572 = getelementptr [3 x float], [3 x float]* %61, i32 0, i32 0
  %573 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 0
  %574 = load float, float* %571, align 4
  %575 = load float, float* %572, align 4
  %576 = load float, float* %573, align 4
  %577 = fsub fast float %568, %574
  %578 = fsub fast float %569, %575
  %579 = fsub fast float %570, %576
  %580 = getelementptr [3 x float], [3 x float]* %60, i32 0, i32 2
  %581 = getelementptr [3 x float], [3 x float]* %61, i32 0, i32 2
  %582 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 2
  %583 = load float, float* %580, align 4
  %584 = load float, float* %581, align 4
  %585 = load float, float* %582, align 4
  %586 = fsub fast float %583, %574
  %587 = fsub fast float %584, %575
  %588 = fsub fast float %585, %576
  %589 = fmul fast float %587, %579
  %590 = fmul fast float %588, %578
  %591 = fsub fast float %589, %590
  %592 = fmul fast float %588, %577
  %593 = fmul fast float %586, %579
  %594 = fsub fast float %592, %593
  %595 = fmul fast float %586, %578
  %596 = fmul fast float %587, %577
  %597 = fsub fast float %595, %596
  %598 = call float @dx.op.dot3.f32(i32 55, float %591, float %594, float %597, float %591, float %594, float %597)  ; Dot3(ax,ay,az,bx,by,bz)
  %599 = fcmp fast oeq float %598, 0.000000e+00
  %600 = uitofp i1 %599 to float
  %601 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %602 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %603 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %604 = fsub fast float -0.000000e+00, %601
  %605 = fsub fast float -0.000000e+00, %602
  %606 = fsub fast float -0.000000e+00, %603
  %607 = call float @dx.op.unary.f32(i32 25, float %598)  ; Rsqrt(value)
  %608 = fmul fast float %607, %591
  %609 = fmul fast float %607, %594
  %610 = fmul fast float %607, %597
  %611 = fsub fast float %604, %608
  %612 = fsub fast float %605, %609
  %613 = fsub fast float %606, %610
  %614 = fmul fast float %611, %600
  %615 = fmul fast float %612, %600
  %616 = fmul fast float %613, %600
  %617 = fadd fast float %614, %608
  %618 = fadd fast float %615, %609
  %619 = fadd fast float %616, %610
  %620 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %621 = extractvalue %dx.types.CBufRet.i32 %126, 3
  %622 = sub i32 %620, %621
  %623 = call i32 @dx.op.legacyF32ToF16(i32 130, float %617)  ; LegacyF32ToF16(value)
  %624 = shl i32 %623, 16
  %625 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  %626 = load i32, i32* %625, align 4, !tbaa !124
  %627 = or i32 %626, %624
  store i32 %627, i32* %625, align 4, !tbaa !124
  %628 = call i32 @dx.op.legacyF32ToF16(i32 130, float %618)  ; LegacyF32ToF16(value)
  %629 = call i32 @dx.op.legacyF32ToF16(i32 130, float %619)  ; LegacyF32ToF16(value)
  %630 = shl i32 %629, 16
  %631 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  %632 = or i32 %630, %628
  store i32 %632, i32* %631, align 4, !tbaa !124
  %633 = mul i32 %168, 40
  %634 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %635 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %634, i32 %633, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %636 = extractvalue %dx.types.ResRet.f32 %635, 2
  %637 = bitcast float %636 to i32
  %638 = icmp eq i32 %637, 1
  %639 = select i1 %638, i32 0, i32 %622
  %640 = extractvalue %dx.types.ResRet.f32 %635, 1
  %641 = bitcast float %640 to i32
  %642 = add i32 %641, %639
  %643 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 %642, i32* %643, align 4, !tbaa !124
  br label %644

; <label>:644                                     ; preds = %564, %0
  %645 = and i32 %77, 8388608
  %646 = icmp eq i32 %645, 0
  br i1 %646, label %647, label %1861

; <label>:647                                     ; preds = %644
  %648 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %649 = load float, float* %648, align 4, !tbaa !120
  %650 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %651 = extractvalue %dx.types.CBufRet.f32 %650, 0
  %652 = extractvalue %dx.types.CBufRet.f32 %650, 2
  %653 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %654 = extractvalue %dx.types.CBufRet.f32 %653, 0
  %655 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 182)  ; CBufferLoadLegacy(handle,regIndex)
  %656 = extractvalue %dx.types.CBufRet.f32 %655, 1
  %657 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %658 = load i32, i32* %657, align 4, !tbaa !124, !noalias !133
  %659 = and i32 %658, 65535
  %660 = lshr i32 %658, 16
  %661 = call float @dx.op.legacyF16ToF32(i32 131, i32 %660)  ; LegacyF16ToF32(value)
  %662 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %663 = fmul fast float %662, %661
  %664 = getelementptr inbounds %struct.FDefaultAttributes, %struct.FDefaultAttributes* %Attributes, i32 0, i32 0
  %665 = load <2 x float>, <2 x float>* %664, align 4, !noalias !136
  %666 = extractelement <2 x float> %665, i32 0
  %667 = fsub fast float 1.000000e+00, %666
  %668 = extractelement <2 x float> %665, i32 1
  %669 = fsub fast float %667, %668
  %670 = getelementptr inbounds [3 x float], [3 x float]* %66, i32 0, i32 0
  store float %669, float* %670, align 4
  %671 = getelementptr inbounds [3 x float], [3 x float]* %66, i32 0, i32 1
  store float %666, float* %671, align 4
  %672 = getelementptr inbounds [3 x float], [3 x float]* %66, i32 0, i32 2
  store float %668, float* %672, align 4
  br label %673

; <label>:673                                     ; preds = %879, %647
  %674 = phi float [ 0.000000e+00, %647 ], [ %1000, %879 ]
  %675 = phi float [ 0.000000e+00, %647 ], [ %1001, %879 ]
  %676 = phi float [ 0.000000e+00, %647 ], [ %1002, %879 ]
  %677 = phi float [ 0.000000e+00, %647 ], [ %1003, %879 ]
  %678 = phi float [ 0.000000e+00, %647 ], [ %994, %879 ]
  %679 = phi float [ 0.000000e+00, %647 ], [ %995, %879 ]
  %680 = phi i32 [ 0, %647 ], [ %1004, %879 ]
  %681 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %682 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %683 = extractvalue %dx.types.CBufRet.i32 %682, 1
  %684 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %685 = extractvalue %dx.types.CBufRet.i32 %684, 3
  %686 = sub nsw i32 %683, %685
  %687 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %688 = extractvalue %dx.types.CBufRet.i32 %687, 0
  %689 = mul nsw i32 %686, %688
  %690 = extractvalue %dx.types.CBufRet.i32 %682, 0
  %691 = extractvalue %dx.types.CBufRet.i32 %684, 2
  %692 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %693 = extractvalue %dx.types.CBufRet.i32 %692, 0
  %694 = sitofp i32 %693 to float
  %695 = extractvalue %dx.types.CBufRet.i32 %684, 0
  %696 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %41)  ; CreateHandleForLib(Resource)
  %697 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %696, i32 %695, i32 undef)  ; BufferLoad(srv,index,wot)
  %698 = extractvalue %dx.types.ResRet.i32 %697, 0
  %699 = add i32 %689, %690
  %700 = sub i32 %699, %691
  %701 = add i32 %700, %698
  %702 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %703 = extractvalue %dx.types.CBufRet.f32 %702, 0
  %704 = fcmp fast oge float %703, 0.000000e+00
  %705 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %40)  ; CreateHandleForLib(Resource)
  %706 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %705, i32 %701, i32 undef)  ; BufferLoad(srv,index,wot)
  %707 = extractvalue %dx.types.ResRet.f32 %706, 0
  %708 = select i1 %704, float %703, float %707
  %709 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %710 = extractvalue %dx.types.CBufRet.i32 %709, 1
  %711 = sitofp i32 %710 to float
  %712 = fadd fast float %711, %708
  %713 = call float @dx.op.binary.f32(i32 36, float %712, float %694)  ; FMin(a,b)
  %714 = call float @dx.op.unary.f32(i32 27, float %713)  ; Round_ni(value)
  %715 = fptoui float %714 to i32
  %716 = extractvalue %dx.types.CBufRet.i32 %682, 2
  %717 = and i32 %715, 31
  %718 = ashr i32 %716, %717
  %719 = add nsw i32 %718, -1
  %720 = sitofp i32 %719 to float
  %721 = fadd fast float %720, 1.000000e+00
  %722 = fptoui float %721 to i32
  %723 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %68, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %724 = extractvalue %dx.types.CBufRet.i32 %723, 1
  %725 = extractvalue %dx.types.CBufRet.i32 %723, 0
  %726 = and i32 %725, 255
  %727 = mul i32 %681, 3
  %728 = icmp eq i32 %726, 0
  br i1 %728, label %729, label %732

; <label>:729                                     ; preds = %673
  %730 = add i32 %727, 1
  %731 = add i32 %727, 2
  br label %756

; <label>:732                                     ; preds = %673
  %733 = icmp eq i32 %726, 2
  %734 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %19)  ; CreateHandleForLib(Resource)
  br i1 %733, label %735, label %749

; <label>:735                                     ; preds = %732
  %736 = mul i32 %681, 6
  %737 = add i32 %736, %724
  %738 = and i32 %737, -4
  %739 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %734, i32 %738, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %740 = extractvalue %dx.types.ResRet.i32 %739, 0
  %741 = extractvalue %dx.types.ResRet.i32 %739, 1
  %742 = icmp eq i32 %738, %737
  %743 = lshr i32 %740, 16
  %744 = and i32 %741, 65535
  br i1 %742, label %745, label %747

; <label>:745                                     ; preds = %735
  %746 = and i32 %740, 65535
  br label %756

; <label>:747                                     ; preds = %735
  %748 = lshr i32 %741, 16
  br label %756

; <label>:749                                     ; preds = %732
  %750 = mul i32 %726, %727
  %751 = add i32 %750, %724
  %752 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %734, i32 %751, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %753 = extractvalue %dx.types.ResRet.i32 %752, 0
  %754 = extractvalue %dx.types.ResRet.i32 %752, 1
  %755 = extractvalue %dx.types.ResRet.i32 %752, 2
  br label %756

; <label>:756                                     ; preds = %749, %747, %745, %729
  %757 = phi i32 [ %727, %729 ], [ %753, %749 ], [ %746, %745 ], [ %743, %747 ]
  %758 = phi i32 [ %730, %729 ], [ %754, %749 ], [ %743, %745 ], [ %744, %747 ]
  %759 = phi i32 [ %731, %729 ], [ %755, %749 ], [ %744, %745 ], [ %748, %747 ]
  %760 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i32 0, i32 0
  store i32 %757, i32* %760, align 4
  %761 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i32 0, i32 1
  store i32 %758, i32* %761, align 4
  %762 = getelementptr inbounds [3 x i32], [3 x i32]* %64, i32 0, i32 2
  store i32 %759, i32* %762, align 4
  %763 = getelementptr [3 x i32], [3 x i32]* %64, i32 0, i32 %680
  %764 = load i32, i32* %763, align 4, !tbaa !124, !noalias !137
  %765 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %766 = urem i32 %764, %722
  %767 = uitofp i32 %766 to float
  %768 = udiv i32 %764, %722
  %769 = uitofp i32 %768 to float
  %770 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %771 = extractvalue %dx.types.CBufRet.i32 %770, 0
  %772 = sitofp i32 %771 to float
  %773 = extractvalue %dx.types.CBufRet.i32 %770, 1
  %774 = sitofp i32 %773 to float
  %775 = and i32 %765, 2147483647
  %776 = mul i32 %775, 40
  %777 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %778 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %777, i32 %776, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %779 = extractvalue %dx.types.ResRet.f32 %778, 1
  %780 = bitcast float %779 to i32
  %781 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %782 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %781, i32 %780, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %783 = extractvalue %dx.types.ResRet.f32 %782, 0
  %784 = bitcast float %783 to i32
  %785 = and i32 %784, 1048575
  %786 = sub nsw i32 %690, %691
  %787 = add nsw i32 %786, %689
  %788 = add i32 %698, %787
  %789 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %705, i32 %788, i32 undef)  ; BufferLoad(srv,index,wot)
  %790 = extractvalue %dx.types.ResRet.f32 %789, 0
  %791 = select i1 %704, float %703, float %790
  %792 = fadd fast float %711, %791
  %793 = call float @dx.op.binary.f32(i32 36, float %792, float %694)  ; FMin(a,b)
  %794 = call float @dx.op.unary.f32(i32 27, float %793)  ; Round_ni(value)
  %795 = fptoui float %794 to i32
  %796 = and i32 %795, 31
  %797 = ashr i32 %716, %796
  %798 = add nsw i32 %797, -1
  %799 = sitofp i32 %798 to float
  %800 = fdiv fast float 1.000000e+00, %799
  %801 = fmul fast float %800, %767
  %802 = fmul fast float %800, %769
  %803 = fadd fast float %801, %772
  %804 = fadd fast float %802, %774
  %805 = extractvalue %dx.types.CBufRet.i32 %682, 3
  %806 = sitofp i32 %805 to float
  %807 = fdiv fast float %803, %806
  %808 = fdiv fast float %804, %806
  %809 = fsub fast float 1.000000e+00, %807
  %810 = fmul fast float %808, 2.000000e+00
  %811 = fmul fast float %809, 2.000000e+00
  %812 = fmul fast float %793, %810
  %813 = fmul fast float %793, %811
  %814 = fsub fast float 1.000000e+00, %810
  %815 = fsub fast float 1.000000e+00, %811
  br label %816

; <label>:816                                     ; preds = %874, %756
  %817 = phi i32 [ -1, %756 ], [ %878, %874 ]
  %818 = phi i32 [ 0, %756 ], [ %876, %874 ]
  %819 = phi i32 [ 0, %756 ], [ %872, %874 ]
  %820 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %821 = extractvalue %dx.types.CBufRet.i32 %820, 0
  %822 = extractvalue %dx.types.CBufRet.i32 %820, 1
  %823 = add i32 %821, %818
  %824 = add i32 %822, %817
  %825 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %826 = extractvalue %dx.types.CBufRet.i32 %825, 2
  %827 = extractvalue %dx.types.CBufRet.i32 %825, 3
  %828 = call i32 @dx.op.binary.i32(i32 37, i32 %826, i32 %823)  ; IMax(a,b)
  %829 = call i32 @dx.op.binary.i32(i32 37, i32 %827, i32 %824)  ; IMax(a,b)
  %830 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %71, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %831 = extractvalue %dx.types.CBufRet.i32 %830, 0
  %832 = extractvalue %dx.types.CBufRet.i32 %830, 1
  %833 = add i32 %826, -1
  %834 = add i32 %833, %831
  %835 = add i32 %827, -1
  %836 = add i32 %835, %832
  %837 = call i32 @dx.op.binary.i32(i32 38, i32 %834, i32 %828)  ; IMin(a,b)
  %838 = call i32 @dx.op.binary.i32(i32 38, i32 %836, i32 %829)  ; IMin(a,b)
  %839 = sub nsw i32 %838, %827
  %840 = mul nsw i32 %839, %831
  %841 = sub i32 %837, %826
  %842 = add nsw i32 %841, %840
  %843 = extractvalue %dx.types.CBufRet.i32 %825, 0
  %844 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %41)  ; CreateHandleForLib(Resource)
  %845 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %844, i32 %843, i32 undef)  ; BufferLoad(srv,index,wot)
  %846 = extractvalue %dx.types.ResRet.i32 %845, 0
  %847 = add i32 %842, %846
  %848 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %849 = extractvalue %dx.types.CBufRet.f32 %848, 0
  %850 = fcmp fast oge float %849, 0.000000e+00
  %851 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %40)  ; CreateHandleForLib(Resource)
  %852 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %851, i32 %847, i32 undef)  ; BufferLoad(srv,index,wot)
  %853 = extractvalue %dx.types.ResRet.f32 %852, 0
  %854 = select i1 %850, float %849, float %853
  %855 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %856 = extractvalue %dx.types.CBufRet.i32 %855, 0
  %857 = sitofp i32 %856 to float
  %858 = add i32 %846, %787
  %859 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %851, i32 %858, i32 undef)  ; BufferLoad(srv,index,wot)
  %860 = extractvalue %dx.types.ResRet.f32 %859, 0
  %861 = select i1 %850, float %849, float %860
  %862 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %863 = extractvalue %dx.types.CBufRet.i32 %862, 1
  %864 = sitofp i32 %863 to float
  %865 = fadd fast float %864, %861
  %866 = call float @dx.op.binary.f32(i32 36, float %865, float %857)  ; FMin(a,b)
  %867 = call float @dx.op.binary.f32(i32 35, float %854, float %866)  ; FMax(a,b)
  %868 = getelementptr inbounds [4 x float], [4 x float]* %65, i32 0, i32 %819
  %869 = fadd fast float %864, %867
  %870 = select i1 %850, float %849, float %869
  %871 = call float @dx.op.binary.f32(i32 36, float %870, float %857)  ; FMin(a,b)
  store float %871, float* %868, align 4, !tbaa !120, !noalias !82
  %872 = add nuw nsw i32 %819, 1
  %873 = icmp eq i32 %872, 4
  br i1 %873, label %879, label %874

; <label>:874                                     ; preds = %816
  %875 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %872
  %876 = load i32, i32* %875, align 4
  %877 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %872
  %878 = load i32, i32* %877, align 4
  br label %816

; <label>:879                                     ; preds = %816
  %880 = uitofp i32 %795 to float
  %881 = fsub fast float 1.000000e+00, %808
  %882 = fmul fast float %807, 2.000000e+00
  %883 = fmul fast float %881, 2.000000e+00
  %884 = fmul fast float %793, %882
  %885 = fmul fast float %793, %883
  %886 = fsub fast float 1.000000e+00, %882
  %887 = fsub fast float 1.000000e+00, %883
  %888 = getelementptr inbounds [4 x float], [4 x float]* %65, i32 0, i32 0
  %889 = load float, float* %888, align 4, !tbaa !120, !noalias !82
  %890 = getelementptr inbounds [4 x float], [4 x float]* %65, i32 0, i32 1
  %891 = load float, float* %890, align 4, !tbaa !120, !noalias !82
  %892 = getelementptr inbounds [4 x float], [4 x float]* %65, i32 0, i32 2
  %893 = load float, float* %892, align 4, !tbaa !120, !noalias !82
  %894 = getelementptr inbounds [4 x float], [4 x float]* %65, i32 0, i32 3
  %895 = load float, float* %894, align 4, !tbaa !120, !noalias !82
  %896 = fmul fast float %889, %814
  %897 = fmul fast float %891, %886
  %898 = fmul fast float %893, %815
  %899 = fmul fast float %895, %887
  %900 = fadd fast float %896, %812
  %901 = fadd fast float %897, %884
  %902 = fadd fast float %898, %813
  %903 = fadd fast float %899, %885
  %904 = fadd fast float %803, %804
  %905 = fdiv fast float %904, %806
  %906 = fcmp fast ogt float %905, 1.000000e+00
  %907 = fcmp fast olt float %807, %808
  %908 = select i1 %907, float %903, float %902
  %909 = select i1 %907, float %901, float %900
  %910 = select i1 %906, float %908, float %909
  %911 = call float @dx.op.unary.f32(i32 27, float %910)  ; Round_ni(value)
  %912 = fsub fast float %910, %911
  %913 = fsub fast float %911, %880
  %914 = fsub fast float -0.000000e+00, %913
  %915 = call float @dx.op.unary.f32(i32 21, float %914)  ; Exp(value)
  %916 = fmul fast float %915, %767
  %917 = call float @dx.op.unary.f32(i32 27, float %916)  ; Round_ni(value)
  %918 = fsub fast float -0.000000e+00, %911
  %919 = call float @dx.op.unary.f32(i32 21, float %918)  ; Exp(value)
  %920 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %921 = extractvalue %dx.types.CBufRet.f32 %920, 0
  %922 = fmul fast float %921, %919
  %923 = fadd fast float %922, -1.000000e+00
  %924 = fmul fast float %919, 5.000000e-01
  %925 = fmul fast float %924, %921
  %926 = call float @dx.op.binary.f32(i32 35, float %925, float 2.000000e+00)  ; FMax(a,b)
  %927 = fadd fast float %926, -1.000000e+00
  %928 = extractvalue %dx.types.CBufRet.f32 %920, 1
  %929 = fmul fast float %928, %923
  %930 = fmul fast float %928, %927
  %931 = fdiv fast float %917, %929
  %932 = fmul fast float %917, 5.000000e-01
  %933 = call float @dx.op.unary.f32(i32 27, float %932)  ; Round_ni(value)
  %934 = fdiv fast float %933, %930
  %935 = fsub fast float %934, %931
  %936 = fmul fast float %935, %912
  %937 = fadd fast float %936, %931
  %938 = extractvalue %dx.types.CBufRet.f32 %920, 2
  %939 = fadd fast float %937, %938
  %940 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %941 = extractvalue %dx.types.CBufRet.f32 %940, 3
  %942 = fmul fast float %941, %772
  %943 = fadd fast float %939, %942
  %944 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %945 = extractvalue %dx.types.CBufRet.f32 %944, 0
  %946 = fmul fast float %945, %937
  %947 = extractvalue %dx.types.CBufRet.f32 %944, 2
  %948 = fadd fast float %946, %947
  %949 = extractvalue %dx.types.CBufRet.f32 %940, 2
  %950 = fmul fast float %949, %772
  %951 = fadd fast float %948, %950
  %952 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %953 = extractvalue %dx.types.CBufRet.f32 %952, 0
  %954 = fmul fast float %953, %937
  %955 = extractvalue %dx.types.CBufRet.f32 %952, 2
  %956 = fadd fast float %954, %955
  %957 = fmul fast float %953, 5.000000e-01
  %958 = fadd fast float %956, %957
  %959 = extractvalue %dx.types.CBufRet.f32 %940, 0
  %960 = fmul fast float %959, %772
  %961 = fadd fast float %958, %960
  %962 = fmul fast float %915, %769
  %963 = call float @dx.op.unary.f32(i32 27, float %962)  ; Round_ni(value)
  %964 = fdiv fast float %963, %929
  %965 = fmul fast float %963, 5.000000e-01
  %966 = call float @dx.op.unary.f32(i32 27, float %965)  ; Round_ni(value)
  %967 = fdiv fast float %966, %930
  %968 = fsub fast float %967, %964
  %969 = fmul fast float %968, %912
  %970 = fadd fast float %969, %964
  %971 = extractvalue %dx.types.CBufRet.f32 %920, 3
  %972 = fadd fast float %970, %971
  %973 = fmul fast float %941, %774
  %974 = fadd fast float %972, %973
  %975 = extractvalue %dx.types.CBufRet.f32 %944, 1
  %976 = fmul fast float %975, %970
  %977 = extractvalue %dx.types.CBufRet.f32 %944, 3
  %978 = fadd fast float %976, %977
  %979 = fmul fast float %949, %774
  %980 = fadd fast float %978, %979
  %981 = extractvalue %dx.types.CBufRet.f32 %952, 1
  %982 = fmul fast float %981, %970
  %983 = extractvalue %dx.types.CBufRet.f32 %952, 3
  %984 = fadd fast float %982, %983
  %985 = fmul fast float %981, 5.000000e-01
  %986 = fadd fast float %984, %985
  %987 = extractvalue %dx.types.CBufRet.f32 %940, 1
  %988 = fmul fast float %987, %774
  %989 = fadd fast float %986, %988
  %990 = getelementptr [3 x float], [3 x float]* %66, i32 0, i32 %680
  %991 = load float, float* %990, align 4, !tbaa !120, !noalias !136
  %992 = fmul fast float %991, %943
  %993 = fmul fast float %991, %974
  %994 = fadd fast float %992, %678
  %995 = fadd fast float %993, %679
  %996 = fmul fast float %991, %951
  %997 = fmul fast float %991, %980
  %998 = fmul fast float %991, %961
  %999 = fmul fast float %991, %989
  %1000 = fadd fast float %996, %674
  %1001 = fadd fast float %997, %675
  %1002 = fadd fast float %998, %676
  %1003 = fadd fast float %999, %677
  %1004 = add nuw nsw i32 %680, 1
  %1005 = icmp eq i32 %1004, 3
  br i1 %1005, label %1006, label %673

; <label>:1006                                    ; preds = %879
  %1007 = extractvalue %dx.types.CBufRet.f32 %650, 1
  %1008 = extractvalue %dx.types.CBufRet.f32 %650, 3
  %1009 = extractvalue %dx.types.CBufRet.f32 %653, 1
  %1010 = extractvalue %dx.types.CBufRet.f32 %655, 0
  %1011 = extractvalue %dx.types.CBufRet.f32 %655, 2
  %1012 = call float @dx.op.legacyF16ToF32(i32 131, i32 %659)  ; LegacyF16ToF32(value)
  %1013 = fadd fast float %663, %1012
  %1014 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %1015 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %1016 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1014, %dx.types.Handle %1015, float %1002, float %1003, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1017 = extractvalue %dx.types.ResRet.f32 %1016, 2
  %1018 = extractvalue %dx.types.ResRet.f32 %1016, 3
  %1019 = fmul fast float %1017, 2.000000e+00
  %1020 = fmul fast float %1018, 2.000000e+00
  %1021 = fadd fast float %1019, -1.000000e+00
  %1022 = fadd fast float %1020, -1.000000e+00
  %1023 = call float @dx.op.dot2.f32(i32 54, float %1021, float %1022, float %1021, float %1022)  ; Dot2(ax,ay,bx,by)
  %1024 = fsub fast float 1.000000e+00, %1023
  %1025 = call float @dx.op.binary.f32(i32 35, float %1024, float 0.000000e+00)  ; FMax(a,b)
  %1026 = call float @dx.op.unary.f32(i32 24, float %1025)  ; Sqrt(value)
  %1027 = fsub fast float -0.000000e+00, %1021
  %1028 = call float @dx.op.dot3.f32(i32 55, float %1026, float 0.000000e+00, float %1027, float %1026, float 0.000000e+00, float %1027)  ; Dot3(ax,ay,az,bx,by,bz)
  %1029 = call float @dx.op.unary.f32(i32 25, float %1028)  ; Rsqrt(value)
  %1030 = fmul fast float %1029, %1026
  %1031 = fmul fast float %1029, %1027
  %1032 = fmul fast float %1031, %1022
  %1033 = fmul fast float %1030, %1026
  %1034 = fmul fast float %1031, %1021
  %1035 = fsub fast float %1033, %1034
  %1036 = fmul fast float %1022, %1030
  %1037 = fsub fast float -0.000000e+00, %1036
  %1038 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1039 = extractvalue %dx.types.CBufRet.f32 %1038, 0
  %1040 = extractvalue %dx.types.CBufRet.f32 %1038, 1
  %1041 = extractvalue %dx.types.CBufRet.f32 %1038, 2
  %1042 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1043 = extractvalue %dx.types.CBufRet.f32 %1042, 0
  %1044 = extractvalue %dx.types.CBufRet.f32 %1042, 1
  %1045 = extractvalue %dx.types.CBufRet.f32 %1042, 2
  %1046 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %70, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1047 = extractvalue %dx.types.CBufRet.f32 %1046, 0
  %1048 = extractvalue %dx.types.CBufRet.f32 %1046, 1
  %1049 = extractvalue %dx.types.CBufRet.f32 %1046, 2
  %1050 = fmul fast float %1039, %1030
  %1051 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1047, float %1050)  ; FMad(a,b,c)
  %1052 = fmul fast float %1040, %1030
  %1053 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1048, float %1052)  ; FMad(a,b,c)
  %1054 = fmul fast float %1041, %1030
  %1055 = call float @dx.op.tertiary.f32(i32 46, float %1031, float %1049, float %1054)  ; FMad(a,b,c)
  %1056 = fmul fast float %1032, %1039
  %1057 = call float @dx.op.tertiary.f32(i32 46, float %1035, float %1043, float %1056)  ; FMad(a,b,c)
  %1058 = call float @dx.op.tertiary.f32(i32 46, float %1037, float %1047, float %1057)  ; FMad(a,b,c)
  %1059 = fmul fast float %1032, %1040
  %1060 = call float @dx.op.tertiary.f32(i32 46, float %1035, float %1044, float %1059)  ; FMad(a,b,c)
  %1061 = call float @dx.op.tertiary.f32(i32 46, float %1037, float %1048, float %1060)  ; FMad(a,b,c)
  %1062 = fmul fast float %1032, %1041
  %1063 = call float @dx.op.tertiary.f32(i32 46, float %1035, float %1045, float %1062)  ; FMad(a,b,c)
  %1064 = call float @dx.op.tertiary.f32(i32 46, float %1037, float %1049, float %1063)  ; FMad(a,b,c)
  %1065 = fmul fast float %1039, %1021
  %1066 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1043, float %1065)  ; FMad(a,b,c)
  %1067 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %1047, float %1066)  ; FMad(a,b,c)
  %1068 = fmul fast float %1040, %1021
  %1069 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1044, float %1068)  ; FMad(a,b,c)
  %1070 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %1048, float %1069)  ; FMad(a,b,c)
  %1071 = fmul fast float %1041, %1021
  %1072 = call float @dx.op.tertiary.f32(i32 46, float %1022, float %1045, float %1071)  ; FMad(a,b,c)
  %1073 = call float @dx.op.tertiary.f32(i32 46, float %1026, float %1049, float %1072)  ; FMad(a,b,c)
  %1074 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %1075 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %1076 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %1077 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %1078 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %1079 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %1080 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %1081 = fmul fast float %1080, %1077
  %1082 = fmul fast float %1080, %1078
  %1083 = fmul fast float %1080, %1079
  %1084 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %1085 = icmp eq i32 %1084, 254
  %1086 = select i1 %1085, float 1.000000e+00, float -1.000000e+00
  %1087 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %36)  ; CreateHandleForLib(Resource)
  %1088 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %14)  ; CreateHandleForLib(Resource)
  %1089 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1087, %dx.types.Handle %1088, float %1000, float %1001, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1090 = extractvalue %dx.types.ResRet.f32 %1089, 0
  %1091 = extractvalue %dx.types.ResRet.f32 %1089, 1
  %1092 = extractvalue %dx.types.ResRet.f32 %1089, 2
  %1093 = extractvalue %dx.types.ResRet.f32 %1089, 3
  %1094 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1095 = extractvalue %dx.types.CBufRet.f32 %1094, 0
  %1096 = extractvalue %dx.types.CBufRet.f32 %1094, 1
  %1097 = extractvalue %dx.types.CBufRet.f32 %1094, 2
  %1098 = extractvalue %dx.types.CBufRet.f32 %1094, 3
  %1099 = call float @dx.op.dot4.f32(i32 56, float %1090, float %1091, float %1092, float %1093, float %1095, float %1096, float %1097, float %1098)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1100 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1101 = extractvalue %dx.types.CBufRet.f32 %1100, 1
  %1102 = fmul fast float %1101, %994
  %1103 = fmul fast float %1101, %995
  %1104 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %1105 = extractvalue %dx.types.CBufRet.f32 %1104, 0
  %1106 = fadd fast float %1105, %649
  %1107 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %35)  ; CreateHandleForLib(Resource)
  %1108 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %13)  ; CreateHandleForLib(Resource)
  %1109 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1107, %dx.types.Handle %1108, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1110 = extractvalue %dx.types.ResRet.f32 %1109, 1
  %1111 = extractvalue %dx.types.ResRet.f32 %1109, 2
  %1112 = extractvalue %dx.types.CBufRet.f32 %1100, 2
  %1113 = extractvalue %dx.types.CBufRet.f32 %1100, 3
  %1114 = fsub fast float %1112, %1113
  %1115 = fmul fast float %1114, %1111
  %1116 = fadd fast float %1115, %1113
  %1117 = call float @dx.op.unary.f32(i32 7, float %1116)  ; Saturate(value)
  %1118 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %34)  ; CreateHandleForLib(Resource)
  %1119 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %12)  ; CreateHandleForLib(Resource)
  %1120 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1118, %dx.types.Handle %1119, float %1000, float %1001, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1121 = extractvalue %dx.types.ResRet.f32 %1120, 0
  %1122 = extractvalue %dx.types.ResRet.f32 %1120, 1
  %1123 = extractvalue %dx.types.ResRet.f32 %1120, 2
  %1124 = extractvalue %dx.types.ResRet.f32 %1120, 3
  %1125 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1126 = extractvalue %dx.types.CBufRet.f32 %1125, 0
  %1127 = extractvalue %dx.types.CBufRet.f32 %1125, 1
  %1128 = extractvalue %dx.types.CBufRet.f32 %1125, 2
  %1129 = extractvalue %dx.types.CBufRet.f32 %1125, 3
  %1130 = call float @dx.op.dot4.f32(i32 56, float %1121, float %1122, float %1123, float %1124, float %1126, float %1127, float %1128, float %1129)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1131 = fmul fast float %1130, 2.000000e+00
  %1132 = fadd fast float %1117, -1.000000e+00
  %1133 = fadd fast float %1132, %1131
  %1134 = call float @dx.op.binary.f32(i32 35, float %1133, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1135 = call float @dx.op.binary.f32(i32 36, float %1134, float 1.000000e+00)  ; FMin(a,b)
  %1136 = fadd fast float %1135, %1099
  %1137 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %33)  ; CreateHandleForLib(Resource)
  %1138 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %11)  ; CreateHandleForLib(Resource)
  %1139 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1137, %dx.types.Handle %1138, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1140 = extractvalue %dx.types.ResRet.f32 %1139, 1
  %1141 = extractvalue %dx.types.ResRet.f32 %1139, 2
  %1142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1143 = extractvalue %dx.types.CBufRet.f32 %1142, 1
  %1144 = extractvalue %dx.types.CBufRet.f32 %1142, 2
  %1145 = fsub fast float %1143, %1144
  %1146 = fmul fast float %1145, %1141
  %1147 = fadd fast float %1146, %1144
  %1148 = call float @dx.op.unary.f32(i32 7, float %1147)  ; Saturate(value)
  %1149 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1150 = extractvalue %dx.types.CBufRet.f32 %1149, 0
  %1151 = extractvalue %dx.types.CBufRet.f32 %1149, 1
  %1152 = extractvalue %dx.types.CBufRet.f32 %1149, 2
  %1153 = extractvalue %dx.types.CBufRet.f32 %1149, 3
  %1154 = call float @dx.op.dot4.f32(i32 56, float %1090, float %1091, float %1092, float %1093, float %1150, float %1151, float %1152, float %1153)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1155 = fmul fast float %1154, 2.000000e+00
  %1156 = fadd fast float %1148, -1.000000e+00
  %1157 = fadd fast float %1156, %1155
  %1158 = call float @dx.op.binary.f32(i32 35, float %1157, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1159 = call float @dx.op.binary.f32(i32 36, float %1158, float 1.000000e+00)  ; FMin(a,b)
  %1160 = fadd fast float %1136, %1159
  %1161 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %32)  ; CreateHandleForLib(Resource)
  %1162 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %10)  ; CreateHandleForLib(Resource)
  %1163 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1161, %dx.types.Handle %1162, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1164 = extractvalue %dx.types.ResRet.f32 %1163, 1
  %1165 = extractvalue %dx.types.ResRet.f32 %1163, 2
  %1166 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1167 = extractvalue %dx.types.CBufRet.f32 %1166, 1
  %1168 = extractvalue %dx.types.CBufRet.f32 %1166, 2
  %1169 = fsub fast float %1167, %1168
  %1170 = fmul fast float %1169, %1165
  %1171 = fadd fast float %1170, %1168
  %1172 = call float @dx.op.unary.f32(i32 7, float %1171)  ; Saturate(value)
  %1173 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1174 = extractvalue %dx.types.CBufRet.f32 %1173, 0
  %1175 = extractvalue %dx.types.CBufRet.f32 %1173, 1
  %1176 = extractvalue %dx.types.CBufRet.f32 %1173, 2
  %1177 = extractvalue %dx.types.CBufRet.f32 %1173, 3
  %1178 = call float @dx.op.dot4.f32(i32 56, float %1090, float %1091, float %1092, float %1093, float %1174, float %1175, float %1176, float %1177)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1179 = fmul fast float %1178, 2.000000e+00
  %1180 = fadd fast float %1172, -1.000000e+00
  %1181 = fadd fast float %1180, %1179
  %1182 = call float @dx.op.binary.f32(i32 35, float %1181, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1183 = call float @dx.op.binary.f32(i32 36, float %1182, float 1.000000e+00)  ; FMin(a,b)
  %1184 = fadd fast float %1160, %1183
  %1185 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %31)  ; CreateHandleForLib(Resource)
  %1186 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %9)  ; CreateHandleForLib(Resource)
  %1187 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1185, %dx.types.Handle %1186, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1188 = extractvalue %dx.types.ResRet.f32 %1187, 1
  %1189 = extractvalue %dx.types.ResRet.f32 %1187, 2
  %1190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1191 = extractvalue %dx.types.CBufRet.f32 %1190, 1
  %1192 = extractvalue %dx.types.CBufRet.f32 %1190, 2
  %1193 = fsub fast float %1191, %1192
  %1194 = fmul fast float %1193, %1189
  %1195 = fadd fast float %1194, %1192
  %1196 = call float @dx.op.unary.f32(i32 7, float %1195)  ; Saturate(value)
  %1197 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1198 = extractvalue %dx.types.CBufRet.f32 %1197, 0
  %1199 = extractvalue %dx.types.CBufRet.f32 %1197, 1
  %1200 = extractvalue %dx.types.CBufRet.f32 %1197, 2
  %1201 = extractvalue %dx.types.CBufRet.f32 %1197, 3
  %1202 = call float @dx.op.dot4.f32(i32 56, float %1090, float %1091, float %1092, float %1093, float %1198, float %1199, float %1200, float %1201)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1203 = fmul fast float %1202, 2.000000e+00
  %1204 = fadd fast float %1196, -1.000000e+00
  %1205 = fadd fast float %1204, %1203
  %1206 = call float @dx.op.binary.f32(i32 35, float %1205, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1207 = call float @dx.op.binary.f32(i32 36, float %1206, float 1.000000e+00)  ; FMin(a,b)
  %1208 = fadd fast float %1184, %1207
  %1209 = fdiv fast float 1.000000e+00, %1208
  %1210 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %30)  ; CreateHandleForLib(Resource)
  %1211 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %18)  ; CreateHandleForLib(Resource)
  %1212 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1210, %dx.types.Handle %1211, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1213 = extractvalue %dx.types.ResRet.f32 %1212, 0
  %1214 = extractvalue %dx.types.ResRet.f32 %1212, 1
  %1215 = fmul fast float %1213, 2.000000e+00
  %1216 = fmul fast float %1214, 2.000000e+00
  %1217 = fadd fast float %1215, -1.000000e+00
  %1218 = fadd fast float %1216, -1.000000e+00
  %1219 = call float @dx.op.dot2.f32(i32 54, float %1217, float %1218, float %1217, float %1218)  ; Dot2(ax,ay,bx,by)
  %1220 = fsub fast float 1.000000e+00, %1219
  %1221 = call float @dx.op.unary.f32(i32 7, float %1220)  ; Saturate(value)
  %1222 = call float @dx.op.unary.f32(i32 24, float %1221)  ; Sqrt(value)
  %1223 = fmul fast float %1209, %1099
  %1224 = fmul fast float %1217, %1223
  %1225 = fmul fast float %1218, %1223
  %1226 = fmul fast float %1222, %1223
  %1227 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %29)  ; CreateHandleForLib(Resource)
  %1228 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %8)  ; CreateHandleForLib(Resource)
  %1229 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1227, %dx.types.Handle %1228, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1230 = extractvalue %dx.types.ResRet.f32 %1229, 0
  %1231 = extractvalue %dx.types.ResRet.f32 %1229, 1
  %1232 = fmul fast float %1230, 2.000000e+00
  %1233 = fmul fast float %1231, 2.000000e+00
  %1234 = fadd fast float %1232, -1.000000e+00
  %1235 = fadd fast float %1233, -1.000000e+00
  %1236 = call float @dx.op.dot2.f32(i32 54, float %1234, float %1235, float %1234, float %1235)  ; Dot2(ax,ay,bx,by)
  %1237 = fsub fast float 1.000000e+00, %1236
  %1238 = call float @dx.op.unary.f32(i32 7, float %1237)  ; Saturate(value)
  %1239 = call float @dx.op.unary.f32(i32 24, float %1238)  ; Sqrt(value)
  %1240 = fmul fast float %1209, %1135
  %1241 = fmul fast float %1234, %1240
  %1242 = fmul fast float %1235, %1240
  %1243 = fmul fast float %1239, %1240
  %1244 = fadd fast float %1241, %1224
  %1245 = fadd fast float %1242, %1225
  %1246 = fadd fast float %1243, %1226
  %1247 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %28)  ; CreateHandleForLib(Resource)
  %1248 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleForLib(Resource)
  %1249 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1247, %dx.types.Handle %1248, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1250 = extractvalue %dx.types.ResRet.f32 %1249, 0
  %1251 = extractvalue %dx.types.ResRet.f32 %1249, 1
  %1252 = fmul fast float %1250, 2.000000e+00
  %1253 = fmul fast float %1251, 2.000000e+00
  %1254 = fadd fast float %1252, -1.000000e+00
  %1255 = fadd fast float %1253, -1.000000e+00
  %1256 = call float @dx.op.dot2.f32(i32 54, float %1254, float %1255, float %1254, float %1255)  ; Dot2(ax,ay,bx,by)
  %1257 = fsub fast float 1.000000e+00, %1256
  %1258 = call float @dx.op.unary.f32(i32 7, float %1257)  ; Saturate(value)
  %1259 = call float @dx.op.unary.f32(i32 24, float %1258)  ; Sqrt(value)
  %1260 = fmul fast float %1209, %1159
  %1261 = fmul fast float %1254, %1260
  %1262 = fmul fast float %1255, %1260
  %1263 = fmul fast float %1259, %1260
  %1264 = fadd fast float %1244, %1261
  %1265 = fadd fast float %1245, %1262
  %1266 = fadd fast float %1246, %1263
  %1267 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %27)  ; CreateHandleForLib(Resource)
  %1268 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %6)  ; CreateHandleForLib(Resource)
  %1269 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1267, %dx.types.Handle %1268, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1270 = extractvalue %dx.types.ResRet.f32 %1269, 0
  %1271 = extractvalue %dx.types.ResRet.f32 %1269, 1
  %1272 = fmul fast float %1270, 2.000000e+00
  %1273 = fmul fast float %1271, 2.000000e+00
  %1274 = fadd fast float %1272, -1.000000e+00
  %1275 = fadd fast float %1273, -1.000000e+00
  %1276 = call float @dx.op.dot2.f32(i32 54, float %1274, float %1275, float %1274, float %1275)  ; Dot2(ax,ay,bx,by)
  %1277 = fsub fast float 1.000000e+00, %1276
  %1278 = call float @dx.op.unary.f32(i32 7, float %1277)  ; Saturate(value)
  %1279 = call float @dx.op.unary.f32(i32 24, float %1278)  ; Sqrt(value)
  %1280 = fmul fast float %1209, %1183
  %1281 = fmul fast float %1274, %1280
  %1282 = fmul fast float %1275, %1280
  %1283 = fmul fast float %1279, %1280
  %1284 = fadd fast float %1264, %1281
  %1285 = fadd fast float %1265, %1282
  %1286 = fadd fast float %1266, %1283
  %1287 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %26)  ; CreateHandleForLib(Resource)
  %1288 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %5)  ; CreateHandleForLib(Resource)
  %1289 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1287, %dx.types.Handle %1288, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1290 = extractvalue %dx.types.ResRet.f32 %1289, 0
  %1291 = extractvalue %dx.types.ResRet.f32 %1289, 1
  %1292 = fmul fast float %1290, 2.000000e+00
  %1293 = fmul fast float %1291, 2.000000e+00
  %1294 = fadd fast float %1292, -1.000000e+00
  %1295 = fadd fast float %1293, -1.000000e+00
  %1296 = call float @dx.op.dot2.f32(i32 54, float %1294, float %1295, float %1294, float %1295)  ; Dot2(ax,ay,bx,by)
  %1297 = fsub fast float 1.000000e+00, %1296
  %1298 = call float @dx.op.unary.f32(i32 7, float %1297)  ; Saturate(value)
  %1299 = call float @dx.op.unary.f32(i32 24, float %1298)  ; Sqrt(value)
  %1300 = fmul fast float %1209, %1207
  %1301 = fmul fast float %1294, %1300
  %1302 = fmul fast float %1295, %1300
  %1303 = fmul fast float %1299, %1300
  %1304 = fadd fast float %1284, %1301
  %1305 = fadd fast float %1285, %1302
  %1306 = fadd fast float %1286, %1303
  %1307 = fmul fast float %1304, %1008
  %1308 = fmul fast float %1305, %1008
  %1309 = fmul fast float %1306, %1008
  %1310 = fadd fast float %1307, %651
  %1311 = fadd fast float %1308, %1007
  %1312 = fadd fast float %1309, %652
  %1313 = call float @dx.op.dot3.f32(i32 55, float %1310, float %1311, float %1312, float %1310, float %1311, float %1312)  ; Dot3(ax,ay,az,bx,by,bz)
  %1314 = call float @dx.op.unary.f32(i32 25, float %1313)  ; Rsqrt(value)
  %1315 = fmul fast float %1310, %1314
  %1316 = fmul fast float %1311, %1314
  %1317 = fmul fast float %1312, %1314
  %1318 = fmul fast float %1315, %1051
  %1319 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1058, float %1318)  ; FMad(a,b,c)
  %1320 = call float @dx.op.tertiary.f32(i32 46, float %1317, float %1067, float %1319)  ; FMad(a,b,c)
  %1321 = fmul fast float %1315, %1053
  %1322 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1061, float %1321)  ; FMad(a,b,c)
  %1323 = call float @dx.op.tertiary.f32(i32 46, float %1317, float %1070, float %1322)  ; FMad(a,b,c)
  %1324 = fmul fast float %1315, %1055
  %1325 = call float @dx.op.tertiary.f32(i32 46, float %1316, float %1064, float %1324)  ; FMad(a,b,c)
  %1326 = call float @dx.op.tertiary.f32(i32 46, float %1317, float %1073, float %1325)  ; FMad(a,b,c)
  %1327 = call float @dx.op.dot3.f32(i32 55, float %1320, float %1323, float %1326, float %1320, float %1323, float %1326)  ; Dot3(ax,ay,az,bx,by,bz)
  %1328 = call float @dx.op.unary.f32(i32 25, float %1327)  ; Rsqrt(value)
  %1329 = fmul fast float %1320, %1086
  %1330 = fmul fast float %1329, %1328
  %1331 = fmul fast float %1323, %1086
  %1332 = fmul fast float %1331, %1328
  %1333 = fmul fast float %1326, %1086
  %1334 = fmul fast float %1333, %1328
  %1335 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %69, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1336 = extractvalue %dx.types.CBufRet.f32 %1335, 0
  %1337 = extractvalue %dx.types.CBufRet.f32 %1335, 1
  %1338 = extractvalue %dx.types.CBufRet.f32 %1335, 2
  %1339 = extractvalue %dx.types.CBufRet.f32 %1335, 3
  %1340 = fmul fast float %1337, %1336
  %1341 = fmul fast float %1338, %1336
  %1342 = fmul fast float %1339, %1336
  %1343 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %25)  ; CreateHandleForLib(Resource)
  %1344 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1343, %dx.types.Handle %1211, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1345 = extractvalue %dx.types.ResRet.f32 %1344, 0
  %1346 = extractvalue %dx.types.ResRet.f32 %1344, 1
  %1347 = extractvalue %dx.types.ResRet.f32 %1344, 2
  %1348 = fmul fast float %1345, %1223
  %1349 = fmul fast float %1346, %1223
  %1350 = fmul fast float %1347, %1223
  %1351 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %24)  ; CreateHandleForLib(Resource)
  %1352 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleForLib(Resource)
  %1353 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1351, %dx.types.Handle %1352, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1354 = extractvalue %dx.types.ResRet.f32 %1353, 0
  %1355 = extractvalue %dx.types.ResRet.f32 %1353, 1
  %1356 = extractvalue %dx.types.ResRet.f32 %1353, 2
  %1357 = fmul fast float %1354, %1240
  %1358 = fmul fast float %1355, %1240
  %1359 = fmul fast float %1356, %1240
  %1360 = fadd fast float %1357, %1348
  %1361 = fadd fast float %1358, %1349
  %1362 = fadd fast float %1359, %1350
  %1363 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %23)  ; CreateHandleForLib(Resource)
  %1364 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleForLib(Resource)
  %1365 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1363, %dx.types.Handle %1364, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1366 = extractvalue %dx.types.ResRet.f32 %1365, 0
  %1367 = extractvalue %dx.types.ResRet.f32 %1365, 1
  %1368 = extractvalue %dx.types.ResRet.f32 %1365, 2
  %1369 = fmul fast float %1366, %1260
  %1370 = fmul fast float %1367, %1260
  %1371 = fmul fast float %1368, %1260
  %1372 = fadd fast float %1360, %1369
  %1373 = fadd fast float %1361, %1370
  %1374 = fadd fast float %1362, %1371
  %1375 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %22)  ; CreateHandleForLib(Resource)
  %1376 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %1377 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1375, %dx.types.Handle %1376, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1378 = extractvalue %dx.types.ResRet.f32 %1377, 0
  %1379 = extractvalue %dx.types.ResRet.f32 %1377, 1
  %1380 = extractvalue %dx.types.ResRet.f32 %1377, 2
  %1381 = fmul fast float %1378, %1280
  %1382 = fmul fast float %1379, %1280
  %1383 = fmul fast float %1380, %1280
  %1384 = fadd fast float %1372, %1381
  %1385 = fadd fast float %1373, %1382
  %1386 = fadd fast float %1374, %1383
  %1387 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %21)  ; CreateHandleForLib(Resource)
  %1388 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleForLib(Resource)
  %1389 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1387, %dx.types.Handle %1388, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %1106)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1390 = extractvalue %dx.types.ResRet.f32 %1389, 0
  %1391 = extractvalue %dx.types.ResRet.f32 %1389, 1
  %1392 = extractvalue %dx.types.ResRet.f32 %1389, 2
  %1393 = fmul fast float %1390, %1300
  %1394 = fmul fast float %1391, %1300
  %1395 = fmul fast float %1392, %1300
  %1396 = fadd fast float %1384, %1393
  %1397 = fadd fast float %1385, %1394
  %1398 = fadd fast float %1386, %1395
  %1399 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %20)  ; CreateHandleForLib(Resource)
  %1400 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1399, %dx.types.Handle %1211, float %1102, float %1103, float undef, float undef, i32 0, i32 0, i32 undef, float %649)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1401 = extractvalue %dx.types.ResRet.f32 %1400, 1
  %1402 = fmul fast float %1401, %1223
  %1403 = fmul fast float %1240, %1110
  %1404 = fmul fast float %1260, %1140
  %1405 = fmul fast float %1280, %1164
  %1406 = fmul fast float %1300, %1188
  %1407 = fadd fast float %1404, %1403
  %1408 = fadd fast float %1407, %1405
  %1409 = fadd fast float %1408, %1406
  %1410 = fadd fast float %1409, %1402
  %1411 = mul nuw nsw i32 %785, 40
  %1412 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %777, i32 %1411, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1413 = extractvalue %dx.types.ResRet.f32 %1412, 0
  %1414 = bitcast float %1413 to i32
  %1415 = zext i1 %1085 to i32
  %1416 = call float @dx.op.unary.f32(i32 7, float %1396)  ; Saturate(value)
  %1417 = call float @dx.op.unary.f32(i32 7, float %1397)  ; Saturate(value)
  %1418 = call float @dx.op.unary.f32(i32 7, float %1398)  ; Saturate(value)
  %1419 = call float @dx.op.unary.f32(i32 7, float %1410)  ; Saturate(value)
  %1420 = fmul fast float %1419, %1009
  %1421 = fadd fast float %1420, %654
  %1422 = call float @dx.op.dot3.f32(i32 55, float %1330, float %1332, float %1334, float %1330, float %1332, float %1334)  ; Dot3(ax,ay,az,bx,by,bz)
  %1423 = call float @dx.op.unary.f32(i32 25, float %1422)  ; Rsqrt(value)
  %1424 = fmul fast float %1423, %1330
  %1425 = fmul fast float %1423, %1332
  %1426 = fmul fast float %1423, %1334
  %1427 = call float @dx.op.binary.f32(i32 35, float %1340, float 0.000000e+00)  ; FMax(a,b)
  %1428 = call float @dx.op.binary.f32(i32 35, float %1341, float 0.000000e+00)  ; FMax(a,b)
  %1429 = call float @dx.op.binary.f32(i32 35, float %1342, float 0.000000e+00)  ; FMax(a,b)
  %1430 = fadd fast float %1081, %1074
  %1431 = fadd fast float %1082, %1075
  %1432 = fadd fast float %1083, %1076
  %1433 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %1434 = extractvalue %dx.types.CBufRet.f32 %1433, 0
  %1435 = extractvalue %dx.types.CBufRet.f32 %1433, 1
  %1436 = extractvalue %dx.types.CBufRet.f32 %1433, 2
  %1437 = fmul fast float %1434, %1430
  %1438 = fmul fast float %1435, %1431
  %1439 = fmul fast float %1436, %1432
  %1440 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 227)  ; CBufferLoadLegacy(handle,regIndex)
  %1441 = extractvalue %dx.types.CBufRet.f32 %1440, 0
  %1442 = extractvalue %dx.types.CBufRet.f32 %1440, 1
  %1443 = extractvalue %dx.types.CBufRet.f32 %1440, 2
  %1444 = fadd fast float %1437, %1441
  %1445 = fadd fast float %1438, %1442
  %1446 = fadd fast float %1439, %1443
  %1447 = call float @dx.op.binary.f32(i32 35, float %1444, float 0.000000e+00)  ; FMax(a,b)
  %1448 = call float @dx.op.binary.f32(i32 35, float %1445, float 0.000000e+00)  ; FMax(a,b)
  %1449 = call float @dx.op.binary.f32(i32 35, float %1446, float 0.000000e+00)  ; FMax(a,b)
  %1450 = call float @dx.op.binary.f32(i32 36, float %1447, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1451 = call float @dx.op.binary.f32(i32 36, float %1448, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1452 = call float @dx.op.binary.f32(i32 36, float %1449, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1453 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %1454 = extractvalue %dx.types.CBufRet.f32 %1453, 0
  %1455 = extractvalue %dx.types.CBufRet.f32 %1453, 1
  %1456 = extractvalue %dx.types.CBufRet.f32 %1453, 2
  %1457 = fmul fast float %1454, %1450
  %1458 = fmul fast float %1455, %1451
  %1459 = fmul fast float %1456, %1452
  %1460 = fptosi float %1457 to i32
  %1461 = fptosi float %1458 to i32
  %1462 = fptosi float %1459 to i32
  %1463 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<unsigned int, 4> >"(i32 160, %"class.Texture3D<vector<unsigned int, 4> >" %53)  ; CreateHandleForLib(Resource)
  %1464 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1463, i32 0, i32 %1460, i32 %1461, i32 %1462, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1465 = extractvalue %dx.types.ResRet.i32 %1464, 0
  %1466 = extractvalue %dx.types.ResRet.i32 %1464, 1
  %1467 = extractvalue %dx.types.ResRet.i32 %1464, 2
  %1468 = extractvalue %dx.types.ResRet.i32 %1464, 3
  %1469 = uitofp i32 %1465 to float
  %1470 = uitofp i32 %1466 to float
  %1471 = uitofp i32 %1467 to float
  %1472 = uitofp i32 %1468 to float
  %1473 = extractvalue %dx.types.CBufRet.f32 %1453, 3
  %1474 = fadd fast float %1473, 1.000000e+00
  %1475 = fmul fast float %1474, %1469
  %1476 = fmul fast float %1474, %1470
  %1477 = fmul fast float %1474, %1471
  %1478 = fdiv fast float %1457, %1472
  %1479 = fdiv fast float %1458, %1472
  %1480 = fdiv fast float %1459, %1472
  %1481 = call float @dx.op.unary.f32(i32 22, float %1478)  ; Frc(value)
  %1482 = call float @dx.op.unary.f32(i32 22, float %1479)  ; Frc(value)
  %1483 = call float @dx.op.unary.f32(i32 22, float %1480)  ; Frc(value)
  %1484 = fmul fast float %1473, %1481
  %1485 = fmul fast float %1473, %1482
  %1486 = fmul fast float %1473, %1483
  %1487 = fadd fast float %1475, 5.000000e-01
  %1488 = fadd fast float %1487, %1484
  %1489 = fadd fast float %1476, 5.000000e-01
  %1490 = fadd fast float %1489, %1485
  %1491 = fadd fast float %1477, 5.000000e-01
  %1492 = fadd fast float %1491, %1486
  %1493 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %1494 = extractvalue %dx.types.CBufRet.f32 %1493, 0
  %1495 = extractvalue %dx.types.CBufRet.f32 %1493, 1
  %1496 = extractvalue %dx.types.CBufRet.f32 %1493, 2
  %1497 = fmul fast float %1488, %1494
  %1498 = fmul fast float %1490, %1495
  %1499 = fmul fast float %1492, %1496
  %1500 = load i32, i32* %76, align 4, !tbaa !124
  %1501 = and i32 %1500, 16777216
  %1502 = icmp eq i32 %1501, 0
  %1503 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %52)  ; CreateHandleForLib(Resource)
  %1504 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %17)  ; CreateHandleForLib(Resource)
  %1505 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1503, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1506 = extractvalue %dx.types.ResRet.f32 %1505, 0
  %1507 = extractvalue %dx.types.ResRet.f32 %1505, 1
  %1508 = extractvalue %dx.types.ResRet.f32 %1505, 2
  %1509 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %51)  ; CreateHandleForLib(Resource)
  %1510 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1509, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1511 = extractvalue %dx.types.ResRet.f32 %1510, 0
  %1512 = extractvalue %dx.types.ResRet.f32 %1510, 1
  %1513 = extractvalue %dx.types.ResRet.f32 %1510, 2
  %1514 = extractvalue %dx.types.ResRet.f32 %1510, 3
  %1515 = fmul fast float %1511, 2.000000e+00
  %1516 = fmul fast float %1512, 2.000000e+00
  %1517 = fmul fast float %1513, 2.000000e+00
  %1518 = fmul fast float %1514, 2.000000e+00
  %1519 = fadd fast float %1515, -1.000000e+00
  %1520 = fadd fast float %1516, -1.000000e+00
  %1521 = fadd fast float %1517, -1.000000e+00
  %1522 = fadd fast float %1518, -1.000000e+00
  %1523 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %49)  ; CreateHandleForLib(Resource)
  %1524 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1523, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1525 = extractvalue %dx.types.ResRet.f32 %1524, 0
  %1526 = extractvalue %dx.types.ResRet.f32 %1524, 1
  %1527 = extractvalue %dx.types.ResRet.f32 %1524, 2
  %1528 = extractvalue %dx.types.ResRet.f32 %1524, 3
  %1529 = fmul fast float %1525, 2.000000e+00
  %1530 = fmul fast float %1526, 2.000000e+00
  %1531 = fmul fast float %1527, 2.000000e+00
  %1532 = fmul fast float %1528, 2.000000e+00
  %1533 = fadd fast float %1529, -1.000000e+00
  %1534 = fadd fast float %1530, -1.000000e+00
  %1535 = fadd fast float %1531, -1.000000e+00
  %1536 = fadd fast float %1532, -1.000000e+00
  %1537 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %47)  ; CreateHandleForLib(Resource)
  %1538 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1537, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1539 = extractvalue %dx.types.ResRet.f32 %1538, 0
  %1540 = extractvalue %dx.types.ResRet.f32 %1538, 1
  %1541 = extractvalue %dx.types.ResRet.f32 %1538, 2
  %1542 = extractvalue %dx.types.ResRet.f32 %1538, 3
  %1543 = fmul fast float %1539, 2.000000e+00
  %1544 = fmul fast float %1540, 2.000000e+00
  %1545 = fmul fast float %1541, 2.000000e+00
  %1546 = fmul fast float %1542, 2.000000e+00
  %1547 = fadd fast float %1543, -1.000000e+00
  %1548 = fadd fast float %1544, -1.000000e+00
  %1549 = fadd fast float %1545, -1.000000e+00
  %1550 = fadd fast float %1546, -1.000000e+00
  %1551 = fmul fast float %1506, 0x3FFBB67B80000000
  %1552 = fmul fast float %1551, %1519
  %1553 = fmul fast float %1551, %1520
  %1554 = fmul fast float %1551, %1521
  %1555 = fmul fast float %1506, 0x400EFBDC80000000
  %1556 = fmul fast float %1555, %1522
  %1557 = fmul fast float %1507, 0x3FFBB67B80000000
  %1558 = fmul fast float %1557, %1533
  %1559 = fmul fast float %1557, %1534
  %1560 = fmul fast float %1557, %1535
  %1561 = fmul fast float %1507, 0x400EFBDC80000000
  %1562 = fmul fast float %1561, %1536
  %1563 = fmul fast float %1508, 0x3FFBB67B80000000
  %1564 = fmul fast float %1563, %1547
  %1565 = fmul fast float %1563, %1548
  %1566 = fmul fast float %1563, %1549
  %1567 = fmul fast float %1508, 0x400EFBDC80000000
  %1568 = fmul fast float %1567, %1550
  %1569 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %50)  ; CreateHandleForLib(Resource)
  %1570 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1569, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1571 = extractvalue %dx.types.ResRet.f32 %1570, 0
  %1572 = extractvalue %dx.types.ResRet.f32 %1570, 1
  %1573 = extractvalue %dx.types.ResRet.f32 %1570, 2
  %1574 = extractvalue %dx.types.ResRet.f32 %1570, 3
  %1575 = fmul fast float %1571, 2.000000e+00
  %1576 = fmul fast float %1572, 2.000000e+00
  %1577 = fmul fast float %1573, 2.000000e+00
  %1578 = fmul fast float %1574, 2.000000e+00
  %1579 = fadd fast float %1575, -1.000000e+00
  %1580 = fadd fast float %1576, -1.000000e+00
  %1581 = fadd fast float %1577, -1.000000e+00
  %1582 = fadd fast float %1578, -1.000000e+00
  %1583 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %48)  ; CreateHandleForLib(Resource)
  %1584 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1583, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1585 = extractvalue %dx.types.ResRet.f32 %1584, 0
  %1586 = extractvalue %dx.types.ResRet.f32 %1584, 1
  %1587 = extractvalue %dx.types.ResRet.f32 %1584, 2
  %1588 = extractvalue %dx.types.ResRet.f32 %1584, 3
  %1589 = fmul fast float %1585, 2.000000e+00
  %1590 = fmul fast float %1586, 2.000000e+00
  %1591 = fmul fast float %1587, 2.000000e+00
  %1592 = fmul fast float %1588, 2.000000e+00
  %1593 = fadd fast float %1589, -1.000000e+00
  %1594 = fadd fast float %1590, -1.000000e+00
  %1595 = fadd fast float %1591, -1.000000e+00
  %1596 = fadd fast float %1592, -1.000000e+00
  %1597 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %46)  ; CreateHandleForLib(Resource)
  %1598 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1597, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1599 = extractvalue %dx.types.ResRet.f32 %1598, 0
  %1600 = extractvalue %dx.types.ResRet.f32 %1598, 1
  %1601 = extractvalue %dx.types.ResRet.f32 %1598, 2
  %1602 = extractvalue %dx.types.ResRet.f32 %1598, 3
  %1603 = fmul fast float %1599, 2.000000e+00
  %1604 = fmul fast float %1600, 2.000000e+00
  %1605 = fmul fast float %1601, 2.000000e+00
  %1606 = fmul fast float %1602, 2.000000e+00
  %1607 = fadd fast float %1603, -1.000000e+00
  %1608 = fadd fast float %1604, -1.000000e+00
  %1609 = fadd fast float %1605, -1.000000e+00
  %1610 = fadd fast float %1606, -1.000000e+00
  %1611 = fmul fast float %1555, %1579
  %1612 = fmul fast float %1506, 0x4011E37860000000
  %1613 = fmul fast float %1612, %1580
  %1614 = fmul fast float %1555, %1581
  %1615 = fmul fast float %1561, %1593
  %1616 = fmul fast float %1507, 0x4011E37860000000
  %1617 = fmul fast float %1616, %1594
  %1618 = fmul fast float %1561, %1595
  %1619 = fmul fast float %1567, %1607
  %1620 = fmul fast float %1508, 0x4011E37860000000
  %1621 = fmul fast float %1620, %1608
  %1622 = fmul fast float %1567, %1609
  %1623 = fmul fast float %1424, %1424
  %1624 = fmul fast float %1425, %1425
  %1625 = fsub fast float %1623, %1624
  %1626 = fmul fast float %1425, 0xBFF05F8CE0000000
  %1627 = fmul fast float %1426, 0x3FF05F8CE0000000
  %1628 = fmul fast float %1424, 0xBFF05F8CE0000000
  %1629 = fmul fast float %1424, 0x3FEB756F20000000
  %1630 = fmul fast float %1629, %1425
  %1631 = fmul fast float %1425, 0xBFEB756F20000000
  %1632 = fmul fast float %1631, %1426
  %1633 = fmul fast float %1426, %1426
  %1634 = fmul fast float %1633, 0x3FE7C7ADC0000000
  %1635 = fadd fast float %1634, 0xBFCFB4E7C0000000
  %1636 = fmul fast float %1424, 0xBFEB756F20000000
  %1637 = fmul fast float %1636, %1426
  %1638 = call float @dx.op.dot4.f32(i32 56, float %1506, float %1552, float %1553, float %1554, float 0x3FEC5BF9E0000000, float %1626, float %1627, float %1628)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1639 = call float @dx.op.dot4.f32(i32 56, float %1556, float %1611, float %1613, float %1614, float %1630, float %1632, float %1635, float %1637)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1640 = fmul fast float %1625, 0x3FFA963680000000
  %1641 = fmul fast float %1640, %1506
  %1642 = fmul fast float %1641, %1582
  %1643 = fadd fast float %1638, %1642
  %1644 = fadd fast float %1643, %1639
  %1645 = call float @dx.op.dot4.f32(i32 56, float %1507, float %1558, float %1559, float %1560, float 0x3FEC5BF9E0000000, float %1626, float %1627, float %1628)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1646 = call float @dx.op.dot4.f32(i32 56, float %1562, float %1615, float %1617, float %1618, float %1630, float %1632, float %1635, float %1637)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1647 = fmul fast float %1640, %1507
  %1648 = fmul fast float %1647, %1596
  %1649 = fadd fast float %1645, %1648
  %1650 = fadd fast float %1649, %1646
  %1651 = call float @dx.op.dot4.f32(i32 56, float %1508, float %1564, float %1565, float %1566, float 0x3FEC5BF9E0000000, float %1626, float %1627, float %1628)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1652 = call float @dx.op.dot4.f32(i32 56, float %1568, float %1619, float %1621, float %1622, float %1630, float %1632, float %1635, float %1637)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1653 = fadd fast float %1652, %1651
  %1654 = fmul fast float %1640, %1508
  %1655 = fmul fast float %1654, %1610
  %1656 = fadd fast float %1653, %1655
  %1657 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1644)  ; FMax(a,b)
  %1658 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1650)  ; FMax(a,b)
  %1659 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1656)  ; FMax(a,b)
  %1660 = fmul fast float %1657, 0x3FD45F3060000000
  %1661 = fmul fast float %1658, 0x3FD45F3060000000
  %1662 = fmul fast float %1659, 0x3FD45F3060000000
  %1663 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 154)  ; CBufferLoadLegacy(handle,regIndex)
  %1664 = extractvalue %dx.types.CBufRet.f32 %1663, 0
  %1665 = extractvalue %dx.types.CBufRet.f32 %1663, 1
  %1666 = extractvalue %dx.types.CBufRet.f32 %1663, 2
  %1667 = fmul fast float %1660, %1664
  %1668 = fmul fast float %1661, %1665
  %1669 = fmul fast float %1662, %1666
  br i1 %1502, label %1786, label %1670

; <label>:1670                                    ; preds = %1006
  %1671 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %73, i32 181)  ; CBufferLoadLegacy(handle,regIndex)
  %1672 = extractvalue %dx.types.CBufRet.f32 %1671, 1
  %1673 = fcmp fast une float %1672, 0.000000e+00
  br i1 %1673, label %1674, label %1713, !dx.controlflow.hints !138

; <label>:1674                                    ; preds = %1670
  %1675 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %1676 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1675, %dx.types.Handle %1504, float %1497, float %1498, float %1499, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1677 = extractvalue %dx.types.ResRet.f32 %1676, 0
  %1678 = extractvalue %dx.types.ResRet.f32 %1676, 1
  %1679 = extractvalue %dx.types.ResRet.f32 %1676, 2
  %1680 = fmul fast float %1677, 2.000000e+00
  %1681 = fmul fast float %1678, 2.000000e+00
  %1682 = fmul fast float %1679, 2.000000e+00
  %1683 = fadd fast float %1680, -1.000000e+00
  %1684 = fadd fast float %1681, -1.000000e+00
  %1685 = fadd fast float %1682, -1.000000e+00
  %1686 = fmul fast float %1683, %1683
  %1687 = fmul fast float %1684, %1684
  %1688 = fadd fast float %1686, %1687
  %1689 = fmul fast float %1685, %1685
  %1690 = fadd fast float %1688, %1689
  %1691 = call float @dx.op.unary.f32(i32 24, float %1690)  ; Sqrt(value)
  %1692 = call float @dx.op.binary.f32(i32 35, float %1691, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1693 = fdiv fast float %1683, %1692
  %1694 = fdiv fast float %1684, %1692
  %1695 = fdiv fast float %1685, %1692
  %1696 = fsub fast float 1.000000e+00, %1691
  %1697 = fmul fast float %1696, %1696
  %1698 = fsub fast float 1.000000e+00, %1697
  %1699 = fsub fast float %1424, %1693
  %1700 = fsub fast float %1425, %1694
  %1701 = fsub fast float %1426, %1695
  %1702 = fmul fast float %1698, %1699
  %1703 = fmul fast float %1700, %1698
  %1704 = fmul fast float %1701, %1698
  %1705 = fadd fast float %1702, %1693
  %1706 = fadd fast float %1703, %1694
  %1707 = fadd fast float %1704, %1695
  %1708 = call float @dx.op.dot3.f32(i32 55, float %1693, float %1694, float %1695, float %1424, float %1425, float %1426)  ; Dot3(ax,ay,az,bx,by,bz)
  %1709 = call float @dx.op.unary.f32(i32 7, float %1708)  ; Saturate(value)
  %1710 = fsub fast float 1.000000e+00, %1709
  %1711 = fmul fast float %1710, %1698
  %1712 = fadd fast float %1711, %1709
  br label %1713

; <label>:1713                                    ; preds = %1674, %1670
  %1714 = phi float [ %1691, %1674 ], [ 1.000000e+00, %1670 ]
  %1715 = phi float [ %1712, %1674 ], [ 1.000000e+00, %1670 ]
  %1716 = phi float [ %1705, %1674 ], [ %1424, %1670 ]
  %1717 = phi float [ %1706, %1674 ], [ %1425, %1670 ]
  %1718 = phi float [ %1707, %1674 ], [ %1426, %1670 ]
  %1719 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %42)  ; CreateHandleForLib(Resource)
  %1720 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1721 = extractvalue %dx.types.ResRet.f32 %1720, 0
  %1722 = extractvalue %dx.types.ResRet.f32 %1720, 1
  %1723 = extractvalue %dx.types.ResRet.f32 %1720, 2
  %1724 = extractvalue %dx.types.ResRet.f32 %1720, 3
  %1725 = call float @dx.op.dot4.f32(i32 56, float %1721, float %1722, float %1723, float %1724, float %1716, float %1717, float %1718, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1726 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1727 = extractvalue %dx.types.ResRet.f32 %1726, 0
  %1728 = extractvalue %dx.types.ResRet.f32 %1726, 1
  %1729 = extractvalue %dx.types.ResRet.f32 %1726, 2
  %1730 = extractvalue %dx.types.ResRet.f32 %1726, 3
  %1731 = call float @dx.op.dot4.f32(i32 56, float %1727, float %1728, float %1729, float %1730, float %1716, float %1717, float %1718, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1732 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1733 = extractvalue %dx.types.ResRet.f32 %1732, 0
  %1734 = extractvalue %dx.types.ResRet.f32 %1732, 1
  %1735 = extractvalue %dx.types.ResRet.f32 %1732, 2
  %1736 = extractvalue %dx.types.ResRet.f32 %1732, 3
  %1737 = call float @dx.op.dot4.f32(i32 56, float %1733, float %1734, float %1735, float %1736, float %1716, float %1717, float %1718, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1738 = fmul fast float %1717, %1716
  %1739 = fmul fast float %1718, %1717
  %1740 = fmul fast float %1718, %1718
  %1741 = fmul fast float %1718, %1716
  %1742 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1743 = extractvalue %dx.types.ResRet.f32 %1742, 0
  %1744 = extractvalue %dx.types.ResRet.f32 %1742, 1
  %1745 = extractvalue %dx.types.ResRet.f32 %1742, 2
  %1746 = extractvalue %dx.types.ResRet.f32 %1742, 3
  %1747 = call float @dx.op.dot4.f32(i32 56, float %1743, float %1744, float %1745, float %1746, float %1738, float %1739, float %1740, float %1741)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1748 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1749 = extractvalue %dx.types.ResRet.f32 %1748, 0
  %1750 = extractvalue %dx.types.ResRet.f32 %1748, 1
  %1751 = extractvalue %dx.types.ResRet.f32 %1748, 2
  %1752 = extractvalue %dx.types.ResRet.f32 %1748, 3
  %1753 = call float @dx.op.dot4.f32(i32 56, float %1749, float %1750, float %1751, float %1752, float %1738, float %1739, float %1740, float %1741)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1754 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1755 = extractvalue %dx.types.ResRet.f32 %1754, 0
  %1756 = extractvalue %dx.types.ResRet.f32 %1754, 1
  %1757 = extractvalue %dx.types.ResRet.f32 %1754, 2
  %1758 = extractvalue %dx.types.ResRet.f32 %1754, 3
  %1759 = call float @dx.op.dot4.f32(i32 56, float %1755, float %1756, float %1757, float %1758, float %1738, float %1739, float %1740, float %1741)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1760 = fmul fast float %1716, %1716
  %1761 = fmul fast float %1717, %1717
  %1762 = fsub fast float %1760, %1761
  %1763 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1719, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1764 = extractvalue %dx.types.ResRet.f32 %1763, 0
  %1765 = extractvalue %dx.types.ResRet.f32 %1763, 1
  %1766 = extractvalue %dx.types.ResRet.f32 %1763, 2
  %1767 = fmul fast float %1764, %1762
  %1768 = fmul fast float %1765, %1762
  %1769 = fmul fast float %1766, %1762
  %1770 = fadd fast float %1747, %1725
  %1771 = fadd fast float %1753, %1731
  %1772 = fadd fast float %1759, %1737
  %1773 = fadd fast float %1770, %1767
  %1774 = fadd fast float %1771, %1768
  %1775 = fadd fast float %1772, %1769
  %1776 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1773)  ; FMax(a,b)
  %1777 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1774)  ; FMax(a,b)
  %1778 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1775)  ; FMax(a,b)
  %1779 = fmul fast float %1715, %1714
  %1780 = fmul fast float %1779, %1010
  %1781 = fmul fast float %1780, %1776
  %1782 = fmul fast float %1779, %656
  %1783 = fmul fast float %1782, %1777
  %1784 = fmul fast float %1779, %1011
  %1785 = fmul fast float %1784, %1778
  br label %1786

; <label>:1786                                    ; preds = %1713, %1006
  %1787 = phi float [ %1781, %1713 ], [ 0.000000e+00, %1006 ]
  %1788 = phi float [ %1783, %1713 ], [ 0.000000e+00, %1006 ]
  %1789 = phi float [ %1785, %1713 ], [ 0.000000e+00, %1006 ]
  %1790 = fadd fast float %1787, %1667
  %1791 = fadd fast float %1788, %1668
  %1792 = fadd fast float %1789, %1669
  %1793 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1013)  ; LegacyF32ToF16(value)
  %1794 = call i32 @dx.op.legacyF32ToF16(i32 130, float %661)  ; LegacyF32ToF16(value)
  %1795 = shl i32 %1794, 16
  %1796 = or i32 %1795, %1793
  %1797 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1427)  ; LegacyF32ToF16(value)
  %1798 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1428)  ; LegacyF32ToF16(value)
  %1799 = shl i32 %1798, 16
  %1800 = or i32 %1799, %1797
  %1801 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1429)  ; LegacyF32ToF16(value)
  %1802 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1424)  ; LegacyF32ToF16(value)
  %1803 = shl i32 %1802, 16
  %1804 = or i32 %1803, %1801
  %1805 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1425)  ; LegacyF32ToF16(value)
  %1806 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1426)  ; LegacyF32ToF16(value)
  %1807 = shl i32 %1806, 16
  %1808 = or i32 %1807, %1805
  %1809 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1416)  ; LegacyF32ToF16(value)
  %1810 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1417)  ; LegacyF32ToF16(value)
  %1811 = shl i32 %1810, 16
  %1812 = or i32 %1811, %1809
  %1813 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1418)  ; LegacyF32ToF16(value)
  %1814 = call i32 @dx.op.legacyF32ToF16(i32 130, float 1.000000e+00)  ; LegacyF32ToF16(value)
  %1815 = shl i32 %1814, 16
  %1816 = or i32 %1815, %1813
  %1817 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1421)  ; LegacyF32ToF16(value)
  %1818 = shl i32 %1817, 16
  %1819 = or i32 %1818, 32768
  %1820 = shl nuw nsw i32 %1415, 23
  %1821 = shl i32 %1414, 19
  %1822 = and i32 %1821, -536870912
  %1823 = or i32 %1820, %1822
  %1824 = or i32 %1823, %1814
  %1825 = or i32 %1824, 65536
  %1826 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1790)  ; LegacyF32ToF16(value)
  %1827 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1791)  ; LegacyF32ToF16(value)
  %1828 = shl i32 %1827, 16
  %1829 = or i32 %1828, %1826
  %1830 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1792)  ; LegacyF32ToF16(value)
  %1831 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %1832 = shl i32 %1831, 16
  %1833 = or i32 %1832, %1831
  store float %1080, float* %75, align 4
  store i32 %1796, i32* %657, align 4
  store float 0.000000e+00, float* %648, align 4
  %1834 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 0
  store i32 %1800, i32* %1834, align 4
  %1835 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  store i32 %1804, i32* %1835, align 4
  %1836 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  store i32 %1808, i32* %1836, align 4
  %1837 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 0
  store i32 %1812, i32* %1837, align 4
  %1838 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 1
  store i32 %1816, i32* %1838, align 4
  %1839 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 %1819, i32* %1839, align 4
  store i32 %1825, i32* %76, align 4
  %1840 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 0
  store i32 %1829, i32* %1840, align 4
  %1841 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 1
  store i32 %1830, i32* %1841, align 4
  %1842 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 6911, i32* %1842, align 4
  %1843 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 0
  store i32 %1833, i32* %1843, align 4
  %1844 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 1
  store i32 %1833, i32* %1844, align 4
  %1845 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 10
  store i32 0, i32* %1845, align 4
  br i1 %79, label %1846, label %1861

; <label>:1846                                    ; preds = %1786
  %1847 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %1848 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %68, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1849 = extractvalue %dx.types.CBufRet.i32 %1848, 3
  %1850 = sub i32 %1847, %1849
  %1851 = mul i32 %765, 40
  %1852 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %1853 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1852, i32 %1851, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1854 = extractvalue %dx.types.ResRet.f32 %1853, 2
  %1855 = bitcast float %1854 to i32
  %1856 = icmp eq i32 %1855, 1
  %1857 = select i1 %1856, i32 0, i32 %1850
  %1858 = extractvalue %dx.types.ResRet.f32 %1853, 1
  %1859 = bitcast float %1858 to i32
  %1860 = add i32 %1859, %1857
  store i32 %1860, i32* %1842, align 4, !tbaa !124
  br label %1861

; <label>:1861                                    ; preds = %1846, %1786, %644
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.View(i32, %View) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32, %LandscapeMVF) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32, %LandscapeContinuousLODParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32, %LandscapeParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32, %HitGroupSystemRootConstants) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32, %"class.Texture3D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32, %"class.Buffer<float>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32, %"class.StructuredBuffer<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<unsigned int, 4> >"(i32, %"class.Texture3D<vector<unsigned int, 4> >") #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!70, !73}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, null, !44, !51}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* @"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A", !"View_VolumetricLightmapIndirectionTexture", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickAmbientVector", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients0", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients1", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients2", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients3", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients4", i32 0, i32 6, i32 1, i32 4, i32 0, !9}
!15 = !{i32 7, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients5", i32 0, i32 7, i32 1, i32 4, i32 0, !9}
!16 = !{i32 8, %"class.Texture3D<vector<float, 4> >"* @"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_SkyBentNormalBrickTexture", i32 0, i32 8, i32 1, i32 4, i32 0, !9}
!17 = !{i32 9, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_PrimitiveSceneData", i32 0, i32 9, i32 1, i32 12, i32 0, !18}
!18 = !{i32 1, i32 16}
!19 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_InstanceSceneData", i32 0, i32 10, i32 1, i32 12, i32 0, !18}
!20 = !{i32 11, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_SkyIrradianceEnvironmentMap", i32 0, i32 11, i32 1, i32 12, i32 0, !18}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", !"View_LandscapeIndirection", i32 0, i32 12, i32 1, i32 10, i32 0, !7}
!22 = !{i32 13, %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", !"View_LandscapePerComponentData", i32 0, i32 13, i32 1, i32 10, i32 0, !9}
!23 = !{i32 14, %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", !"LandscapeContinuousLODParameters_SectionLODBias", i32 0, i32 14, i32 1, i32 10, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_HeightmapTexture", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_NormalmapTexture", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_0", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_1", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_2", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_3", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_4", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_5", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_6", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_7", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_8", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_9", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_10", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!37 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_11", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!38 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_12", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!39 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_13", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!40 = !{i32 31, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_14", i32 0, i32 31, i32 1, i32 2, i32 0, !9}
!41 = !{i32 32, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_15", i32 0, i32 32, i32 1, i32 2, i32 0, !9}
!42 = !{i32 33, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_16", i32 0, i32 33, i32 1, i32 2, i32 0, !9}
!43 = !{i32 34, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!44 = !{!45, !46, !47, !48, !49, !50}
!45 = !{i32 0, %View* @View, !"View", i32 0, i32 0, i32 1, i32 4960, null}
!46 = !{i32 1, %LandscapeMVF* @LandscapeMVF, !"LandscapeMVF", i32 0, i32 1, i32 1, i32 8, null}
!47 = !{i32 2, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, !"LandscapeContinuousLODParameters", i32 0, i32 2, i32 1, i32 24, null}
!48 = !{i32 3, %LandscapeParameters* @LandscapeParameters, !"LandscapeParameters", i32 0, i32 3, i32 1, i32 208, null}
!49 = !{i32 4, %Material* @Material, !"Material", i32 0, i32 4, i32 1, i32 176, null}
!50 = !{i32 5, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 16, null}
!51 = !{!52, !53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69}
!52 = !{i32 0, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", !"View_MaterialTextureBilinearWrapedSampler", i32 0, i32 0, i32 1, i32 0, null}
!53 = !{i32 1, %struct.SamplerState* @"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A", !"View_SharedBilinearClampedSampler", i32 0, i32 1, i32 1, i32 0, null}
!54 = !{i32 2, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_HeightmapTextureSampler", i32 0, i32 2, i32 1, i32 0, null}
!55 = !{i32 3, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_NormalmapTextureSampler", i32 0, i32 3, i32 1, i32 0, null}
!56 = !{i32 4, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", !"Material_Texture2D_0Sampler", i32 0, i32 4, i32 1, i32 0, null}
!57 = !{i32 5, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", !"Material_Texture2D_1Sampler", i32 0, i32 5, i32 1, i32 0, null}
!58 = !{i32 6, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", !"Material_Texture2D_2Sampler", i32 0, i32 6, i32 1, i32 0, null}
!59 = !{i32 7, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", !"Material_Texture2D_3Sampler", i32 0, i32 7, i32 1, i32 0, null}
!60 = !{i32 8, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", !"Material_Texture2D_4Sampler", i32 0, i32 8, i32 1, i32 0, null}
!61 = !{i32 9, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", !"Material_Texture2D_5Sampler", i32 0, i32 9, i32 1, i32 0, null}
!62 = !{i32 10, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", !"Material_Texture2D_7Sampler", i32 0, i32 10, i32 1, i32 0, null}
!63 = !{i32 11, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", !"Material_Texture2D_8Sampler", i32 0, i32 11, i32 1, i32 0, null}
!64 = !{i32 12, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", !"Material_Texture2D_9Sampler", i32 0, i32 12, i32 1, i32 0, null}
!65 = !{i32 13, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", !"Material_Texture2D_10Sampler", i32 0, i32 13, i32 1, i32 0, null}
!66 = !{i32 14, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", !"Material_Texture2D_12Sampler", i32 0, i32 14, i32 1, i32 0, null}
!67 = !{i32 15, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", !"Material_Texture2D_13Sampler", i32 0, i32 15, i32 1, i32 0, null}
!68 = !{i32 16, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", !"Material_Texture2D_14Sampler", i32 0, i32 16, i32 1, i32 0, null}
!69 = !{i32 17, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", !"Material_Texture2D_15Sampler", i32 0, i32 17, i32 1, i32 0, null}
!70 = !{null, !"", null, !4, !71}
!71 = !{i32 0, i64 8388624, i32 5, !72}
!72 = !{i32 0}
!73 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FDefaultAttributes*)* @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", !"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", null, null, !74}
!74 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !72}
!75 = !{!76, !78}
!76 = distinct !{!76, !77, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %PixelMaterialInputs"}
!77 = distinct !{!77, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z"}
!78 = distinct !{!78, !79, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z: %PixelMaterialInputs"}
!79 = distinct !{!79, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z"}
!80 = !{!81, !76, !78}
!81 = distinct !{!81, !77, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %Parameters"}
!82 = !{!83, !85, !87, !88}
!83 = distinct !{!83, !84, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!84 = distinct !{!84, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!85 = distinct !{!85, !86, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!86 = distinct !{!86, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!87 = distinct !{!87, !86, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!88 = distinct !{!88, !89, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z: %Interpolants"}
!89 = distinct !{!89, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z"}
!90 = !{!91, !93, !94, !96, !97}
!91 = distinct !{!91, !92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutDiffuseLighting"}
!92 = distinct !{!92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z"}
!93 = distinct !{!93, !92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutSubsurfaceLighting"}
!94 = distinct !{!94, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutDiffuseLighting"}
!95 = distinct !{!95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z"}
!96 = distinct !{!96, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutSubsurfaceLighting"}
!97 = distinct !{!97, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutIndirectIrradiance"}
!98 = !{!99, !76, !78}
!99 = distinct !{!99, !100, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z: %agg.result"}
!100 = distinct !{!100, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z"}
!101 = !{!102, !104, !85, !87, !88}
!102 = distinct !{!102, !103, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!103 = distinct !{!103, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!104 = distinct !{!104, !105, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!105 = distinct !{!105, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!106 = !{!107, !109, !83, !85, !87, !88}
!107 = distinct !{!107, !108, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!108 = distinct !{!108, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!109 = distinct !{!109, !110, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!110 = distinct !{!110, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!111 = !{!112, !94, !96, !97}
!112 = distinct !{!112, !113, !"\01?internal.GetVolumetricLightmapSH3@@YA?AUFThreeBandSHVectorRGB@@V?$vector@M$02@@@Z: %agg.result"}
!113 = distinct !{!113, !"\01?internal.GetVolumetricLightmapSH3@@YA?AUFThreeBandSHVectorRGB@@V?$vector@M$02@@@Z"}
!114 = !{!115, !117, !118, !119, !112, !94, !96, !97}
!115 = distinct !{!115, !116, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %AmbientVector"}
!116 = distinct !{!116, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z"}
!117 = distinct !{!117, !116, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Red"}
!118 = distinct !{!118, !116, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Green"}
!119 = distinct !{!119, !116, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Blue"}
!120 = !{!121, !121, i64 0}
!121 = !{!"float", !122, i64 0}
!122 = !{!"omnipotent char", !123, i64 0}
!123 = !{!"Simple C/C++ TBAA"}
!124 = !{!125, !125, i64 0}
!125 = !{!"int", !122, i64 0}
!126 = !{!127}
!127 = distinct !{!127, !128, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!128 = distinct !{!128, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!129 = distinct !{!129, !"dx.controlflow.hints", i32 1}
!130 = !{!131}
!131 = distinct !{!131, !132, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!132 = distinct !{!132, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!133 = !{!134}
!134 = distinct !{!134, !135, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!135 = distinct !{!135, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ"}
!136 = !{!85, !87, !88}
!137 = !{!104, !85, !87, !88}
!138 = distinct !{!138, !"dx.controlflow.hints", i32 1}
