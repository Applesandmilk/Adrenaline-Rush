; shader hash: f3c184be6c02438ec7a794457aea8a45
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2016
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2032
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2048
;       float4 View_ScreenToViewSpace;                ; Offset: 2064
;       int View_NumSceneColorMSAASamples;            ; Offset: 2080
;       float View_PreExposure;                       ; Offset: 2084
;       float View_OneOverPreExposure;                ; Offset: 2088
;       float PrePadding_View_2092;                   ; Offset: 2092
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2096
;       float4 View_SpecularOverrideParameter;        ; Offset: 2112
;       float4 View_NormalOverrideParameter;          ; Offset: 2128
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2144
;       float View_PrevFrameGameTime;                 ; Offset: 2152
;       float View_PrevFrameRealTime;                 ; Offset: 2156
;       float View_OutOfBoundsMask;                   ; Offset: 2160
;       float PrePadding_View_2164;                   ; Offset: 2164
;       float PrePadding_View_2168;                   ; Offset: 2168
;       float PrePadding_View_2172;                   ; Offset: 2172
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2176
;       float View_CullingSign;                       ; Offset: 2188
;       float View_NearPlane;                         ; Offset: 2192
;       float View_GameTime;                          ; Offset: 2196
;       float View_RealTime;                          ; Offset: 2200
;       float View_DeltaTime;                         ; Offset: 2204
;       float View_MaterialTextureMipBias;            ; Offset: 2208
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2212
;       uint View_Random;                             ; Offset: 2216
;       uint View_FrameNumber;                        ; Offset: 2220
;       uint View_StateFrameIndexMod8;                ; Offset: 2224
;       uint View_StateFrameIndex;                    ; Offset: 2228
;       uint View_DebugViewModeMask;                  ; Offset: 2232
;       float View_CameraCut;                         ; Offset: 2236
;       float View_UnlitViewmodeMask;                 ; Offset: 2240
;       float PrePadding_View_2244;                   ; Offset: 2244
;       float PrePadding_View_2248;                   ; Offset: 2248
;       float PrePadding_View_2252;                   ; Offset: 2252
;       float4 View_DirectionalLightColor;            ; Offset: 2256
;       float3 View_DirectionalLightDirection;        ; Offset: 2272
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2288
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2320
;       float4 View_TemporalAAParams;                 ; Offset: 2352
;       float4 View_CircleDOFParams;                  ; Offset: 2368
;       uint View_ForceDrawAllVelocities;             ; Offset: 2384
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2388
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2392
;       float View_DepthOfFieldScale;                 ; Offset: 2396
;       float View_DepthOfFieldFocalLength;           ; Offset: 2400
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2404
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2408
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2412
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2416
;       float View_GeneralPurposeTweak;               ; Offset: 2420
;       float View_GeneralPurposeTweak2;              ; Offset: 2424
;       float View_DemosaicVposOffset;                ; Offset: 2428
;       float View_DecalDepthBias;                    ; Offset: 2432
;       float PrePadding_View_2436;                   ; Offset: 2436
;       float PrePadding_View_2440;                   ; Offset: 2440
;       float PrePadding_View_2444;                   ; Offset: 2444
;       float3 View_IndirectLightingColorScale;       ; Offset: 2448
;       float PrePadding_View_2460;                   ; Offset: 2460
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2496
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2528
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2560
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2592
;       float4 View_AtmosphereLightDiscCosHalfApexAngle[2];; Offset: 2624
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2656
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2672
;       float PrePadding_View_2684;                   ; Offset: 2684
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2688
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2704
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2768
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2784
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2788
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2792
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2796
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2800
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2816
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2820
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2824
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2828
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2832
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2836
;       float PrePadding_View_2840;                   ; Offset: 2840
;       float PrePadding_View_2844;                   ; Offset: 2844
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2848
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2860
;       float View_RealTimeReflectionCapture;         ; Offset: 2864
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2868
;       float PrePadding_View_2872;                   ; Offset: 2872
;       float PrePadding_View_2876;                   ; Offset: 2876
;       float4 View_AmbientCubemapTint;               ; Offset: 2880
;       float View_AmbientCubemapIntensity;           ; Offset: 2896
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2900
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2904
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2908
;       float4 View_SkyLightColor;                    ; Offset: 2912
;       float4 View_MobileSkyIrradianceEnvironmentMap[7];; Offset: 2928
;       float View_MobilePreviewMode;                 ; Offset: 3040
;       float View_HMDEyePaddingOffset;               ; Offset: 3044
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3048
;       float View_ShowDecalsMask;                    ; Offset: 3052
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3056
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3060
;       float PrePadding_View_3064;                   ; Offset: 3064
;       float PrePadding_View_3068;                   ; Offset: 3068
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3072
;       int View_StereoPassIndex;                     ; Offset: 3084
;       float4 View_GlobalVolumeCenterAndExtent[6];   ; Offset: 3088
;       float4 View_GlobalVolumeWorldToUVAddAndMul[6];; Offset: 3184
;       float4 View_GlobalDistanceFieldMipWorldToUVScale[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipWorldToUVBias[6];; Offset: 3376
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3472
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3476
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3480
;       int PrePadding_View_3484;                     ; Offset: 3484
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3488
;       float PrePadding_View_3500;                   ; Offset: 3500
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3504
;       float View_GlobalVolumeDimension;             ; Offset: 3516
;       float View_GlobalVolumeTexelSize;             ; Offset: 3520
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3524
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3528
;       float View_FullyCoveredExpandSurfaceScale;    ; Offset: 3532
;       float View_UncoveredExpandSurfaceScale;       ; Offset: 3536
;       float View_UncoveredMinStepScale;             ; Offset: 3540
;       int2 View_CursorPosition;                     ; Offset: 3544
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3552
;       float PrePadding_View_3556;                   ; Offset: 3556
;       float PrePadding_View_3560;                   ; Offset: 3560
;       float PrePadding_View_3564;                   ; Offset: 3564
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3568
;       float PrePadding_View_3580;                   ; Offset: 3580
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3600
;       float View_VolumetricFogMaxDistance;          ; Offset: 3608
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3632
;       float PrePadding_View_3644;                   ; Offset: 3644
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3648
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3660
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3664
;       float View_StereoIPD;                         ; Offset: 3676
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3680
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3696
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3728
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3732
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3736
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3740
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3744
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3748
;       uint PrePadding_View_3752;                    ; Offset: 3752
;       uint PrePadding_View_3756;                    ; Offset: 3756
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3760
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3776
;       float PrePadding_View_3784;                   ; Offset: 3784
;       float PrePadding_View_3788;                   ; Offset: 3788
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3792
;       float View_OverrideLandscapeLOD;              ; Offset: 3808
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3812
;       float View_MinRoughness;                      ; Offset: 3816
;       float PrePadding_View_3820;                   ; Offset: 3820
;       float4 View_HairRenderInfo;                   ; Offset: 3824
;       uint View_EnableSkyLight;                     ; Offset: 3840
;       uint View_HairRenderInfoBits;                 ; Offset: 3844
;       uint View_HairComponents;                     ; Offset: 3848
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3852
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3856
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3872
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3888
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3900
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 3904
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 3908
;       int View_PhysicsFieldClipmapCount;            ; Offset: 3912
;       int View_PhysicsFieldTargetCount;             ; Offset: 3916
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 3920
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4432
;       uint View_GPUSceneViewId;                     ; Offset: 4436
;       uint PrePadding_View_4440;                    ; Offset: 4440
;       uint PrePadding_View_4444;                    ; Offset: 4444
;       uint PrePadding_View_4448;                    ; Offset: 4448
;       uint PrePadding_View_4452;                    ; Offset: 4452
;       uint PrePadding_View_4456;                    ; Offset: 4456
;       uint PrePadding_View_4460;                    ; Offset: 4460
;       uint PrePadding_View_4464;                    ; Offset: 4464
;       uint PrePadding_View_4468;                    ; Offset: 4468
;       uint PrePadding_View_4472;                    ; Offset: 4472
;       uint PrePadding_View_4476;                    ; Offset: 4476
;       uint PrePadding_View_4480;                    ; Offset: 4480
;       uint PrePadding_View_4484;                    ; Offset: 4484
;       uint PrePadding_View_4488;                    ; Offset: 4488
;       uint PrePadding_View_4492;                    ; Offset: 4492
;       uint PrePadding_View_4496;                    ; Offset: 4496
;       uint PrePadding_View_4500;                    ; Offset: 4500
;       uint PrePadding_View_4504;                    ; Offset: 4504
;       uint PrePadding_View_4508;                    ; Offset: 4508
;       uint PrePadding_View_4512;                    ; Offset: 4512
;       uint PrePadding_View_4516;                    ; Offset: 4516
;       uint PrePadding_View_4520;                    ; Offset: 4520
;       uint PrePadding_View_4524;                    ; Offset: 4524
;       uint PrePadding_View_4528;                    ; Offset: 4528
;       uint PrePadding_View_4532;                    ; Offset: 4532
;       uint PrePadding_View_4536;                    ; Offset: 4536
;       uint PrePadding_View_4540;                    ; Offset: 4540
;       uint PrePadding_View_4544;                    ; Offset: 4544
;       uint PrePadding_View_4548;                    ; Offset: 4548
;       uint PrePadding_View_4552;                    ; Offset: 4552
;       uint PrePadding_View_4556;                    ; Offset: 4556
;       uint PrePadding_View_4560;                    ; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint PrePadding_View_4568;                    ; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint PrePadding_View_4576;                    ; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint PrePadding_View_4584;                    ; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint PrePadding_View_4592;                    ; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint PrePadding_View_4600;                    ; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint PrePadding_View_4608;                    ; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint PrePadding_View_4616;                    ; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint PrePadding_View_4624;                    ; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint PrePadding_View_4632;                    ; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint PrePadding_View_4640;                    ; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint PrePadding_View_4648;                    ; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint PrePadding_View_4656;                    ; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint PrePadding_View_4664;                    ; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint PrePadding_View_4672;                    ; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint PrePadding_View_4680;                    ; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint PrePadding_View_4688;                    ; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint PrePadding_View_4696;                    ; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint PrePadding_View_4704;                    ; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint PrePadding_View_4712;                    ; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint PrePadding_View_4720;                    ; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint PrePadding_View_4728;                    ; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint PrePadding_View_4736;                    ; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint PrePadding_View_4744;                    ; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint PrePadding_View_4752;                    ; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint PrePadding_View_4760;                    ; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint PrePadding_View_4768;                    ; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint PrePadding_View_4776;                    ; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint PrePadding_View_4784;                    ; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint PrePadding_View_4792;                    ; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint PrePadding_View_4800;                    ; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint PrePadding_View_4808;                    ; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint PrePadding_View_4816;                    ; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint PrePadding_View_4824;                    ; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint PrePadding_View_4832;                    ; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint PrePadding_View_4840;                    ; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint PrePadding_View_4848;                    ; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint PrePadding_View_4856;                    ; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint PrePadding_View_4864;                    ; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint PrePadding_View_4872;                    ; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint PrePadding_View_4880;                    ; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint PrePadding_View_4888;                    ; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint PrePadding_View_4896;                    ; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint PrePadding_View_4904;                    ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint PrePadding_View_4912;                    ; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint PrePadding_View_4920;                    ; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint PrePadding_View_4928;                    ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint PrePadding_View_4936;                    ; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint PrePadding_View_4944;                    ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint View_bShadingEnergyConservation;         ; Offset: 4952
;       uint View_bShadingEnergyPreservation;         ; Offset: 4956
;   
;   } View;                                           ; Offset:    0 Size:  4960
;
; }
;
; cbuffer LandscapeMVF
; {
;
;   struct LandscapeMVF
;   {
;
;       int2 LandscapeMVF_SubXY;                      ; Offset:    0
;   
;   } LandscapeMVF;                                   ; Offset:    0 Size:     8
;
; }
;
; cbuffer LandscapeContinuousLODParameters
; {
;
;   struct LandscapeContinuousLODParameters
;   {
;
;       int LandscapeContinuousLODParameters_LandscapeIndex;; Offset:    0
;       int PrePadding_LandscapeContinuousLODParameters_4;; Offset:    4
;       int2 LandscapeContinuousLODParameters_Min;    ; Offset:    8
;       int2 LandscapeContinuousLODParameters_Size;   ; Offset:   16
;   
;   } LandscapeContinuousLODParameters;               ; Offset:    0 Size:    24
;
; }
;
; cbuffer LandscapeParameters
; {
;
;   struct LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       int PrePadding_LandscapeParameters_20;        ; Offset:   20
;       int PrePadding_LandscapeParameters_24;        ; Offset:   24
;       int PrePadding_LandscapeParameters_28;        ; Offset:   28
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   32
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   64
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   80
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:   96
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_BlendableLayerMask;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;   
;   } LandscapeParameters;                            ; Offset:    0 Size:   208
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[11];          ; Offset:    0
;   
;   } Material;                                       ; Offset:    0 Size:   176
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint UserData;                            ; Offset:    8
;           uint BaseInstanceIndex;                   ; Offset:   12
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; LandscapeMVF                      cbuffer      NA          NA     CB1            cb1     1
; LandscapeContinuousLODParameters   cbuffer      NA          NA     CB2            cb2     1
; LandscapeParameters               cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB5     cb0,space2     1
; View_MaterialTextureBilinearWrapedSampler   sampler      NA          NA      S0             s0     1
; View_SharedBilinearClampedSampler   sampler      NA          NA      S1             s1     1
; LandscapeParameters_HeightmapTextureSampler   sampler      NA          NA      S2             s2     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S3             s3     1
; LandscapeParameters_XYOffsetmapTextureSampler   sampler      NA          NA      S4             s4     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_5Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_7Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S12            s12     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S13            s13     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S16            s16     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S17            s17     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S18            s18     1
; View_VolumetricLightmapIndirectionTexture   texture     u32          3d      T0             t0     1
; View_VolumetricLightmapBrickAmbientVector   texture     f32          3d      T1             t1     1
; View_VolumetricLightmapBrickSHCoefficients0   texture     f32          3d      T2             t2     1
; View_VolumetricLightmapBrickSHCoefficients1   texture     f32          3d      T3             t3     1
; View_VolumetricLightmapBrickSHCoefficients2   texture     f32          3d      T4             t4     1
; View_VolumetricLightmapBrickSHCoefficients3   texture     f32          3d      T5             t5     1
; View_VolumetricLightmapBrickSHCoefficients4   texture     f32          3d      T6             t6     1
; View_VolumetricLightmapBrickSHCoefficients5   texture     f32          3d      T7             t7     1
; View_SkyBentNormalBrickTexture    texture     f32          3d      T8             t8     1
; View_PrimitiveSceneData           texture  struct         r/o      T9             t9     1
; View_InstanceSceneData            texture  struct         r/o     T10            t10     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o     T11            t11     1
; View_LandscapeIndirection         texture     u32         buf     T12            t12     1
; View_LandscapePerComponentData    texture     f32         buf     T13            t13     1
; LandscapeContinuousLODParameters_SectionLODBias   texture     f32         buf     T14            t14     1
; LandscapeParameters_HeightmapTexture   texture     f32          2d     T15            t15     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d     T16            t16     1
; LandscapeParameters_XYOffsetmapTexture   texture     f32          2d     T17            t17     1
; Material_Texture2D_0              texture     f32          2d     T18            t18     1
; Material_Texture2D_1              texture     f32          2d     T19            t19     1
; Material_Texture2D_2              texture     f32          2d     T20            t20     1
; Material_Texture2D_3              texture     f32          2d     T21            t21     1
; Material_Texture2D_4              texture     f32          2d     T22            t22     1
; Material_Texture2D_5              texture     f32          2d     T23            t23     1
; Material_Texture2D_6              texture     f32          2d     T24            t24     1
; Material_Texture2D_7              texture     f32          2d     T25            t25     1
; Material_Texture2D_8              texture     f32          2d     T26            t26     1
; Material_Texture2D_9              texture     f32          2d     T27            t27     1
; Material_Texture2D_10             texture     f32          2d     T28            t28     1
; Material_Texture2D_11             texture     f32          2d     T29            t29     1
; Material_Texture2D_12             texture     f32          2d     T30            t30     1
; Material_Texture2D_13             texture     f32          2d     T31            t31     1
; Material_Texture2D_14             texture     f32          2d     T32            t32     1
; Material_Texture2D_15             texture     f32          2d     T33            t33     1
; Material_Texture2D_16             texture     f32          2d     T34            t34     1
; HitGroupSystemIndexBuffer         texture    byte         r/o     T35      t0,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.SamplerState = type { i32 }
%"class.Texture3D<vector<unsigned int, 4> >" = type { <4 x i32>, %"class.Texture3D<vector<unsigned int, 4> >::mips_type" }
%"class.Texture3D<vector<unsigned int, 4> >::mips_type" = type { i32 }
%"class.Texture3D<vector<float, 4> >" = type { <4 x float>, %"class.Texture3D<vector<float, 4> >::mips_type" }
%"class.Texture3D<vector<float, 4> >::mips_type" = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Buffer<float>" = type { float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [7 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%LandscapeMVF = type { <2 x i32> }
%LandscapeContinuousLODParameters = type { i32, i32, <2 x i32>, <2 x i32> }
%LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, %class.matrix.float.4.4 }
%Material = type { [11 x <4 x float>] }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32 }
%struct.FPackedMaterialClosestHitPayload = type { %struct.FMinimalPayload, i32, float, [3 x i32], [2 x i32], i32, i32, [2 x i32], i32, [2 x i32], i32 }
%struct.FMinimalPayload = type { float }
%struct.FDefaultAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A" = external constant %"class.Texture3D<vector<unsigned int, 4> >", align 4
@"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A" = external constant %"class.Texture3D<vector<float, 4> >", align 4
@"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A" = external constant %"class.Buffer<unsigned int>", align 4
@"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_0Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_1Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_2Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_3Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_4Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_5Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_8Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_9Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_10Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_13Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_14Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_15Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@View = external constant %View
@LandscapeMVF = external constant %LandscapeMVF
@LandscapeContinuousLODParameters = external constant %LandscapeContinuousLODParameters
@LandscapeParameters = external constant %LandscapeParameters
@Material = external constant %Material
@HitGroupSystemRootConstants = external constant %HitGroupSystemRootConstants
@NeighborOffset.i.i.i.i.i.0.hca = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 1, i32 0]
@NeighborOffset.i.i.i.i.i.1.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 0, i32 1]

; Function Attrs: nounwind
define void @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FDefaultAttributes* nocapture readonly %Attributes) #0 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", align 4, !noalias !77
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", align 4, !noalias !77
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", align 4, !noalias !77
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", align 4, !noalias !77
  %5 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", align 4, !noalias !82
  %6 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", align 4, !noalias !82
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", align 4, !noalias !82
  %8 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", align 4, !noalias !82
  %9 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", align 4, !noalias !82
  %10 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", align 4, !noalias !82
  %11 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", align 4, !noalias !82
  %12 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", align 4, !noalias !82
  %13 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", align 4, !noalias !82
  %14 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", align 4, !noalias !82
  %15 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A", align 4, !noalias !84
  %16 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", align 4
  %17 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", align 4, !noalias !84
  %18 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A", align 4, !noalias !92
  %19 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", align 4, !noalias !100
  %20 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !103
  %21 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %22 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %23 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %24 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %25 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %26 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !77
  %27 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %28 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %29 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %30 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %31 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %32 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %33 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %34 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %35 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %36 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %37 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !82
  %38 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !84
  %39 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %40 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !84
  %41 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", align 4, !noalias !84
  %42 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", align 4, !noalias !84
  %43 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", align 4, !noalias !84
  %44 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !92
  %45 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !108
  %46 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %47 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !92
  %48 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !113
  %49 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !116
  %50 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !113
  %51 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !116
  %52 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !113
  %53 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !116
  %54 = load %"class.Texture3D<vector<float, 4> >", %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A", align 4, !noalias !116
  %55 = load %"class.Texture3D<vector<unsigned int, 4> >", %"class.Texture3D<vector<unsigned int, 4> >"* @"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A", align 4
  %56 = load %HitGroupSystemRootConstants, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, align 4
  %57 = load %Material, %Material* @Material, align 4
  %58 = load %LandscapeParameters, %LandscapeParameters* @LandscapeParameters, align 4
  %59 = load %LandscapeContinuousLODParameters, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, align 4
  %60 = load %LandscapeMVF, %LandscapeMVF* @LandscapeMVF, align 4
  %61 = load %View, %View* @View, align 4
  %62 = alloca [3 x float], align 4
  %63 = alloca [3 x float], align 4
  %64 = alloca [3 x float], align 4
  %65 = alloca [3 x i32], align 4
  %66 = alloca [3 x i32], align 4
  %67 = alloca [4 x float], align 4
  %68 = alloca [3 x float], align 4
  %69 = alloca [4 x float], align 4
  %70 = call %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32 160, %HitGroupSystemRootConstants %56)  ; CreateHandleForLib(Resource)
  %71 = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %57)  ; CreateHandleForLib(Resource)
  %72 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32 160, %LandscapeParameters %58)  ; CreateHandleForLib(Resource)
  %73 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32 160, %LandscapeContinuousLODParameters %59)  ; CreateHandleForLib(Resource)
  %74 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32 160, %LandscapeMVF %60)  ; CreateHandleForLib(Resource)
  %75 = call %dx.types.Handle @dx.op.createHandleForLib.View(i32 160, %View %61)  ; CreateHandleForLib(Resource)
  %76 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %77 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %76, float* %77, align 4, !tbaa !122
  %78 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6
  %79 = load i32, i32* %78, align 4, !tbaa !126
  %80 = and i32 %79, 33554432
  %81 = icmp ne i32 %80, 0
  br i1 %81, label %82, label %703

; <label>:82                                      ; preds = %0
  %83 = getelementptr inbounds [4 x float], [4 x float]* %69, i32 0, i32 0
  br label %84

; <label>:84                                      ; preds = %413, %82
  %85 = phi i32 [ %621, %413 ], [ 0, %82 ]
  %86 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %87 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.i32 %87, 1
  %89 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %90 = extractvalue %dx.types.CBufRet.i32 %89, 3
  %91 = sub nsw i32 %88, %90
  %92 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %93 = extractvalue %dx.types.CBufRet.i32 %92, 0
  %94 = mul nsw i32 %91, %93
  %95 = extractvalue %dx.types.CBufRet.i32 %87, 0
  %96 = extractvalue %dx.types.CBufRet.i32 %89, 2
  %97 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.i32 %97, 0
  %99 = sitofp i32 %98 to float
  %100 = extractvalue %dx.types.CBufRet.i32 %89, 0
  %101 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %43)  ; CreateHandleForLib(Resource)
  %102 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %101, i32 %100, i32 undef)  ; BufferLoad(srv,index,wot)
  %103 = extractvalue %dx.types.ResRet.i32 %102, 0
  %104 = add i32 %94, %95
  %105 = sub i32 %104, %96
  %106 = add i32 %105, %103
  %107 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %108 = extractvalue %dx.types.CBufRet.f32 %107, 0
  %109 = fcmp fast oge float %108, 0.000000e+00
  %110 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %42)  ; CreateHandleForLib(Resource)
  %111 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %110, i32 %106, i32 undef)  ; BufferLoad(srv,index,wot)
  %112 = extractvalue %dx.types.ResRet.f32 %111, 0
  %113 = select i1 %109, float %108, float %112
  %114 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %115 = extractvalue %dx.types.CBufRet.i32 %114, 1
  %116 = sitofp i32 %115 to float
  %117 = fadd fast float %116, %113
  %118 = call float @dx.op.binary.f32(i32 36, float %117, float %99)  ; FMin(a,b)
  %119 = call float @dx.op.unary.f32(i32 27, float %118)  ; Round_ni(value)
  %120 = fptoui float %119 to i32
  %121 = extractvalue %dx.types.CBufRet.i32 %87, 2
  %122 = and i32 %120, 31
  %123 = ashr i32 %121, %122
  %124 = add nsw i32 %123, -1
  %125 = sitofp i32 %124 to float
  %126 = fadd fast float %125, 1.000000e+00
  %127 = fptoui float %126 to i32
  %128 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %129 = extractvalue %dx.types.CBufRet.i32 %128, 1
  %130 = extractvalue %dx.types.CBufRet.i32 %128, 0
  %131 = and i32 %130, 255
  %132 = mul i32 %86, 3
  %133 = icmp eq i32 %131, 0
  br i1 %133, label %134, label %137

; <label>:134                                     ; preds = %84
  %135 = add i32 %132, 1
  %136 = add i32 %132, 2
  br label %161

; <label>:137                                     ; preds = %84
  %138 = icmp eq i32 %131, 2
  %139 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %20)  ; CreateHandleForLib(Resource)
  br i1 %138, label %140, label %154

; <label>:140                                     ; preds = %137
  %141 = mul i32 %86, 6
  %142 = add i32 %141, %129
  %143 = and i32 %142, -4
  %144 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %139, i32 %143, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %145 = extractvalue %dx.types.ResRet.i32 %144, 0
  %146 = extractvalue %dx.types.ResRet.i32 %144, 1
  %147 = icmp eq i32 %143, %142
  %148 = lshr i32 %145, 16
  %149 = and i32 %146, 65535
  br i1 %147, label %150, label %152

; <label>:150                                     ; preds = %140
  %151 = and i32 %145, 65535
  br label %161

; <label>:152                                     ; preds = %140
  %153 = lshr i32 %146, 16
  br label %161

; <label>:154                                     ; preds = %137
  %155 = mul i32 %131, %132
  %156 = add i32 %155, %129
  %157 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %139, i32 %156, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %158 = extractvalue %dx.types.ResRet.i32 %157, 0
  %159 = extractvalue %dx.types.ResRet.i32 %157, 1
  %160 = extractvalue %dx.types.ResRet.i32 %157, 2
  br label %161

; <label>:161                                     ; preds = %154, %152, %150, %134
  %162 = phi i32 [ %132, %134 ], [ %158, %154 ], [ %151, %150 ], [ %148, %152 ]
  %163 = phi i32 [ %135, %134 ], [ %159, %154 ], [ %148, %150 ], [ %149, %152 ]
  %164 = phi i32 [ %136, %134 ], [ %160, %154 ], [ %149, %150 ], [ %153, %152 ]
  %165 = getelementptr inbounds [3 x i32], [3 x i32]* %65, i32 0, i32 0
  store i32 %162, i32* %165, align 4
  %166 = getelementptr inbounds [3 x i32], [3 x i32]* %65, i32 0, i32 1
  store i32 %163, i32* %166, align 4
  %167 = getelementptr inbounds [3 x i32], [3 x i32]* %65, i32 0, i32 2
  store i32 %164, i32* %167, align 4
  %168 = getelementptr [3 x i32], [3 x i32]* %65, i32 0, i32 %85
  %169 = load i32, i32* %168, align 4, !tbaa !126, !noalias !128
  %170 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %171 = urem i32 %169, %127
  %172 = uitofp i32 %171 to float
  %173 = udiv i32 %169, %127
  %174 = uitofp i32 %173 to float
  %175 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %74, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %176 = extractvalue %dx.types.CBufRet.i32 %175, 0
  %177 = sitofp i32 %176 to float
  %178 = extractvalue %dx.types.CBufRet.i32 %175, 1
  %179 = sitofp i32 %178 to float
  %180 = and i32 %170, 2147483647
  %181 = mul i32 %180, 40
  %182 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %46)  ; CreateHandleForLib(Resource)
  %183 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %182, i32 %181, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %184 = extractvalue %dx.types.ResRet.f32 %183, 1
  %185 = bitcast float %184 to i32
  %186 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %75, i32 277)  ; CBufferLoadLegacy(handle,regIndex)
  %187 = extractvalue %dx.types.CBufRet.i32 %186, 0
  %188 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %189 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %188, i32 %185, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %190 = extractvalue %dx.types.ResRet.f32 %189, 0
  %191 = bitcast float %190 to i32
  %192 = and i32 %191, 1048575
  %193 = icmp eq i32 %192, 1048575
  br i1 %193, label %302, label %194, !dx.controlflow.hints !131

; <label>:194                                     ; preds = %161
  %195 = mul nuw nsw i32 %192, 40
  %196 = or i32 %195, 1
  %197 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %182, i32 %196, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %198 = extractvalue %dx.types.ResRet.f32 %197, 0
  %199 = extractvalue %dx.types.ResRet.f32 %197, 1
  %200 = extractvalue %dx.types.ResRet.f32 %197, 2
  %201 = add i32 %187, %185
  %202 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %188, i32 %201, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %203 = extractvalue %dx.types.ResRet.f32 %202, 0
  %204 = extractvalue %dx.types.ResRet.f32 %202, 1
  %205 = extractvalue %dx.types.ResRet.f32 %202, 2
  %206 = extractvalue %dx.types.ResRet.f32 %202, 3
  %207 = bitcast float %203 to i32
  %208 = bitcast float %204 to i32
  %209 = bitcast float %205 to i32
  %210 = bitcast float %206 to i32
  %211 = shl i32 %187, 1
  %212 = add i32 %211, %185
  %213 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %188, i32 %212, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %214 = extractvalue %dx.types.ResRet.f32 %213, 0
  %215 = extractvalue %dx.types.ResRet.f32 %213, 1
  %216 = extractvalue %dx.types.ResRet.f32 %213, 2
  %217 = and i32 %207, 65535
  %218 = uitofp i32 %217 to float
  %219 = lshr i32 %207, 16
  %220 = uitofp i32 %219 to float
  %221 = and i32 %208, 32767
  %222 = uitofp i32 %221 to float
  %223 = fadd fast float %218, -3.276800e+04
  %224 = fadd fast float %220, -3.276800e+04
  %225 = fadd fast float %222, -1.638400e+04
  %226 = fmul fast float %225, 0x3F06A0F8E0000000
  %227 = and i32 %208, 32768
  %228 = icmp ne i32 %227, 0
  %229 = fadd fast float %223, %224
  %230 = fmul fast float %229, 0x3F00002000000000
  %231 = fsub fast float %223, %224
  %232 = fmul fast float %231, 0x3F00002000000000
  %233 = call float @dx.op.unary.f32(i32 6, float %230)  ; FAbs(value)
  %234 = call float @dx.op.unary.f32(i32 6, float %232)  ; FAbs(value)
  %235 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %233, float %234)  ; Dot2(ax,ay,bx,by)
  %236 = fsub fast float 2.000000e+00, %235
  %237 = call float @dx.op.dot3.f32(i32 55, float %230, float %232, float %236, float %230, float %232, float %236)  ; Dot3(ax,ay,az,bx,by,bz)
  %238 = call float @dx.op.unary.f32(i32 25, float %237)  ; Rsqrt(value)
  %239 = fmul fast float %238, %230
  %240 = fmul fast float %238, %232
  %241 = fmul fast float %238, %236
  %242 = fadd fast float %241, 1.000000e+00
  %243 = fdiv fast float 1.000000e+00, %242
  %244 = fmul fast float %240, %239
  %245 = fmul fast float %244, %243
  %246 = fsub fast float -0.000000e+00, %245
  %247 = fmul fast float %239, %239
  %248 = fmul fast float %247, %243
  %249 = fsub fast float 1.000000e+00, %248
  %250 = fmul fast float %240, %240
  %251 = fmul fast float %250, %243
  %252 = fsub fast float 1.000000e+00, %251
  %253 = fmul fast float %226, %226
  %254 = fsub fast float 1.000000e+00, %253
  %255 = call float @dx.op.unary.f32(i32 24, float %254)  ; Sqrt(value)
  %256 = select i1 %228, float %226, float %255
  %257 = select i1 %228, float %255, float %226
  %258 = fmul fast float %249, %256
  %259 = fmul fast float %256, %246
  %260 = fmul fast float %256, %239
  %261 = fmul fast float %257, %246
  %262 = fmul fast float %252, %257
  %263 = fmul fast float %240, %257
  %264 = fsub fast float -0.000000e+00, %263
  %265 = fadd fast float %258, %261
  %266 = fadd fast float %259, %262
  %267 = fsub fast float %264, %260
  %268 = fmul fast float %267, %240
  %269 = fmul fast float %266, %241
  %270 = fsub fast float %268, %269
  %271 = fmul fast float %265, %241
  %272 = fmul fast float %267, %239
  %273 = fsub fast float %271, %272
  %274 = fmul fast float %266, %239
  %275 = fmul fast float %265, %240
  %276 = fsub fast float %274, %275
  %277 = lshr i32 %210, 16
  %278 = shl i32 %277, 23
  %279 = add i32 %278, -125829120
  %280 = bitcast i32 %279 to float
  %281 = lshr i32 %209, 16
  %282 = and i32 %209, 65535
  %283 = and i32 %210, 65535
  %284 = uitofp i32 %282 to float
  %285 = uitofp i32 %281 to float
  %286 = uitofp i32 %283 to float
  %287 = fadd fast float %284, -3.276800e+04
  %288 = fadd fast float %285, -3.276800e+04
  %289 = fadd fast float %286, -3.276800e+04
  %290 = fmul fast float %280, %287
  %291 = fmul fast float %280, %288
  %292 = fmul fast float %280, %289
  %293 = fmul fast float %265, %290
  %294 = fmul fast float %266, %290
  %295 = fmul fast float %267, %290
  %296 = fmul fast float %270, %291
  %297 = fmul fast float %273, %291
  %298 = fmul fast float %276, %291
  %299 = fmul fast float %239, %292
  %300 = fmul fast float %240, %292
  %301 = fmul fast float %241, %292
  br label %302

; <label>:302                                     ; preds = %194, %161
  %303 = phi float [ 0.000000e+00, %161 ], [ %198, %194 ]
  %304 = phi float [ 0.000000e+00, %161 ], [ %199, %194 ]
  %305 = phi float [ 0.000000e+00, %161 ], [ %200, %194 ]
  %306 = phi float [ 0.000000e+00, %161 ], [ %293, %194 ]
  %307 = phi float [ 0.000000e+00, %161 ], [ %294, %194 ]
  %308 = phi float [ 0.000000e+00, %161 ], [ %295, %194 ]
  %309 = phi float [ 0.000000e+00, %161 ], [ %296, %194 ]
  %310 = phi float [ 0.000000e+00, %161 ], [ %297, %194 ]
  %311 = phi float [ 0.000000e+00, %161 ], [ %298, %194 ]
  %312 = phi float [ 0.000000e+00, %161 ], [ %299, %194 ]
  %313 = phi float [ 0.000000e+00, %161 ], [ %300, %194 ]
  %314 = phi float [ 0.000000e+00, %161 ], [ %301, %194 ]
  %315 = phi float [ 0.000000e+00, %161 ], [ %214, %194 ]
  %316 = phi float [ 0.000000e+00, %161 ], [ %215, %194 ]
  %317 = phi float [ 0.000000e+00, %161 ], [ %216, %194 ]
  %318 = sub nsw i32 %95, %96
  %319 = add nsw i32 %318, %94
  %320 = add i32 %103, %319
  %321 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %110, i32 %320, i32 undef)  ; BufferLoad(srv,index,wot)
  %322 = extractvalue %dx.types.ResRet.f32 %321, 0
  %323 = select i1 %109, float %108, float %322
  %324 = fadd fast float %116, %323
  %325 = call float @dx.op.binary.f32(i32 36, float %324, float %99)  ; FMin(a,b)
  %326 = call float @dx.op.unary.f32(i32 27, float %325)  ; Round_ni(value)
  %327 = fptoui float %326 to i32
  %328 = and i32 %327, 31
  %329 = ashr i32 %121, %328
  %330 = add nsw i32 %329, -1
  %331 = sitofp i32 %330 to float
  %332 = fdiv fast float 1.000000e+00, %331
  %333 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %41)  ; CreateHandleForLib(Resource)
  %334 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %333, i32 %319, i32 undef)  ; BufferLoad(srv,index,wot)
  %335 = fmul fast float %332, %172
  %336 = fmul fast float %332, %174
  %337 = fadd fast float %335, %177
  %338 = fadd fast float %336, %179
  %339 = extractvalue %dx.types.CBufRet.i32 %87, 3
  %340 = sitofp i32 %339 to float
  %341 = fdiv fast float %337, %340
  %342 = fdiv fast float %338, %340
  %343 = fsub fast float 1.000000e+00, %341
  %344 = fmul fast float %342, 2.000000e+00
  %345 = fmul fast float %343, 2.000000e+00
  %346 = fmul fast float %325, %344
  %347 = fmul fast float %325, %345
  %348 = fsub fast float 1.000000e+00, %344
  %349 = fsub fast float 1.000000e+00, %345
  br label %350

; <label>:350                                     ; preds = %408, %302
  %351 = phi i32 [ -1, %302 ], [ %412, %408 ]
  %352 = phi i32 [ 0, %302 ], [ %410, %408 ]
  %353 = phi i32 [ 0, %302 ], [ %406, %408 ]
  %354 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %355 = extractvalue %dx.types.CBufRet.i32 %354, 0
  %356 = extractvalue %dx.types.CBufRet.i32 %354, 1
  %357 = add i32 %355, %352
  %358 = add i32 %356, %351
  %359 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %360 = extractvalue %dx.types.CBufRet.i32 %359, 2
  %361 = extractvalue %dx.types.CBufRet.i32 %359, 3
  %362 = call i32 @dx.op.binary.i32(i32 37, i32 %360, i32 %357)  ; IMax(a,b)
  %363 = call i32 @dx.op.binary.i32(i32 37, i32 %361, i32 %358)  ; IMax(a,b)
  %364 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %365 = extractvalue %dx.types.CBufRet.i32 %364, 0
  %366 = extractvalue %dx.types.CBufRet.i32 %364, 1
  %367 = add i32 %360, -1
  %368 = add i32 %367, %365
  %369 = add i32 %361, -1
  %370 = add i32 %369, %366
  %371 = call i32 @dx.op.binary.i32(i32 38, i32 %368, i32 %362)  ; IMin(a,b)
  %372 = call i32 @dx.op.binary.i32(i32 38, i32 %370, i32 %363)  ; IMin(a,b)
  %373 = sub nsw i32 %372, %361
  %374 = mul nsw i32 %373, %365
  %375 = sub i32 %371, %360
  %376 = add nsw i32 %375, %374
  %377 = extractvalue %dx.types.CBufRet.i32 %359, 0
  %378 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %43)  ; CreateHandleForLib(Resource)
  %379 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %378, i32 %377, i32 undef)  ; BufferLoad(srv,index,wot)
  %380 = extractvalue %dx.types.ResRet.i32 %379, 0
  %381 = add i32 %376, %380
  %382 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %383 = extractvalue %dx.types.CBufRet.f32 %382, 0
  %384 = fcmp fast oge float %383, 0.000000e+00
  %385 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %42)  ; CreateHandleForLib(Resource)
  %386 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %385, i32 %381, i32 undef)  ; BufferLoad(srv,index,wot)
  %387 = extractvalue %dx.types.ResRet.f32 %386, 0
  %388 = select i1 %384, float %383, float %387
  %389 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %390 = extractvalue %dx.types.CBufRet.i32 %389, 0
  %391 = sitofp i32 %390 to float
  %392 = add i32 %380, %319
  %393 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %385, i32 %392, i32 undef)  ; BufferLoad(srv,index,wot)
  %394 = extractvalue %dx.types.ResRet.f32 %393, 0
  %395 = select i1 %384, float %383, float %394
  %396 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %397 = extractvalue %dx.types.CBufRet.i32 %396, 1
  %398 = sitofp i32 %397 to float
  %399 = fadd fast float %398, %395
  %400 = call float @dx.op.binary.f32(i32 36, float %399, float %391)  ; FMin(a,b)
  %401 = call float @dx.op.binary.f32(i32 35, float %388, float %400)  ; FMax(a,b)
  %402 = getelementptr inbounds [4 x float], [4 x float]* %69, i32 0, i32 %353
  %403 = fadd fast float %398, %401
  %404 = select i1 %384, float %383, float %403
  %405 = call float @dx.op.binary.f32(i32 36, float %404, float %391)  ; FMin(a,b)
  store float %405, float* %402, align 4, !tbaa !122, !noalias !132
  %406 = add nuw nsw i32 %353, 1
  %407 = icmp eq i32 %406, 4
  br i1 %407, label %413, label %408

; <label>:408                                     ; preds = %350
  %409 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %406
  %410 = load i32, i32* %409, align 4
  %411 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %406
  %412 = load i32, i32* %411, align 4
  br label %350

; <label>:413                                     ; preds = %350
  %414 = uitofp i32 %327 to float
  %415 = extractvalue %dx.types.ResRet.f32 %334, 0
  %416 = fsub fast float 1.000000e+00, %342
  %417 = fmul fast float %341, 2.000000e+00
  %418 = fmul fast float %416, 2.000000e+00
  %419 = fmul fast float %325, %417
  %420 = fmul fast float %325, %418
  %421 = fsub fast float 1.000000e+00, %417
  %422 = fsub fast float 1.000000e+00, %418
  %423 = load float, float* %83, align 4, !tbaa !122, !noalias !132
  %424 = getelementptr inbounds [4 x float], [4 x float]* %69, i32 0, i32 1
  %425 = load float, float* %424, align 4, !tbaa !122, !noalias !132
  %426 = getelementptr inbounds [4 x float], [4 x float]* %69, i32 0, i32 2
  %427 = load float, float* %426, align 4, !tbaa !122, !noalias !132
  %428 = getelementptr inbounds [4 x float], [4 x float]* %69, i32 0, i32 3
  %429 = load float, float* %428, align 4, !tbaa !122, !noalias !132
  %430 = fmul fast float %423, %348
  %431 = fmul fast float %425, %421
  %432 = fmul fast float %427, %349
  %433 = fmul fast float %429, %422
  %434 = fadd fast float %430, %346
  %435 = fadd fast float %431, %419
  %436 = fadd fast float %432, %347
  %437 = fadd fast float %433, %420
  %438 = fadd fast float %337, %338
  %439 = fdiv fast float %438, %340
  %440 = fcmp fast ogt float %439, 1.000000e+00
  %441 = fcmp fast olt float %341, %342
  %442 = select i1 %441, float %437, float %436
  %443 = select i1 %441, float %435, float %434
  %444 = select i1 %440, float %442, float %443
  %445 = call float @dx.op.unary.f32(i32 27, float %444)  ; Round_ni(value)
  %446 = fsub fast float %444, %445
  %447 = fsub fast float %445, %414
  %448 = fsub fast float -0.000000e+00, %447
  %449 = call float @dx.op.unary.f32(i32 21, float %448)  ; Exp(value)
  %450 = fmul fast float %449, %172
  %451 = fmul fast float %449, %174
  %452 = call float @dx.op.unary.f32(i32 27, float %450)  ; Round_ni(value)
  %453 = call float @dx.op.unary.f32(i32 27, float %451)  ; Round_ni(value)
  %454 = fsub fast float -0.000000e+00, %445
  %455 = call float @dx.op.unary.f32(i32 21, float %454)  ; Exp(value)
  %456 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %457 = extractvalue %dx.types.CBufRet.f32 %456, 0
  %458 = fmul fast float %457, %455
  %459 = fadd fast float %458, -1.000000e+00
  %460 = fmul fast float %455, 5.000000e-01
  %461 = fmul fast float %460, %457
  %462 = call float @dx.op.binary.f32(i32 35, float %461, float 2.000000e+00)  ; FMax(a,b)
  %463 = fadd fast float %462, -1.000000e+00
  %464 = extractvalue %dx.types.CBufRet.f32 %456, 1
  %465 = fmul fast float %464, %459
  %466 = fmul fast float %464, %463
  %467 = fdiv fast float %452, %465
  %468 = fdiv fast float %453, %465
  %469 = fmul fast float %452, 5.000000e-01
  %470 = fmul fast float %453, 5.000000e-01
  %471 = call float @dx.op.unary.f32(i32 27, float %469)  ; Round_ni(value)
  %472 = call float @dx.op.unary.f32(i32 27, float %470)  ; Round_ni(value)
  %473 = fdiv fast float %471, %466
  %474 = fdiv fast float %472, %466
  %475 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %476 = extractvalue %dx.types.CBufRet.f32 %475, 0
  %477 = extractvalue %dx.types.CBufRet.f32 %475, 1
  %478 = fmul fast float %476, %467
  %479 = fmul fast float %477, %468
  %480 = extractvalue %dx.types.CBufRet.f32 %475, 2
  %481 = extractvalue %dx.types.CBufRet.f32 %475, 3
  %482 = fadd fast float %478, %480
  %483 = fadd fast float %479, %481
  %484 = fmul fast float %476, 5.000000e-01
  %485 = fmul fast float %477, 5.000000e-01
  %486 = fadd fast float %482, %484
  %487 = fadd fast float %483, %485
  %488 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %489 = extractvalue %dx.types.CBufRet.f32 %488, 0
  %490 = extractvalue %dx.types.CBufRet.f32 %488, 1
  %491 = fmul fast float %489, %177
  %492 = fmul fast float %490, %179
  %493 = fadd fast float %486, %491
  %494 = fadd fast float %487, %492
  %495 = fsub fast float %445, %415
  %496 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %40)  ; CreateHandleForLib(Resource)
  %497 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %17)  ; CreateHandleForLib(Resource)
  %498 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %496, %dx.types.Handle %497, float %493, float %494, float undef, float undef, i32 0, i32 0, i32 undef, float %495)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %499 = extractvalue %dx.types.ResRet.f32 %498, 0
  %500 = extractvalue %dx.types.ResRet.f32 %498, 1
  %501 = fmul fast float %499, 6.528000e+04
  %502 = fmul fast float %500, 2.550000e+02
  %503 = fadd fast float %502, -3.276800e+04
  %504 = fadd fast float %503, %501
  %505 = fmul fast float %476, %473
  %506 = fmul fast float %477, %474
  %507 = fadd fast float %505, %480
  %508 = fadd fast float %506, %481
  %509 = fadd fast float %507, %484
  %510 = fadd fast float %508, %485
  %511 = fadd fast float %509, %491
  %512 = fadd fast float %510, %492
  %513 = fsub fast float 1.000000e+00, %415
  %514 = fadd fast float %513, %445
  %515 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %496, %dx.types.Handle %497, float %511, float %512, float undef, float undef, i32 0, i32 0, i32 undef, float %514)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %516 = extractvalue %dx.types.ResRet.f32 %515, 0
  %517 = extractvalue %dx.types.ResRet.f32 %515, 1
  %518 = fmul fast float %516, 6.528000e+04
  %519 = fmul fast float %517, 2.550000e+02
  %520 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %521 = extractvalue %dx.types.CBufRet.f32 %520, 0
  %522 = extractvalue %dx.types.CBufRet.f32 %520, 1
  %523 = fmul fast float %521, %467
  %524 = fmul fast float %522, %468
  %525 = extractvalue %dx.types.CBufRet.f32 %520, 2
  %526 = extractvalue %dx.types.CBufRet.f32 %520, 3
  %527 = fadd fast float %523, %525
  %528 = fadd fast float %524, %526
  %529 = extractvalue %dx.types.CBufRet.f32 %488, 2
  %530 = fmul fast float %529, %177
  %531 = fmul fast float %529, %179
  %532 = fadd fast float %527, %530
  %533 = fadd fast float %528, %531
  %534 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %38)  ; CreateHandleForLib(Resource)
  %535 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %536 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %534, %dx.types.Handle %535, float %532, float %533, float undef, float undef, i32 0, i32 0, i32 undef, float %445)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %537 = extractvalue %dx.types.ResRet.f32 %536, 0
  %538 = extractvalue %dx.types.ResRet.f32 %536, 1
  %539 = extractvalue %dx.types.ResRet.f32 %536, 2
  %540 = extractvalue %dx.types.ResRet.f32 %536, 3
  %541 = fmul fast float %521, %473
  %542 = fmul fast float %522, %474
  %543 = fadd fast float %541, %525
  %544 = fadd fast float %542, %526
  %545 = fadd fast float %543, %530
  %546 = fadd fast float %544, %531
  %547 = fadd fast float %445, 1.000000e+00
  %548 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %534, %dx.types.Handle %535, float %545, float %546, float undef, float undef, i32 0, i32 0, i32 undef, float %547)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %549 = extractvalue %dx.types.ResRet.f32 %548, 0
  %550 = extractvalue %dx.types.ResRet.f32 %548, 1
  %551 = extractvalue %dx.types.ResRet.f32 %548, 2
  %552 = extractvalue %dx.types.ResRet.f32 %548, 3
  %553 = fmul fast float %537, 6.528000e+04
  %554 = fmul fast float %538, 2.550000e+02
  %555 = fadd fast float %554, -3.276800e+04
  %556 = fadd fast float %555, %553
  %557 = fmul fast float %556, 3.906250e-03
  %558 = fmul fast float %539, 6.528000e+04
  %559 = fmul fast float %540, 2.550000e+02
  %560 = fadd fast float %559, -3.276800e+04
  %561 = fadd fast float %560, %558
  %562 = fmul fast float %561, 3.906250e-03
  %563 = fmul fast float %549, 6.528000e+04
  %564 = fmul fast float %550, 2.550000e+02
  %565 = fadd fast float %564, -3.276800e+04
  %566 = fadd fast float %565, %563
  %567 = fmul fast float %566, 3.906250e-03
  %568 = fmul fast float %551, 6.528000e+04
  %569 = fmul fast float %552, 2.550000e+02
  %570 = fadd fast float %569, -3.276800e+04
  %571 = fadd fast float %570, %568
  %572 = fmul fast float %571, 3.906250e-03
  %573 = fadd fast float %557, %467
  %574 = fadd fast float %562, %468
  %575 = fsub fast float %473, %573
  %576 = fadd fast float %575, %567
  %577 = fsub fast float %474, %574
  %578 = fadd fast float %577, %572
  %579 = fsub fast float -3.276800e+04, %504
  %580 = fadd fast float %579, %519
  %581 = fadd fast float %580, %518
  %582 = fmul fast float %576, %446
  %583 = fmul fast float %578, %446
  %584 = fmul fast float %581, %446
  %585 = fadd fast float %584, %504
  %586 = fmul fast float %585, 7.812500e-03
  %587 = extractvalue %dx.types.CBufRet.f32 %488, 3
  %588 = fmul fast float %587, %177
  %589 = fmul fast float %587, %179
  %590 = fadd fast float %588, %573
  %591 = fadd fast float %590, %582
  %592 = fadd fast float %589, %574
  %593 = fadd fast float %592, %583
  %594 = fmul fast float %591, %306
  %595 = fmul fast float %591, %307
  %596 = fmul fast float %591, %308
  %597 = fmul fast float %593, %309
  %598 = fmul fast float %593, %310
  %599 = fmul fast float %593, %311
  %600 = fmul fast float %586, %312
  %601 = fmul fast float %586, %313
  %602 = fmul fast float %586, %314
  %603 = fmul fast float %303, 2.097152e+06
  %604 = fmul fast float %304, 2.097152e+06
  %605 = fmul fast float %305, 2.097152e+06
  %606 = fadd fast float %315, %603
  %607 = fadd fast float %606, %600
  %608 = fadd fast float %607, %597
  %609 = fadd fast float %608, %594
  %610 = fadd fast float %316, %604
  %611 = fadd fast float %610, %601
  %612 = fadd fast float %611, %598
  %613 = fadd fast float %612, %595
  %614 = fadd fast float %317, %605
  %615 = fadd fast float %614, %602
  %616 = fadd fast float %615, %599
  %617 = fadd fast float %616, %596
  %618 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 %85
  %619 = getelementptr [3 x float], [3 x float]* %63, i32 0, i32 %85
  %620 = getelementptr [3 x float], [3 x float]* %64, i32 0, i32 %85
  store float %609, float* %618, align 4
  store float %613, float* %619, align 4
  store float %617, float* %620, align 4
  %621 = add nuw nsw i32 %85, 1
  %622 = icmp eq i32 %621, 3
  br i1 %622, label %623, label %84

; <label>:623                                     ; preds = %413
  %624 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 1
  %625 = getelementptr [3 x float], [3 x float]* %63, i32 0, i32 1
  %626 = getelementptr [3 x float], [3 x float]* %64, i32 0, i32 1
  %627 = load float, float* %624, align 4
  %628 = load float, float* %625, align 4
  %629 = load float, float* %626, align 4
  %630 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 0
  %631 = getelementptr [3 x float], [3 x float]* %63, i32 0, i32 0
  %632 = getelementptr [3 x float], [3 x float]* %64, i32 0, i32 0
  %633 = load float, float* %630, align 4
  %634 = load float, float* %631, align 4
  %635 = load float, float* %632, align 4
  %636 = fsub fast float %627, %633
  %637 = fsub fast float %628, %634
  %638 = fsub fast float %629, %635
  %639 = getelementptr [3 x float], [3 x float]* %62, i32 0, i32 2
  %640 = getelementptr [3 x float], [3 x float]* %63, i32 0, i32 2
  %641 = getelementptr [3 x float], [3 x float]* %64, i32 0, i32 2
  %642 = load float, float* %639, align 4
  %643 = load float, float* %640, align 4
  %644 = load float, float* %641, align 4
  %645 = fsub fast float %642, %633
  %646 = fsub fast float %643, %634
  %647 = fsub fast float %644, %635
  %648 = fmul fast float %646, %638
  %649 = fmul fast float %647, %637
  %650 = fsub fast float %648, %649
  %651 = fmul fast float %647, %636
  %652 = fmul fast float %645, %638
  %653 = fsub fast float %651, %652
  %654 = fmul fast float %645, %637
  %655 = fmul fast float %646, %636
  %656 = fsub fast float %654, %655
  %657 = call float @dx.op.dot3.f32(i32 55, float %650, float %653, float %656, float %650, float %653, float %656)  ; Dot3(ax,ay,az,bx,by,bz)
  %658 = fcmp fast oeq float %657, 0.000000e+00
  %659 = uitofp i1 %658 to float
  %660 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %661 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %662 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %663 = fsub fast float -0.000000e+00, %660
  %664 = fsub fast float -0.000000e+00, %661
  %665 = fsub fast float -0.000000e+00, %662
  %666 = call float @dx.op.unary.f32(i32 25, float %657)  ; Rsqrt(value)
  %667 = fmul fast float %666, %650
  %668 = fmul fast float %666, %653
  %669 = fmul fast float %666, %656
  %670 = fsub fast float %663, %667
  %671 = fsub fast float %664, %668
  %672 = fsub fast float %665, %669
  %673 = fmul fast float %670, %659
  %674 = fmul fast float %671, %659
  %675 = fmul fast float %672, %659
  %676 = fadd fast float %673, %667
  %677 = fadd fast float %674, %668
  %678 = fadd fast float %675, %669
  %679 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %680 = extractvalue %dx.types.CBufRet.i32 %128, 3
  %681 = sub i32 %679, %680
  %682 = call i32 @dx.op.legacyF32ToF16(i32 130, float %676)  ; LegacyF32ToF16(value)
  %683 = shl i32 %682, 16
  %684 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  %685 = load i32, i32* %684, align 4, !tbaa !126
  %686 = or i32 %685, %683
  store i32 %686, i32* %684, align 4, !tbaa !126
  %687 = call i32 @dx.op.legacyF32ToF16(i32 130, float %677)  ; LegacyF32ToF16(value)
  %688 = call i32 @dx.op.legacyF32ToF16(i32 130, float %678)  ; LegacyF32ToF16(value)
  %689 = shl i32 %688, 16
  %690 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  %691 = or i32 %689, %687
  store i32 %691, i32* %690, align 4, !tbaa !126
  %692 = mul i32 %170, 40
  %693 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %46)  ; CreateHandleForLib(Resource)
  %694 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %693, i32 %692, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %695 = extractvalue %dx.types.ResRet.f32 %694, 2
  %696 = bitcast float %695 to i32
  %697 = icmp eq i32 %696, 1
  %698 = select i1 %697, i32 0, i32 %681
  %699 = extractvalue %dx.types.ResRet.f32 %694, 1
  %700 = bitcast float %699 to i32
  %701 = add i32 %700, %698
  %702 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 %701, i32* %702, align 4, !tbaa !126
  br label %703

; <label>:703                                     ; preds = %623, %0
  %704 = and i32 %79, 8388608
  %705 = icmp eq i32 %704, 0
  br i1 %705, label %706, label %1969

; <label>:706                                     ; preds = %703
  %707 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %708 = load float, float* %707, align 4, !tbaa !122
  %709 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %710 = extractvalue %dx.types.CBufRet.f32 %709, 0
  %711 = extractvalue %dx.types.CBufRet.f32 %709, 2
  %712 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %713 = extractvalue %dx.types.CBufRet.f32 %712, 0
  %714 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 182)  ; CBufferLoadLegacy(handle,regIndex)
  %715 = extractvalue %dx.types.CBufRet.f32 %714, 1
  %716 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %717 = load i32, i32* %716, align 4, !tbaa !126, !noalias !135
  %718 = and i32 %717, 65535
  %719 = lshr i32 %717, 16
  %720 = call float @dx.op.legacyF16ToF32(i32 131, i32 %719)  ; LegacyF16ToF32(value)
  %721 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %722 = fmul fast float %721, %720
  %723 = getelementptr inbounds %struct.FDefaultAttributes, %struct.FDefaultAttributes* %Attributes, i32 0, i32 0
  %724 = load <2 x float>, <2 x float>* %723, align 4, !noalias !138
  %725 = extractelement <2 x float> %724, i32 0
  %726 = fsub fast float 1.000000e+00, %725
  %727 = extractelement <2 x float> %724, i32 1
  %728 = fsub fast float %726, %727
  %729 = getelementptr inbounds [3 x float], [3 x float]* %68, i32 0, i32 0
  store float %728, float* %729, align 4
  %730 = getelementptr inbounds [3 x float], [3 x float]* %68, i32 0, i32 1
  store float %725, float* %730, align 4
  %731 = getelementptr inbounds [3 x float], [3 x float]* %68, i32 0, i32 2
  store float %727, float* %731, align 4
  br label %732

; <label>:732                                     ; preds = %938, %706
  %733 = phi float [ 0.000000e+00, %706 ], [ %1108, %938 ]
  %734 = phi float [ 0.000000e+00, %706 ], [ %1109, %938 ]
  %735 = phi float [ 0.000000e+00, %706 ], [ %1110, %938 ]
  %736 = phi float [ 0.000000e+00, %706 ], [ %1111, %938 ]
  %737 = phi float [ 0.000000e+00, %706 ], [ %1102, %938 ]
  %738 = phi float [ 0.000000e+00, %706 ], [ %1103, %938 ]
  %739 = phi i32 [ 0, %706 ], [ %1112, %938 ]
  %740 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %741 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.i32 %741, 1
  %743 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %744 = extractvalue %dx.types.CBufRet.i32 %743, 3
  %745 = sub nsw i32 %742, %744
  %746 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %747 = extractvalue %dx.types.CBufRet.i32 %746, 0
  %748 = mul nsw i32 %745, %747
  %749 = extractvalue %dx.types.CBufRet.i32 %741, 0
  %750 = extractvalue %dx.types.CBufRet.i32 %743, 2
  %751 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %752 = extractvalue %dx.types.CBufRet.i32 %751, 0
  %753 = sitofp i32 %752 to float
  %754 = extractvalue %dx.types.CBufRet.i32 %743, 0
  %755 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %43)  ; CreateHandleForLib(Resource)
  %756 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %755, i32 %754, i32 undef)  ; BufferLoad(srv,index,wot)
  %757 = extractvalue %dx.types.ResRet.i32 %756, 0
  %758 = add i32 %748, %749
  %759 = sub i32 %758, %750
  %760 = add i32 %759, %757
  %761 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %762 = extractvalue %dx.types.CBufRet.f32 %761, 0
  %763 = fcmp fast oge float %762, 0.000000e+00
  %764 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %42)  ; CreateHandleForLib(Resource)
  %765 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %764, i32 %760, i32 undef)  ; BufferLoad(srv,index,wot)
  %766 = extractvalue %dx.types.ResRet.f32 %765, 0
  %767 = select i1 %763, float %762, float %766
  %768 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %769 = extractvalue %dx.types.CBufRet.i32 %768, 1
  %770 = sitofp i32 %769 to float
  %771 = fadd fast float %770, %767
  %772 = call float @dx.op.binary.f32(i32 36, float %771, float %753)  ; FMin(a,b)
  %773 = call float @dx.op.unary.f32(i32 27, float %772)  ; Round_ni(value)
  %774 = fptoui float %773 to i32
  %775 = extractvalue %dx.types.CBufRet.i32 %741, 2
  %776 = and i32 %774, 31
  %777 = ashr i32 %775, %776
  %778 = add nsw i32 %777, -1
  %779 = sitofp i32 %778 to float
  %780 = fadd fast float %779, 1.000000e+00
  %781 = fptoui float %780 to i32
  %782 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %783 = extractvalue %dx.types.CBufRet.i32 %782, 1
  %784 = extractvalue %dx.types.CBufRet.i32 %782, 0
  %785 = and i32 %784, 255
  %786 = mul i32 %740, 3
  %787 = icmp eq i32 %785, 0
  br i1 %787, label %788, label %791

; <label>:788                                     ; preds = %732
  %789 = add i32 %786, 1
  %790 = add i32 %786, 2
  br label %815

; <label>:791                                     ; preds = %732
  %792 = icmp eq i32 %785, 2
  %793 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %20)  ; CreateHandleForLib(Resource)
  br i1 %792, label %794, label %808

; <label>:794                                     ; preds = %791
  %795 = mul i32 %740, 6
  %796 = add i32 %795, %783
  %797 = and i32 %796, -4
  %798 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %793, i32 %797, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %799 = extractvalue %dx.types.ResRet.i32 %798, 0
  %800 = extractvalue %dx.types.ResRet.i32 %798, 1
  %801 = icmp eq i32 %797, %796
  %802 = lshr i32 %799, 16
  %803 = and i32 %800, 65535
  br i1 %801, label %804, label %806

; <label>:804                                     ; preds = %794
  %805 = and i32 %799, 65535
  br label %815

; <label>:806                                     ; preds = %794
  %807 = lshr i32 %800, 16
  br label %815

; <label>:808                                     ; preds = %791
  %809 = mul i32 %785, %786
  %810 = add i32 %809, %783
  %811 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %793, i32 %810, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %812 = extractvalue %dx.types.ResRet.i32 %811, 0
  %813 = extractvalue %dx.types.ResRet.i32 %811, 1
  %814 = extractvalue %dx.types.ResRet.i32 %811, 2
  br label %815

; <label>:815                                     ; preds = %808, %806, %804, %788
  %816 = phi i32 [ %786, %788 ], [ %812, %808 ], [ %805, %804 ], [ %802, %806 ]
  %817 = phi i32 [ %789, %788 ], [ %813, %808 ], [ %802, %804 ], [ %803, %806 ]
  %818 = phi i32 [ %790, %788 ], [ %814, %808 ], [ %803, %804 ], [ %807, %806 ]
  %819 = getelementptr inbounds [3 x i32], [3 x i32]* %66, i32 0, i32 0
  store i32 %816, i32* %819, align 4
  %820 = getelementptr inbounds [3 x i32], [3 x i32]* %66, i32 0, i32 1
  store i32 %817, i32* %820, align 4
  %821 = getelementptr inbounds [3 x i32], [3 x i32]* %66, i32 0, i32 2
  store i32 %818, i32* %821, align 4
  %822 = getelementptr [3 x i32], [3 x i32]* %66, i32 0, i32 %739
  %823 = load i32, i32* %822, align 4, !tbaa !126, !noalias !139
  %824 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %825 = urem i32 %823, %781
  %826 = uitofp i32 %825 to float
  %827 = udiv i32 %823, %781
  %828 = uitofp i32 %827 to float
  %829 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %74, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %830 = extractvalue %dx.types.CBufRet.i32 %829, 0
  %831 = sitofp i32 %830 to float
  %832 = extractvalue %dx.types.CBufRet.i32 %829, 1
  %833 = sitofp i32 %832 to float
  %834 = and i32 %824, 2147483647
  %835 = mul i32 %834, 40
  %836 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %46)  ; CreateHandleForLib(Resource)
  %837 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %836, i32 %835, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %838 = extractvalue %dx.types.ResRet.f32 %837, 1
  %839 = bitcast float %838 to i32
  %840 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %841 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %840, i32 %839, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %842 = extractvalue %dx.types.ResRet.f32 %841, 0
  %843 = bitcast float %842 to i32
  %844 = and i32 %843, 1048575
  %845 = sub nsw i32 %749, %750
  %846 = add nsw i32 %845, %748
  %847 = add i32 %757, %846
  %848 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %764, i32 %847, i32 undef)  ; BufferLoad(srv,index,wot)
  %849 = extractvalue %dx.types.ResRet.f32 %848, 0
  %850 = select i1 %763, float %762, float %849
  %851 = fadd fast float %770, %850
  %852 = call float @dx.op.binary.f32(i32 36, float %851, float %753)  ; FMin(a,b)
  %853 = call float @dx.op.unary.f32(i32 27, float %852)  ; Round_ni(value)
  %854 = fptoui float %853 to i32
  %855 = and i32 %854, 31
  %856 = ashr i32 %775, %855
  %857 = add nsw i32 %856, -1
  %858 = sitofp i32 %857 to float
  %859 = fdiv fast float 1.000000e+00, %858
  %860 = fmul fast float %859, %826
  %861 = fmul fast float %859, %828
  %862 = fadd fast float %860, %831
  %863 = fadd fast float %861, %833
  %864 = extractvalue %dx.types.CBufRet.i32 %741, 3
  %865 = sitofp i32 %864 to float
  %866 = fdiv fast float %862, %865
  %867 = fdiv fast float %863, %865
  %868 = fsub fast float 1.000000e+00, %866
  %869 = fmul fast float %867, 2.000000e+00
  %870 = fmul fast float %868, 2.000000e+00
  %871 = fmul fast float %852, %869
  %872 = fmul fast float %852, %870
  %873 = fsub fast float 1.000000e+00, %869
  %874 = fsub fast float 1.000000e+00, %870
  br label %875

; <label>:875                                     ; preds = %933, %815
  %876 = phi i32 [ -1, %815 ], [ %937, %933 ]
  %877 = phi i32 [ 0, %815 ], [ %935, %933 ]
  %878 = phi i32 [ 0, %815 ], [ %931, %933 ]
  %879 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %880 = extractvalue %dx.types.CBufRet.i32 %879, 0
  %881 = extractvalue %dx.types.CBufRet.i32 %879, 1
  %882 = add i32 %880, %877
  %883 = add i32 %881, %876
  %884 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %885 = extractvalue %dx.types.CBufRet.i32 %884, 2
  %886 = extractvalue %dx.types.CBufRet.i32 %884, 3
  %887 = call i32 @dx.op.binary.i32(i32 37, i32 %885, i32 %882)  ; IMax(a,b)
  %888 = call i32 @dx.op.binary.i32(i32 37, i32 %886, i32 %883)  ; IMax(a,b)
  %889 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %73, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %890 = extractvalue %dx.types.CBufRet.i32 %889, 0
  %891 = extractvalue %dx.types.CBufRet.i32 %889, 1
  %892 = add i32 %885, -1
  %893 = add i32 %892, %890
  %894 = add i32 %886, -1
  %895 = add i32 %894, %891
  %896 = call i32 @dx.op.binary.i32(i32 38, i32 %893, i32 %887)  ; IMin(a,b)
  %897 = call i32 @dx.op.binary.i32(i32 38, i32 %895, i32 %888)  ; IMin(a,b)
  %898 = sub nsw i32 %897, %886
  %899 = mul nsw i32 %898, %890
  %900 = sub i32 %896, %885
  %901 = add nsw i32 %900, %899
  %902 = extractvalue %dx.types.CBufRet.i32 %884, 0
  %903 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %43)  ; CreateHandleForLib(Resource)
  %904 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %903, i32 %902, i32 undef)  ; BufferLoad(srv,index,wot)
  %905 = extractvalue %dx.types.ResRet.i32 %904, 0
  %906 = add i32 %901, %905
  %907 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %908 = extractvalue %dx.types.CBufRet.f32 %907, 0
  %909 = fcmp fast oge float %908, 0.000000e+00
  %910 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %42)  ; CreateHandleForLib(Resource)
  %911 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %910, i32 %906, i32 undef)  ; BufferLoad(srv,index,wot)
  %912 = extractvalue %dx.types.ResRet.f32 %911, 0
  %913 = select i1 %909, float %908, float %912
  %914 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %72, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %915 = extractvalue %dx.types.CBufRet.i32 %914, 0
  %916 = sitofp i32 %915 to float
  %917 = add i32 %905, %846
  %918 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %910, i32 %917, i32 undef)  ; BufferLoad(srv,index,wot)
  %919 = extractvalue %dx.types.ResRet.f32 %918, 0
  %920 = select i1 %909, float %908, float %919
  %921 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %75, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %922 = extractvalue %dx.types.CBufRet.i32 %921, 1
  %923 = sitofp i32 %922 to float
  %924 = fadd fast float %923, %920
  %925 = call float @dx.op.binary.f32(i32 36, float %924, float %916)  ; FMin(a,b)
  %926 = call float @dx.op.binary.f32(i32 35, float %913, float %925)  ; FMax(a,b)
  %927 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 %878
  %928 = fadd fast float %923, %926
  %929 = select i1 %909, float %908, float %928
  %930 = call float @dx.op.binary.f32(i32 36, float %929, float %916)  ; FMin(a,b)
  store float %930, float* %927, align 4, !tbaa !122, !noalias !84
  %931 = add nuw nsw i32 %878, 1
  %932 = icmp eq i32 %931, 4
  br i1 %932, label %938, label %933

; <label>:933                                     ; preds = %875
  %934 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %931
  %935 = load i32, i32* %934, align 4
  %936 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %931
  %937 = load i32, i32* %936, align 4
  br label %875

; <label>:938                                     ; preds = %875
  %939 = uitofp i32 %854 to float
  %940 = fsub fast float 1.000000e+00, %867
  %941 = fmul fast float %866, 2.000000e+00
  %942 = fmul fast float %940, 2.000000e+00
  %943 = fmul fast float %852, %941
  %944 = fmul fast float %852, %942
  %945 = fsub fast float 1.000000e+00, %941
  %946 = fsub fast float 1.000000e+00, %942
  %947 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 0
  %948 = load float, float* %947, align 4, !tbaa !122, !noalias !84
  %949 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 1
  %950 = load float, float* %949, align 4, !tbaa !122, !noalias !84
  %951 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 2
  %952 = load float, float* %951, align 4, !tbaa !122, !noalias !84
  %953 = getelementptr inbounds [4 x float], [4 x float]* %67, i32 0, i32 3
  %954 = load float, float* %953, align 4, !tbaa !122, !noalias !84
  %955 = fmul fast float %948, %873
  %956 = fmul fast float %950, %945
  %957 = fmul fast float %952, %874
  %958 = fmul fast float %954, %946
  %959 = fadd fast float %955, %871
  %960 = fadd fast float %956, %943
  %961 = fadd fast float %957, %872
  %962 = fadd fast float %958, %944
  %963 = fadd fast float %862, %863
  %964 = fdiv fast float %963, %865
  %965 = fcmp fast ogt float %964, 1.000000e+00
  %966 = fcmp fast olt float %866, %867
  %967 = select i1 %966, float %962, float %961
  %968 = select i1 %966, float %960, float %959
  %969 = select i1 %965, float %967, float %968
  %970 = call float @dx.op.unary.f32(i32 27, float %969)  ; Round_ni(value)
  %971 = fsub fast float %969, %970
  %972 = fsub fast float %970, %939
  %973 = fsub fast float -0.000000e+00, %972
  %974 = call float @dx.op.unary.f32(i32 21, float %973)  ; Exp(value)
  %975 = fmul fast float %974, %826
  %976 = fmul fast float %974, %828
  %977 = call float @dx.op.unary.f32(i32 27, float %975)  ; Round_ni(value)
  %978 = call float @dx.op.unary.f32(i32 27, float %976)  ; Round_ni(value)
  %979 = fsub fast float -0.000000e+00, %970
  %980 = call float @dx.op.unary.f32(i32 21, float %979)  ; Exp(value)
  %981 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %982 = extractvalue %dx.types.CBufRet.f32 %981, 0
  %983 = fmul fast float %982, %980
  %984 = fadd fast float %983, -1.000000e+00
  %985 = fmul fast float %980, 5.000000e-01
  %986 = fmul fast float %985, %982
  %987 = call float @dx.op.binary.f32(i32 35, float %986, float 2.000000e+00)  ; FMax(a,b)
  %988 = fadd fast float %987, -1.000000e+00
  %989 = extractvalue %dx.types.CBufRet.f32 %981, 1
  %990 = fmul fast float %989, %984
  %991 = fmul fast float %989, %988
  %992 = fdiv fast float %977, %990
  %993 = fdiv fast float %978, %990
  %994 = fmul fast float %977, 5.000000e-01
  %995 = fmul fast float %978, 5.000000e-01
  %996 = call float @dx.op.unary.f32(i32 27, float %994)  ; Round_ni(value)
  %997 = call float @dx.op.unary.f32(i32 27, float %995)  ; Round_ni(value)
  %998 = fdiv fast float %996, %991
  %999 = fdiv fast float %997, %991
  %1000 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1001 = extractvalue %dx.types.CBufRet.f32 %1000, 0
  %1002 = extractvalue %dx.types.CBufRet.f32 %1000, 1
  %1003 = fmul fast float %1001, %992
  %1004 = fmul fast float %1002, %993
  %1005 = extractvalue %dx.types.CBufRet.f32 %1000, 2
  %1006 = extractvalue %dx.types.CBufRet.f32 %1000, 3
  %1007 = fadd fast float %1003, %1005
  %1008 = fadd fast float %1004, %1006
  %1009 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1010 = extractvalue %dx.types.CBufRet.f32 %1009, 2
  %1011 = fmul fast float %1010, %831
  %1012 = fmul fast float %1010, %833
  %1013 = fadd fast float %1007, %1011
  %1014 = fadd fast float %1008, %1012
  %1015 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %38)  ; CreateHandleForLib(Resource)
  %1016 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %1017 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1015, %dx.types.Handle %1016, float %1013, float %1014, float undef, float undef, i32 0, i32 0, i32 undef, float %970)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1018 = extractvalue %dx.types.ResRet.f32 %1017, 0
  %1019 = extractvalue %dx.types.ResRet.f32 %1017, 1
  %1020 = extractvalue %dx.types.ResRet.f32 %1017, 2
  %1021 = extractvalue %dx.types.ResRet.f32 %1017, 3
  %1022 = fmul fast float %1001, %998
  %1023 = fmul fast float %1002, %999
  %1024 = fadd fast float %1022, %1005
  %1025 = fadd fast float %1023, %1006
  %1026 = fadd fast float %1024, %1011
  %1027 = fadd fast float %1025, %1012
  %1028 = fadd fast float %970, 1.000000e+00
  %1029 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1015, %dx.types.Handle %1016, float %1026, float %1027, float undef, float undef, i32 0, i32 0, i32 undef, float %1028)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1030 = extractvalue %dx.types.ResRet.f32 %1029, 0
  %1031 = extractvalue %dx.types.ResRet.f32 %1029, 1
  %1032 = extractvalue %dx.types.ResRet.f32 %1029, 2
  %1033 = extractvalue %dx.types.ResRet.f32 %1029, 3
  %1034 = fmul fast float %1018, 6.528000e+04
  %1035 = fmul fast float %1019, 2.550000e+02
  %1036 = fadd fast float %1035, -3.276800e+04
  %1037 = fadd fast float %1036, %1034
  %1038 = fmul fast float %1037, 3.906250e-03
  %1039 = fmul fast float %1020, 6.528000e+04
  %1040 = fmul fast float %1021, 2.550000e+02
  %1041 = fadd fast float %1040, -3.276800e+04
  %1042 = fadd fast float %1041, %1039
  %1043 = fmul fast float %1042, 3.906250e-03
  %1044 = fmul fast float %1030, 6.528000e+04
  %1045 = fmul fast float %1031, 2.550000e+02
  %1046 = fadd fast float %1045, -3.276800e+04
  %1047 = fadd fast float %1046, %1044
  %1048 = fmul fast float %1047, 3.906250e-03
  %1049 = fmul fast float %1032, 6.528000e+04
  %1050 = fmul fast float %1033, 2.550000e+02
  %1051 = fadd fast float %1050, -3.276800e+04
  %1052 = fadd fast float %1051, %1049
  %1053 = fadd fast float %1038, %992
  %1054 = fadd fast float %1043, %993
  %1055 = fsub fast float %998, %1053
  %1056 = fadd fast float %1055, %1048
  %1057 = fsub fast float %999, %1054
  %1058 = fmul fast float %1056, %971
  %1059 = fadd fast float %1058, %1053
  %1060 = extractvalue %dx.types.CBufRet.f32 %981, 2
  %1061 = extractvalue %dx.types.CBufRet.f32 %981, 3
  %1062 = extractvalue %dx.types.CBufRet.f32 %1009, 3
  %1063 = fmul fast float %1062, %831
  %1064 = fmul fast float %1062, %833
  %1065 = fadd fast float %1063, %1060
  %1066 = fadd fast float %1064, %1061
  %1067 = fmul fast float %1059, %1001
  %1068 = fadd fast float %1011, %1005
  %1069 = fadd fast float %1012, %1006
  %1070 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1071 = extractvalue %dx.types.CBufRet.f32 %1070, 0
  %1072 = fmul fast float %1059, %1071
  %1073 = extractvalue %dx.types.CBufRet.f32 %1070, 2
  %1074 = fadd fast float %1072, %1073
  %1075 = fmul fast float %1071, 5.000000e-01
  %1076 = fadd fast float %1074, %1075
  %1077 = extractvalue %dx.types.CBufRet.f32 %1009, 0
  %1078 = fmul fast float %1077, %831
  %1079 = fadd fast float %1076, %1078
  %1080 = fmul fast float %1052, 3.906250e-03
  %1081 = fadd fast float %1057, %1080
  %1082 = fmul fast float %1081, %971
  %1083 = fadd fast float %1082, %1054
  %1084 = fadd fast float %1065, %1059
  %1085 = fadd fast float %1066, %1083
  %1086 = fmul fast float %1083, %1002
  %1087 = fadd fast float %1068, %1067
  %1088 = fadd fast float %1069, %1086
  %1089 = extractvalue %dx.types.CBufRet.f32 %1070, 1
  %1090 = fmul fast float %1083, %1089
  %1091 = extractvalue %dx.types.CBufRet.f32 %1070, 3
  %1092 = fadd fast float %1090, %1091
  %1093 = fmul fast float %1089, 5.000000e-01
  %1094 = fadd fast float %1092, %1093
  %1095 = extractvalue %dx.types.CBufRet.f32 %1009, 1
  %1096 = fmul fast float %1095, %833
  %1097 = fadd fast float %1094, %1096
  %1098 = getelementptr [3 x float], [3 x float]* %68, i32 0, i32 %739
  %1099 = load float, float* %1098, align 4, !tbaa !122, !noalias !138
  %1100 = fmul fast float %1099, %1084
  %1101 = fmul fast float %1099, %1085
  %1102 = fadd fast float %1100, %737
  %1103 = fadd fast float %1101, %738
  %1104 = fmul fast float %1099, %1087
  %1105 = fmul fast float %1099, %1088
  %1106 = fmul fast float %1099, %1079
  %1107 = fmul fast float %1099, %1097
  %1108 = fadd fast float %1104, %733
  %1109 = fadd fast float %1105, %734
  %1110 = fadd fast float %1106, %735
  %1111 = fadd fast float %1107, %736
  %1112 = add nuw nsw i32 %739, 1
  %1113 = icmp eq i32 %1112, 3
  br i1 %1113, label %1114, label %732

; <label>:1114                                    ; preds = %938
  %1115 = extractvalue %dx.types.CBufRet.f32 %709, 1
  %1116 = extractvalue %dx.types.CBufRet.f32 %709, 3
  %1117 = extractvalue %dx.types.CBufRet.f32 %712, 1
  %1118 = extractvalue %dx.types.CBufRet.f32 %714, 0
  %1119 = extractvalue %dx.types.CBufRet.f32 %714, 2
  %1120 = call float @dx.op.legacyF16ToF32(i32 131, i32 %718)  ; LegacyF16ToF32(value)
  %1121 = fadd fast float %722, %1120
  %1122 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %39)  ; CreateHandleForLib(Resource)
  %1123 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %16)  ; CreateHandleForLib(Resource)
  %1124 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1122, %dx.types.Handle %1123, float %1110, float %1111, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1125 = extractvalue %dx.types.ResRet.f32 %1124, 2
  %1126 = extractvalue %dx.types.ResRet.f32 %1124, 3
  %1127 = fmul fast float %1125, 2.000000e+00
  %1128 = fmul fast float %1126, 2.000000e+00
  %1129 = fadd fast float %1127, -1.000000e+00
  %1130 = fadd fast float %1128, -1.000000e+00
  %1131 = call float @dx.op.dot2.f32(i32 54, float %1129, float %1130, float %1129, float %1130)  ; Dot2(ax,ay,bx,by)
  %1132 = fsub fast float 1.000000e+00, %1131
  %1133 = call float @dx.op.binary.f32(i32 35, float %1132, float 0.000000e+00)  ; FMax(a,b)
  %1134 = call float @dx.op.unary.f32(i32 24, float %1133)  ; Sqrt(value)
  %1135 = fsub fast float -0.000000e+00, %1129
  %1136 = call float @dx.op.dot3.f32(i32 55, float %1134, float 0.000000e+00, float %1135, float %1134, float 0.000000e+00, float %1135)  ; Dot3(ax,ay,az,bx,by,bz)
  %1137 = call float @dx.op.unary.f32(i32 25, float %1136)  ; Rsqrt(value)
  %1138 = fmul fast float %1137, %1134
  %1139 = fmul fast float %1137, %1135
  %1140 = fmul fast float %1139, %1130
  %1141 = fmul fast float %1138, %1134
  %1142 = fmul fast float %1139, %1129
  %1143 = fsub fast float %1141, %1142
  %1144 = fmul fast float %1130, %1138
  %1145 = fsub fast float -0.000000e+00, %1144
  %1146 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1147 = extractvalue %dx.types.CBufRet.f32 %1146, 0
  %1148 = extractvalue %dx.types.CBufRet.f32 %1146, 1
  %1149 = extractvalue %dx.types.CBufRet.f32 %1146, 2
  %1150 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1151 = extractvalue %dx.types.CBufRet.f32 %1150, 0
  %1152 = extractvalue %dx.types.CBufRet.f32 %1150, 1
  %1153 = extractvalue %dx.types.CBufRet.f32 %1150, 2
  %1154 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %72, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1155 = extractvalue %dx.types.CBufRet.f32 %1154, 0
  %1156 = extractvalue %dx.types.CBufRet.f32 %1154, 1
  %1157 = extractvalue %dx.types.CBufRet.f32 %1154, 2
  %1158 = fmul fast float %1147, %1138
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1139, float %1155, float %1158)  ; FMad(a,b,c)
  %1160 = fmul fast float %1148, %1138
  %1161 = call float @dx.op.tertiary.f32(i32 46, float %1139, float %1156, float %1160)  ; FMad(a,b,c)
  %1162 = fmul fast float %1149, %1138
  %1163 = call float @dx.op.tertiary.f32(i32 46, float %1139, float %1157, float %1162)  ; FMad(a,b,c)
  %1164 = fmul fast float %1140, %1147
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1151, float %1164)  ; FMad(a,b,c)
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1145, float %1155, float %1165)  ; FMad(a,b,c)
  %1167 = fmul fast float %1140, %1148
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1152, float %1167)  ; FMad(a,b,c)
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1145, float %1156, float %1168)  ; FMad(a,b,c)
  %1170 = fmul fast float %1140, %1149
  %1171 = call float @dx.op.tertiary.f32(i32 46, float %1143, float %1153, float %1170)  ; FMad(a,b,c)
  %1172 = call float @dx.op.tertiary.f32(i32 46, float %1145, float %1157, float %1171)  ; FMad(a,b,c)
  %1173 = fmul fast float %1147, %1129
  %1174 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1151, float %1173)  ; FMad(a,b,c)
  %1175 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1155, float %1174)  ; FMad(a,b,c)
  %1176 = fmul fast float %1148, %1129
  %1177 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1152, float %1176)  ; FMad(a,b,c)
  %1178 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1156, float %1177)  ; FMad(a,b,c)
  %1179 = fmul fast float %1149, %1129
  %1180 = call float @dx.op.tertiary.f32(i32 46, float %1130, float %1153, float %1179)  ; FMad(a,b,c)
  %1181 = call float @dx.op.tertiary.f32(i32 46, float %1134, float %1157, float %1180)  ; FMad(a,b,c)
  %1182 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 0)  ; WorldRayOrigin(col)
  %1183 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 1)  ; WorldRayOrigin(col)
  %1184 = call float @dx.op.worldRayOrigin.f32(i32 147, i8 2)  ; WorldRayOrigin(col)
  %1185 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %1186 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %1187 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %1188 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %1189 = fmul fast float %1188, %1185
  %1190 = fmul fast float %1188, %1186
  %1191 = fmul fast float %1188, %1187
  %1192 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %1193 = icmp eq i32 %1192, 254
  %1194 = select i1 %1193, float 1.000000e+00, float -1.000000e+00
  %1195 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %1196 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %14)  ; CreateHandleForLib(Resource)
  %1197 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1195, %dx.types.Handle %1196, float %1108, float %1109, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1198 = extractvalue %dx.types.ResRet.f32 %1197, 0
  %1199 = extractvalue %dx.types.ResRet.f32 %1197, 1
  %1200 = extractvalue %dx.types.ResRet.f32 %1197, 2
  %1201 = extractvalue %dx.types.ResRet.f32 %1197, 3
  %1202 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1203 = extractvalue %dx.types.CBufRet.f32 %1202, 0
  %1204 = extractvalue %dx.types.CBufRet.f32 %1202, 1
  %1205 = extractvalue %dx.types.CBufRet.f32 %1202, 2
  %1206 = extractvalue %dx.types.CBufRet.f32 %1202, 3
  %1207 = call float @dx.op.dot4.f32(i32 56, float %1198, float %1199, float %1200, float %1201, float %1203, float %1204, float %1205, float %1206)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1208 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1209 = extractvalue %dx.types.CBufRet.f32 %1208, 1
  %1210 = fmul fast float %1209, %1102
  %1211 = fmul fast float %1209, %1103
  %1212 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %1213 = extractvalue %dx.types.CBufRet.f32 %1212, 0
  %1214 = fadd fast float %1213, %708
  %1215 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %36)  ; CreateHandleForLib(Resource)
  %1216 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %13)  ; CreateHandleForLib(Resource)
  %1217 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1215, %dx.types.Handle %1216, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1218 = extractvalue %dx.types.ResRet.f32 %1217, 1
  %1219 = extractvalue %dx.types.ResRet.f32 %1217, 2
  %1220 = extractvalue %dx.types.CBufRet.f32 %1208, 2
  %1221 = extractvalue %dx.types.CBufRet.f32 %1208, 3
  %1222 = fsub fast float %1220, %1221
  %1223 = fmul fast float %1222, %1219
  %1224 = fadd fast float %1223, %1221
  %1225 = call float @dx.op.unary.f32(i32 7, float %1224)  ; Saturate(value)
  %1226 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %35)  ; CreateHandleForLib(Resource)
  %1227 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %12)  ; CreateHandleForLib(Resource)
  %1228 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1226, %dx.types.Handle %1227, float %1108, float %1109, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1229 = extractvalue %dx.types.ResRet.f32 %1228, 0
  %1230 = extractvalue %dx.types.ResRet.f32 %1228, 1
  %1231 = extractvalue %dx.types.ResRet.f32 %1228, 2
  %1232 = extractvalue %dx.types.ResRet.f32 %1228, 3
  %1233 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1234 = extractvalue %dx.types.CBufRet.f32 %1233, 0
  %1235 = extractvalue %dx.types.CBufRet.f32 %1233, 1
  %1236 = extractvalue %dx.types.CBufRet.f32 %1233, 2
  %1237 = extractvalue %dx.types.CBufRet.f32 %1233, 3
  %1238 = call float @dx.op.dot4.f32(i32 56, float %1229, float %1230, float %1231, float %1232, float %1234, float %1235, float %1236, float %1237)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1239 = fmul fast float %1238, 2.000000e+00
  %1240 = fadd fast float %1225, -1.000000e+00
  %1241 = fadd fast float %1240, %1239
  %1242 = call float @dx.op.binary.f32(i32 35, float %1241, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1243 = call float @dx.op.binary.f32(i32 36, float %1242, float 1.000000e+00)  ; FMin(a,b)
  %1244 = fadd fast float %1243, %1207
  %1245 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %34)  ; CreateHandleForLib(Resource)
  %1246 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %11)  ; CreateHandleForLib(Resource)
  %1247 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1245, %dx.types.Handle %1246, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1248 = extractvalue %dx.types.ResRet.f32 %1247, 1
  %1249 = extractvalue %dx.types.ResRet.f32 %1247, 2
  %1250 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1251 = extractvalue %dx.types.CBufRet.f32 %1250, 1
  %1252 = extractvalue %dx.types.CBufRet.f32 %1250, 2
  %1253 = fsub fast float %1251, %1252
  %1254 = fmul fast float %1253, %1249
  %1255 = fadd fast float %1254, %1252
  %1256 = call float @dx.op.unary.f32(i32 7, float %1255)  ; Saturate(value)
  %1257 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1258 = extractvalue %dx.types.CBufRet.f32 %1257, 0
  %1259 = extractvalue %dx.types.CBufRet.f32 %1257, 1
  %1260 = extractvalue %dx.types.CBufRet.f32 %1257, 2
  %1261 = extractvalue %dx.types.CBufRet.f32 %1257, 3
  %1262 = call float @dx.op.dot4.f32(i32 56, float %1198, float %1199, float %1200, float %1201, float %1258, float %1259, float %1260, float %1261)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1263 = fmul fast float %1262, 2.000000e+00
  %1264 = fadd fast float %1256, -1.000000e+00
  %1265 = fadd fast float %1264, %1263
  %1266 = call float @dx.op.binary.f32(i32 35, float %1265, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1267 = call float @dx.op.binary.f32(i32 36, float %1266, float 1.000000e+00)  ; FMin(a,b)
  %1268 = fadd fast float %1244, %1267
  %1269 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %33)  ; CreateHandleForLib(Resource)
  %1270 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %10)  ; CreateHandleForLib(Resource)
  %1271 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1269, %dx.types.Handle %1270, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1272 = extractvalue %dx.types.ResRet.f32 %1271, 1
  %1273 = extractvalue %dx.types.ResRet.f32 %1271, 2
  %1274 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1275 = extractvalue %dx.types.CBufRet.f32 %1274, 1
  %1276 = extractvalue %dx.types.CBufRet.f32 %1274, 2
  %1277 = fsub fast float %1275, %1276
  %1278 = fmul fast float %1277, %1273
  %1279 = fadd fast float %1278, %1276
  %1280 = call float @dx.op.unary.f32(i32 7, float %1279)  ; Saturate(value)
  %1281 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1282 = extractvalue %dx.types.CBufRet.f32 %1281, 0
  %1283 = extractvalue %dx.types.CBufRet.f32 %1281, 1
  %1284 = extractvalue %dx.types.CBufRet.f32 %1281, 2
  %1285 = extractvalue %dx.types.CBufRet.f32 %1281, 3
  %1286 = call float @dx.op.dot4.f32(i32 56, float %1198, float %1199, float %1200, float %1201, float %1282, float %1283, float %1284, float %1285)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1287 = fmul fast float %1286, 2.000000e+00
  %1288 = fadd fast float %1280, -1.000000e+00
  %1289 = fadd fast float %1288, %1287
  %1290 = call float @dx.op.binary.f32(i32 35, float %1289, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1291 = call float @dx.op.binary.f32(i32 36, float %1290, float 1.000000e+00)  ; FMin(a,b)
  %1292 = fadd fast float %1268, %1291
  %1293 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %32)  ; CreateHandleForLib(Resource)
  %1294 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %9)  ; CreateHandleForLib(Resource)
  %1295 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1293, %dx.types.Handle %1294, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1296 = extractvalue %dx.types.ResRet.f32 %1295, 1
  %1297 = extractvalue %dx.types.ResRet.f32 %1295, 2
  %1298 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1299 = extractvalue %dx.types.CBufRet.f32 %1298, 1
  %1300 = extractvalue %dx.types.CBufRet.f32 %1298, 2
  %1301 = fsub fast float %1299, %1300
  %1302 = fmul fast float %1301, %1297
  %1303 = fadd fast float %1302, %1300
  %1304 = call float @dx.op.unary.f32(i32 7, float %1303)  ; Saturate(value)
  %1305 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1306 = extractvalue %dx.types.CBufRet.f32 %1305, 0
  %1307 = extractvalue %dx.types.CBufRet.f32 %1305, 1
  %1308 = extractvalue %dx.types.CBufRet.f32 %1305, 2
  %1309 = extractvalue %dx.types.CBufRet.f32 %1305, 3
  %1310 = call float @dx.op.dot4.f32(i32 56, float %1198, float %1199, float %1200, float %1201, float %1306, float %1307, float %1308, float %1309)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1311 = fmul fast float %1310, 2.000000e+00
  %1312 = fadd fast float %1304, -1.000000e+00
  %1313 = fadd fast float %1312, %1311
  %1314 = call float @dx.op.binary.f32(i32 35, float %1313, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1315 = call float @dx.op.binary.f32(i32 36, float %1314, float 1.000000e+00)  ; FMin(a,b)
  %1316 = fadd fast float %1292, %1315
  %1317 = fdiv fast float 1.000000e+00, %1316
  %1318 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %31)  ; CreateHandleForLib(Resource)
  %1319 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %19)  ; CreateHandleForLib(Resource)
  %1320 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1318, %dx.types.Handle %1319, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1321 = extractvalue %dx.types.ResRet.f32 %1320, 0
  %1322 = extractvalue %dx.types.ResRet.f32 %1320, 1
  %1323 = fmul fast float %1321, 2.000000e+00
  %1324 = fmul fast float %1322, 2.000000e+00
  %1325 = fadd fast float %1323, -1.000000e+00
  %1326 = fadd fast float %1324, -1.000000e+00
  %1327 = call float @dx.op.dot2.f32(i32 54, float %1325, float %1326, float %1325, float %1326)  ; Dot2(ax,ay,bx,by)
  %1328 = fsub fast float 1.000000e+00, %1327
  %1329 = call float @dx.op.unary.f32(i32 7, float %1328)  ; Saturate(value)
  %1330 = call float @dx.op.unary.f32(i32 24, float %1329)  ; Sqrt(value)
  %1331 = fmul fast float %1317, %1207
  %1332 = fmul fast float %1325, %1331
  %1333 = fmul fast float %1326, %1331
  %1334 = fmul fast float %1330, %1331
  %1335 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %30)  ; CreateHandleForLib(Resource)
  %1336 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %8)  ; CreateHandleForLib(Resource)
  %1337 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1335, %dx.types.Handle %1336, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1338 = extractvalue %dx.types.ResRet.f32 %1337, 0
  %1339 = extractvalue %dx.types.ResRet.f32 %1337, 1
  %1340 = fmul fast float %1338, 2.000000e+00
  %1341 = fmul fast float %1339, 2.000000e+00
  %1342 = fadd fast float %1340, -1.000000e+00
  %1343 = fadd fast float %1341, -1.000000e+00
  %1344 = call float @dx.op.dot2.f32(i32 54, float %1342, float %1343, float %1342, float %1343)  ; Dot2(ax,ay,bx,by)
  %1345 = fsub fast float 1.000000e+00, %1344
  %1346 = call float @dx.op.unary.f32(i32 7, float %1345)  ; Saturate(value)
  %1347 = call float @dx.op.unary.f32(i32 24, float %1346)  ; Sqrt(value)
  %1348 = fmul fast float %1317, %1243
  %1349 = fmul fast float %1342, %1348
  %1350 = fmul fast float %1343, %1348
  %1351 = fmul fast float %1347, %1348
  %1352 = fadd fast float %1349, %1332
  %1353 = fadd fast float %1350, %1333
  %1354 = fadd fast float %1351, %1334
  %1355 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %29)  ; CreateHandleForLib(Resource)
  %1356 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleForLib(Resource)
  %1357 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1355, %dx.types.Handle %1356, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1358 = extractvalue %dx.types.ResRet.f32 %1357, 0
  %1359 = extractvalue %dx.types.ResRet.f32 %1357, 1
  %1360 = fmul fast float %1358, 2.000000e+00
  %1361 = fmul fast float %1359, 2.000000e+00
  %1362 = fadd fast float %1360, -1.000000e+00
  %1363 = fadd fast float %1361, -1.000000e+00
  %1364 = call float @dx.op.dot2.f32(i32 54, float %1362, float %1363, float %1362, float %1363)  ; Dot2(ax,ay,bx,by)
  %1365 = fsub fast float 1.000000e+00, %1364
  %1366 = call float @dx.op.unary.f32(i32 7, float %1365)  ; Saturate(value)
  %1367 = call float @dx.op.unary.f32(i32 24, float %1366)  ; Sqrt(value)
  %1368 = fmul fast float %1317, %1267
  %1369 = fmul fast float %1362, %1368
  %1370 = fmul fast float %1363, %1368
  %1371 = fmul fast float %1367, %1368
  %1372 = fadd fast float %1352, %1369
  %1373 = fadd fast float %1353, %1370
  %1374 = fadd fast float %1354, %1371
  %1375 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %28)  ; CreateHandleForLib(Resource)
  %1376 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %6)  ; CreateHandleForLib(Resource)
  %1377 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1375, %dx.types.Handle %1376, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1378 = extractvalue %dx.types.ResRet.f32 %1377, 0
  %1379 = extractvalue %dx.types.ResRet.f32 %1377, 1
  %1380 = fmul fast float %1378, 2.000000e+00
  %1381 = fmul fast float %1379, 2.000000e+00
  %1382 = fadd fast float %1380, -1.000000e+00
  %1383 = fadd fast float %1381, -1.000000e+00
  %1384 = call float @dx.op.dot2.f32(i32 54, float %1382, float %1383, float %1382, float %1383)  ; Dot2(ax,ay,bx,by)
  %1385 = fsub fast float 1.000000e+00, %1384
  %1386 = call float @dx.op.unary.f32(i32 7, float %1385)  ; Saturate(value)
  %1387 = call float @dx.op.unary.f32(i32 24, float %1386)  ; Sqrt(value)
  %1388 = fmul fast float %1317, %1291
  %1389 = fmul fast float %1382, %1388
  %1390 = fmul fast float %1383, %1388
  %1391 = fmul fast float %1387, %1388
  %1392 = fadd fast float %1372, %1389
  %1393 = fadd fast float %1373, %1390
  %1394 = fadd fast float %1374, %1391
  %1395 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %27)  ; CreateHandleForLib(Resource)
  %1396 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %5)  ; CreateHandleForLib(Resource)
  %1397 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1395, %dx.types.Handle %1396, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1398 = extractvalue %dx.types.ResRet.f32 %1397, 0
  %1399 = extractvalue %dx.types.ResRet.f32 %1397, 1
  %1400 = fmul fast float %1398, 2.000000e+00
  %1401 = fmul fast float %1399, 2.000000e+00
  %1402 = fadd fast float %1400, -1.000000e+00
  %1403 = fadd fast float %1401, -1.000000e+00
  %1404 = call float @dx.op.dot2.f32(i32 54, float %1402, float %1403, float %1402, float %1403)  ; Dot2(ax,ay,bx,by)
  %1405 = fsub fast float 1.000000e+00, %1404
  %1406 = call float @dx.op.unary.f32(i32 7, float %1405)  ; Saturate(value)
  %1407 = call float @dx.op.unary.f32(i32 24, float %1406)  ; Sqrt(value)
  %1408 = fmul fast float %1317, %1315
  %1409 = fmul fast float %1402, %1408
  %1410 = fmul fast float %1403, %1408
  %1411 = fmul fast float %1407, %1408
  %1412 = fadd fast float %1392, %1409
  %1413 = fadd fast float %1393, %1410
  %1414 = fadd fast float %1394, %1411
  %1415 = fmul fast float %1412, %1116
  %1416 = fmul fast float %1413, %1116
  %1417 = fmul fast float %1414, %1116
  %1418 = fadd fast float %1415, %710
  %1419 = fadd fast float %1416, %1115
  %1420 = fadd fast float %1417, %711
  %1421 = call float @dx.op.dot3.f32(i32 55, float %1418, float %1419, float %1420, float %1418, float %1419, float %1420)  ; Dot3(ax,ay,az,bx,by,bz)
  %1422 = call float @dx.op.unary.f32(i32 25, float %1421)  ; Rsqrt(value)
  %1423 = fmul fast float %1418, %1422
  %1424 = fmul fast float %1419, %1422
  %1425 = fmul fast float %1420, %1422
  %1426 = fmul fast float %1423, %1159
  %1427 = call float @dx.op.tertiary.f32(i32 46, float %1424, float %1166, float %1426)  ; FMad(a,b,c)
  %1428 = call float @dx.op.tertiary.f32(i32 46, float %1425, float %1175, float %1427)  ; FMad(a,b,c)
  %1429 = fmul fast float %1423, %1161
  %1430 = call float @dx.op.tertiary.f32(i32 46, float %1424, float %1169, float %1429)  ; FMad(a,b,c)
  %1431 = call float @dx.op.tertiary.f32(i32 46, float %1425, float %1178, float %1430)  ; FMad(a,b,c)
  %1432 = fmul fast float %1423, %1163
  %1433 = call float @dx.op.tertiary.f32(i32 46, float %1424, float %1172, float %1432)  ; FMad(a,b,c)
  %1434 = call float @dx.op.tertiary.f32(i32 46, float %1425, float %1181, float %1433)  ; FMad(a,b,c)
  %1435 = call float @dx.op.dot3.f32(i32 55, float %1428, float %1431, float %1434, float %1428, float %1431, float %1434)  ; Dot3(ax,ay,az,bx,by,bz)
  %1436 = call float @dx.op.unary.f32(i32 25, float %1435)  ; Rsqrt(value)
  %1437 = fmul fast float %1428, %1194
  %1438 = fmul fast float %1437, %1436
  %1439 = fmul fast float %1431, %1194
  %1440 = fmul fast float %1439, %1436
  %1441 = fmul fast float %1434, %1194
  %1442 = fmul fast float %1441, %1436
  %1443 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %71, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1444 = extractvalue %dx.types.CBufRet.f32 %1443, 0
  %1445 = extractvalue %dx.types.CBufRet.f32 %1443, 1
  %1446 = extractvalue %dx.types.CBufRet.f32 %1443, 2
  %1447 = extractvalue %dx.types.CBufRet.f32 %1443, 3
  %1448 = fmul fast float %1445, %1444
  %1449 = fmul fast float %1446, %1444
  %1450 = fmul fast float %1447, %1444
  %1451 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %26)  ; CreateHandleForLib(Resource)
  %1452 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1451, %dx.types.Handle %1319, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1453 = extractvalue %dx.types.ResRet.f32 %1452, 0
  %1454 = extractvalue %dx.types.ResRet.f32 %1452, 1
  %1455 = extractvalue %dx.types.ResRet.f32 %1452, 2
  %1456 = fmul fast float %1453, %1331
  %1457 = fmul fast float %1454, %1331
  %1458 = fmul fast float %1455, %1331
  %1459 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %25)  ; CreateHandleForLib(Resource)
  %1460 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleForLib(Resource)
  %1461 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1459, %dx.types.Handle %1460, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1462 = extractvalue %dx.types.ResRet.f32 %1461, 0
  %1463 = extractvalue %dx.types.ResRet.f32 %1461, 1
  %1464 = extractvalue %dx.types.ResRet.f32 %1461, 2
  %1465 = fmul fast float %1462, %1348
  %1466 = fmul fast float %1463, %1348
  %1467 = fmul fast float %1464, %1348
  %1468 = fadd fast float %1465, %1456
  %1469 = fadd fast float %1466, %1457
  %1470 = fadd fast float %1467, %1458
  %1471 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %24)  ; CreateHandleForLib(Resource)
  %1472 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleForLib(Resource)
  %1473 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1471, %dx.types.Handle %1472, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1474 = extractvalue %dx.types.ResRet.f32 %1473, 0
  %1475 = extractvalue %dx.types.ResRet.f32 %1473, 1
  %1476 = extractvalue %dx.types.ResRet.f32 %1473, 2
  %1477 = fmul fast float %1474, %1368
  %1478 = fmul fast float %1475, %1368
  %1479 = fmul fast float %1476, %1368
  %1480 = fadd fast float %1468, %1477
  %1481 = fadd fast float %1469, %1478
  %1482 = fadd fast float %1470, %1479
  %1483 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %23)  ; CreateHandleForLib(Resource)
  %1484 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %1485 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1483, %dx.types.Handle %1484, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1486 = extractvalue %dx.types.ResRet.f32 %1485, 0
  %1487 = extractvalue %dx.types.ResRet.f32 %1485, 1
  %1488 = extractvalue %dx.types.ResRet.f32 %1485, 2
  %1489 = fmul fast float %1486, %1388
  %1490 = fmul fast float %1487, %1388
  %1491 = fmul fast float %1488, %1388
  %1492 = fadd fast float %1480, %1489
  %1493 = fadd fast float %1481, %1490
  %1494 = fadd fast float %1482, %1491
  %1495 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %22)  ; CreateHandleForLib(Resource)
  %1496 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleForLib(Resource)
  %1497 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1495, %dx.types.Handle %1496, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %1214)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1498 = extractvalue %dx.types.ResRet.f32 %1497, 0
  %1499 = extractvalue %dx.types.ResRet.f32 %1497, 1
  %1500 = extractvalue %dx.types.ResRet.f32 %1497, 2
  %1501 = fmul fast float %1498, %1408
  %1502 = fmul fast float %1499, %1408
  %1503 = fmul fast float %1500, %1408
  %1504 = fadd fast float %1492, %1501
  %1505 = fadd fast float %1493, %1502
  %1506 = fadd fast float %1494, %1503
  %1507 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %21)  ; CreateHandleForLib(Resource)
  %1508 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1507, %dx.types.Handle %1319, float %1210, float %1211, float undef, float undef, i32 0, i32 0, i32 undef, float %708)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1509 = extractvalue %dx.types.ResRet.f32 %1508, 1
  %1510 = fmul fast float %1509, %1331
  %1511 = fmul fast float %1348, %1218
  %1512 = fmul fast float %1368, %1248
  %1513 = fmul fast float %1388, %1272
  %1514 = fmul fast float %1408, %1296
  %1515 = fadd fast float %1512, %1511
  %1516 = fadd fast float %1515, %1513
  %1517 = fadd fast float %1516, %1514
  %1518 = fadd fast float %1517, %1510
  %1519 = mul nuw nsw i32 %844, 40
  %1520 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %836, i32 %1519, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1521 = extractvalue %dx.types.ResRet.f32 %1520, 0
  %1522 = bitcast float %1521 to i32
  %1523 = zext i1 %1193 to i32
  %1524 = call float @dx.op.unary.f32(i32 7, float %1504)  ; Saturate(value)
  %1525 = call float @dx.op.unary.f32(i32 7, float %1505)  ; Saturate(value)
  %1526 = call float @dx.op.unary.f32(i32 7, float %1506)  ; Saturate(value)
  %1527 = call float @dx.op.unary.f32(i32 7, float %1518)  ; Saturate(value)
  %1528 = fmul fast float %1527, %1117
  %1529 = fadd fast float %1528, %713
  %1530 = call float @dx.op.dot3.f32(i32 55, float %1438, float %1440, float %1442, float %1438, float %1440, float %1442)  ; Dot3(ax,ay,az,bx,by,bz)
  %1531 = call float @dx.op.unary.f32(i32 25, float %1530)  ; Rsqrt(value)
  %1532 = fmul fast float %1531, %1438
  %1533 = fmul fast float %1531, %1440
  %1534 = fmul fast float %1531, %1442
  %1535 = call float @dx.op.binary.f32(i32 35, float %1448, float 0.000000e+00)  ; FMax(a,b)
  %1536 = call float @dx.op.binary.f32(i32 35, float %1449, float 0.000000e+00)  ; FMax(a,b)
  %1537 = call float @dx.op.binary.f32(i32 35, float %1450, float 0.000000e+00)  ; FMax(a,b)
  %1538 = fadd fast float %1189, %1182
  %1539 = fadd fast float %1190, %1183
  %1540 = fadd fast float %1191, %1184
  %1541 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 226)  ; CBufferLoadLegacy(handle,regIndex)
  %1542 = extractvalue %dx.types.CBufRet.f32 %1541, 0
  %1543 = extractvalue %dx.types.CBufRet.f32 %1541, 1
  %1544 = extractvalue %dx.types.CBufRet.f32 %1541, 2
  %1545 = fmul fast float %1542, %1538
  %1546 = fmul fast float %1543, %1539
  %1547 = fmul fast float %1544, %1540
  %1548 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 227)  ; CBufferLoadLegacy(handle,regIndex)
  %1549 = extractvalue %dx.types.CBufRet.f32 %1548, 0
  %1550 = extractvalue %dx.types.CBufRet.f32 %1548, 1
  %1551 = extractvalue %dx.types.CBufRet.f32 %1548, 2
  %1552 = fadd fast float %1545, %1549
  %1553 = fadd fast float %1546, %1550
  %1554 = fadd fast float %1547, %1551
  %1555 = call float @dx.op.binary.f32(i32 35, float %1552, float 0.000000e+00)  ; FMax(a,b)
  %1556 = call float @dx.op.binary.f32(i32 35, float %1553, float 0.000000e+00)  ; FMax(a,b)
  %1557 = call float @dx.op.binary.f32(i32 35, float %1554, float 0.000000e+00)  ; FMax(a,b)
  %1558 = call float @dx.op.binary.f32(i32 36, float %1555, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1559 = call float @dx.op.binary.f32(i32 36, float %1556, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1560 = call float @dx.op.binary.f32(i32 36, float %1557, float 0x3FEFAE1480000000)  ; FMin(a,b)
  %1561 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 228)  ; CBufferLoadLegacy(handle,regIndex)
  %1562 = extractvalue %dx.types.CBufRet.f32 %1561, 0
  %1563 = extractvalue %dx.types.CBufRet.f32 %1561, 1
  %1564 = extractvalue %dx.types.CBufRet.f32 %1561, 2
  %1565 = fmul fast float %1562, %1558
  %1566 = fmul fast float %1563, %1559
  %1567 = fmul fast float %1564, %1560
  %1568 = fptosi float %1565 to i32
  %1569 = fptosi float %1566 to i32
  %1570 = fptosi float %1567 to i32
  %1571 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<unsigned int, 4> >"(i32 160, %"class.Texture3D<vector<unsigned int, 4> >" %55)  ; CreateHandleForLib(Resource)
  %1572 = call %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32 66, %dx.types.Handle %1571, i32 0, i32 %1568, i32 %1569, i32 %1570, i32 undef, i32 undef, i32 undef)  ; TextureLoad(srv,mipLevelOrSampleCount,coord0,coord1,coord2,offset0,offset1,offset2)
  %1573 = extractvalue %dx.types.ResRet.i32 %1572, 0
  %1574 = extractvalue %dx.types.ResRet.i32 %1572, 1
  %1575 = extractvalue %dx.types.ResRet.i32 %1572, 2
  %1576 = extractvalue %dx.types.ResRet.i32 %1572, 3
  %1577 = uitofp i32 %1573 to float
  %1578 = uitofp i32 %1574 to float
  %1579 = uitofp i32 %1575 to float
  %1580 = uitofp i32 %1576 to float
  %1581 = extractvalue %dx.types.CBufRet.f32 %1561, 3
  %1582 = fadd fast float %1581, 1.000000e+00
  %1583 = fmul fast float %1582, %1577
  %1584 = fmul fast float %1582, %1578
  %1585 = fmul fast float %1582, %1579
  %1586 = fdiv fast float %1565, %1580
  %1587 = fdiv fast float %1566, %1580
  %1588 = fdiv fast float %1567, %1580
  %1589 = call float @dx.op.unary.f32(i32 22, float %1586)  ; Frc(value)
  %1590 = call float @dx.op.unary.f32(i32 22, float %1587)  ; Frc(value)
  %1591 = call float @dx.op.unary.f32(i32 22, float %1588)  ; Frc(value)
  %1592 = fmul fast float %1581, %1589
  %1593 = fmul fast float %1581, %1590
  %1594 = fmul fast float %1581, %1591
  %1595 = fadd fast float %1583, 5.000000e-01
  %1596 = fadd fast float %1595, %1592
  %1597 = fadd fast float %1584, 5.000000e-01
  %1598 = fadd fast float %1597, %1593
  %1599 = fadd fast float %1585, 5.000000e-01
  %1600 = fadd fast float %1599, %1594
  %1601 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 229)  ; CBufferLoadLegacy(handle,regIndex)
  %1602 = extractvalue %dx.types.CBufRet.f32 %1601, 0
  %1603 = extractvalue %dx.types.CBufRet.f32 %1601, 1
  %1604 = extractvalue %dx.types.CBufRet.f32 %1601, 2
  %1605 = fmul fast float %1596, %1602
  %1606 = fmul fast float %1598, %1603
  %1607 = fmul fast float %1600, %1604
  %1608 = load i32, i32* %78, align 4, !tbaa !126
  %1609 = and i32 %1608, 16777216
  %1610 = icmp eq i32 %1609, 0
  %1611 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %54)  ; CreateHandleForLib(Resource)
  %1612 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %18)  ; CreateHandleForLib(Resource)
  %1613 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1611, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1614 = extractvalue %dx.types.ResRet.f32 %1613, 0
  %1615 = extractvalue %dx.types.ResRet.f32 %1613, 1
  %1616 = extractvalue %dx.types.ResRet.f32 %1613, 2
  %1617 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %53)  ; CreateHandleForLib(Resource)
  %1618 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1617, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1619 = extractvalue %dx.types.ResRet.f32 %1618, 0
  %1620 = extractvalue %dx.types.ResRet.f32 %1618, 1
  %1621 = extractvalue %dx.types.ResRet.f32 %1618, 2
  %1622 = extractvalue %dx.types.ResRet.f32 %1618, 3
  %1623 = fmul fast float %1619, 2.000000e+00
  %1624 = fmul fast float %1620, 2.000000e+00
  %1625 = fmul fast float %1621, 2.000000e+00
  %1626 = fmul fast float %1622, 2.000000e+00
  %1627 = fadd fast float %1623, -1.000000e+00
  %1628 = fadd fast float %1624, -1.000000e+00
  %1629 = fadd fast float %1625, -1.000000e+00
  %1630 = fadd fast float %1626, -1.000000e+00
  %1631 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %51)  ; CreateHandleForLib(Resource)
  %1632 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1631, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1633 = extractvalue %dx.types.ResRet.f32 %1632, 0
  %1634 = extractvalue %dx.types.ResRet.f32 %1632, 1
  %1635 = extractvalue %dx.types.ResRet.f32 %1632, 2
  %1636 = extractvalue %dx.types.ResRet.f32 %1632, 3
  %1637 = fmul fast float %1633, 2.000000e+00
  %1638 = fmul fast float %1634, 2.000000e+00
  %1639 = fmul fast float %1635, 2.000000e+00
  %1640 = fmul fast float %1636, 2.000000e+00
  %1641 = fadd fast float %1637, -1.000000e+00
  %1642 = fadd fast float %1638, -1.000000e+00
  %1643 = fadd fast float %1639, -1.000000e+00
  %1644 = fadd fast float %1640, -1.000000e+00
  %1645 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %49)  ; CreateHandleForLib(Resource)
  %1646 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1645, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1647 = extractvalue %dx.types.ResRet.f32 %1646, 0
  %1648 = extractvalue %dx.types.ResRet.f32 %1646, 1
  %1649 = extractvalue %dx.types.ResRet.f32 %1646, 2
  %1650 = extractvalue %dx.types.ResRet.f32 %1646, 3
  %1651 = fmul fast float %1647, 2.000000e+00
  %1652 = fmul fast float %1648, 2.000000e+00
  %1653 = fmul fast float %1649, 2.000000e+00
  %1654 = fmul fast float %1650, 2.000000e+00
  %1655 = fadd fast float %1651, -1.000000e+00
  %1656 = fadd fast float %1652, -1.000000e+00
  %1657 = fadd fast float %1653, -1.000000e+00
  %1658 = fadd fast float %1654, -1.000000e+00
  %1659 = fmul fast float %1614, 0x3FFBB67B80000000
  %1660 = fmul fast float %1659, %1627
  %1661 = fmul fast float %1659, %1628
  %1662 = fmul fast float %1659, %1629
  %1663 = fmul fast float %1614, 0x400EFBDC80000000
  %1664 = fmul fast float %1663, %1630
  %1665 = fmul fast float %1615, 0x3FFBB67B80000000
  %1666 = fmul fast float %1665, %1641
  %1667 = fmul fast float %1665, %1642
  %1668 = fmul fast float %1665, %1643
  %1669 = fmul fast float %1615, 0x400EFBDC80000000
  %1670 = fmul fast float %1669, %1644
  %1671 = fmul fast float %1616, 0x3FFBB67B80000000
  %1672 = fmul fast float %1671, %1655
  %1673 = fmul fast float %1671, %1656
  %1674 = fmul fast float %1671, %1657
  %1675 = fmul fast float %1616, 0x400EFBDC80000000
  %1676 = fmul fast float %1675, %1658
  %1677 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %52)  ; CreateHandleForLib(Resource)
  %1678 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1677, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1679 = extractvalue %dx.types.ResRet.f32 %1678, 0
  %1680 = extractvalue %dx.types.ResRet.f32 %1678, 1
  %1681 = extractvalue %dx.types.ResRet.f32 %1678, 2
  %1682 = extractvalue %dx.types.ResRet.f32 %1678, 3
  %1683 = fmul fast float %1679, 2.000000e+00
  %1684 = fmul fast float %1680, 2.000000e+00
  %1685 = fmul fast float %1681, 2.000000e+00
  %1686 = fmul fast float %1682, 2.000000e+00
  %1687 = fadd fast float %1683, -1.000000e+00
  %1688 = fadd fast float %1684, -1.000000e+00
  %1689 = fadd fast float %1685, -1.000000e+00
  %1690 = fadd fast float %1686, -1.000000e+00
  %1691 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %50)  ; CreateHandleForLib(Resource)
  %1692 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1691, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1693 = extractvalue %dx.types.ResRet.f32 %1692, 0
  %1694 = extractvalue %dx.types.ResRet.f32 %1692, 1
  %1695 = extractvalue %dx.types.ResRet.f32 %1692, 2
  %1696 = extractvalue %dx.types.ResRet.f32 %1692, 3
  %1697 = fmul fast float %1693, 2.000000e+00
  %1698 = fmul fast float %1694, 2.000000e+00
  %1699 = fmul fast float %1695, 2.000000e+00
  %1700 = fmul fast float %1696, 2.000000e+00
  %1701 = fadd fast float %1697, -1.000000e+00
  %1702 = fadd fast float %1698, -1.000000e+00
  %1703 = fadd fast float %1699, -1.000000e+00
  %1704 = fadd fast float %1700, -1.000000e+00
  %1705 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %48)  ; CreateHandleForLib(Resource)
  %1706 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1705, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1707 = extractvalue %dx.types.ResRet.f32 %1706, 0
  %1708 = extractvalue %dx.types.ResRet.f32 %1706, 1
  %1709 = extractvalue %dx.types.ResRet.f32 %1706, 2
  %1710 = extractvalue %dx.types.ResRet.f32 %1706, 3
  %1711 = fmul fast float %1707, 2.000000e+00
  %1712 = fmul fast float %1708, 2.000000e+00
  %1713 = fmul fast float %1709, 2.000000e+00
  %1714 = fmul fast float %1710, 2.000000e+00
  %1715 = fadd fast float %1711, -1.000000e+00
  %1716 = fadd fast float %1712, -1.000000e+00
  %1717 = fadd fast float %1713, -1.000000e+00
  %1718 = fadd fast float %1714, -1.000000e+00
  %1719 = fmul fast float %1663, %1687
  %1720 = fmul fast float %1614, 0x4011E37860000000
  %1721 = fmul fast float %1720, %1688
  %1722 = fmul fast float %1663, %1689
  %1723 = fmul fast float %1669, %1701
  %1724 = fmul fast float %1615, 0x4011E37860000000
  %1725 = fmul fast float %1724, %1702
  %1726 = fmul fast float %1669, %1703
  %1727 = fmul fast float %1675, %1715
  %1728 = fmul fast float %1616, 0x4011E37860000000
  %1729 = fmul fast float %1728, %1716
  %1730 = fmul fast float %1675, %1717
  %1731 = fmul fast float %1532, %1532
  %1732 = fmul fast float %1533, %1533
  %1733 = fsub fast float %1731, %1732
  %1734 = fmul fast float %1533, 0xBFF05F8CE0000000
  %1735 = fmul fast float %1534, 0x3FF05F8CE0000000
  %1736 = fmul fast float %1532, 0xBFF05F8CE0000000
  %1737 = fmul fast float %1532, 0x3FEB756F20000000
  %1738 = fmul fast float %1737, %1533
  %1739 = fmul fast float %1533, 0xBFEB756F20000000
  %1740 = fmul fast float %1739, %1534
  %1741 = fmul fast float %1534, %1534
  %1742 = fmul fast float %1741, 0x3FE7C7ADC0000000
  %1743 = fadd fast float %1742, 0xBFCFB4E7C0000000
  %1744 = fmul fast float %1532, 0xBFEB756F20000000
  %1745 = fmul fast float %1744, %1534
  %1746 = call float @dx.op.dot4.f32(i32 56, float %1614, float %1660, float %1661, float %1662, float 0x3FEC5BF9E0000000, float %1734, float %1735, float %1736)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1747 = call float @dx.op.dot4.f32(i32 56, float %1664, float %1719, float %1721, float %1722, float %1738, float %1740, float %1743, float %1745)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1748 = fmul fast float %1733, 0x3FFA963680000000
  %1749 = fmul fast float %1748, %1614
  %1750 = fmul fast float %1749, %1690
  %1751 = fadd fast float %1746, %1750
  %1752 = fadd fast float %1751, %1747
  %1753 = call float @dx.op.dot4.f32(i32 56, float %1615, float %1666, float %1667, float %1668, float 0x3FEC5BF9E0000000, float %1734, float %1735, float %1736)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1754 = call float @dx.op.dot4.f32(i32 56, float %1670, float %1723, float %1725, float %1726, float %1738, float %1740, float %1743, float %1745)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1755 = fmul fast float %1748, %1615
  %1756 = fmul fast float %1755, %1704
  %1757 = fadd fast float %1753, %1756
  %1758 = fadd fast float %1757, %1754
  %1759 = call float @dx.op.dot4.f32(i32 56, float %1616, float %1672, float %1673, float %1674, float 0x3FEC5BF9E0000000, float %1734, float %1735, float %1736)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1760 = call float @dx.op.dot4.f32(i32 56, float %1676, float %1727, float %1729, float %1730, float %1738, float %1740, float %1743, float %1745)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1761 = fadd fast float %1760, %1759
  %1762 = fmul fast float %1748, %1616
  %1763 = fmul fast float %1762, %1718
  %1764 = fadd fast float %1761, %1763
  %1765 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1752)  ; FMax(a,b)
  %1766 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1758)  ; FMax(a,b)
  %1767 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1764)  ; FMax(a,b)
  %1768 = fmul fast float %1765, 0x3FD45F3060000000
  %1769 = fmul fast float %1766, 0x3FD45F3060000000
  %1770 = fmul fast float %1767, 0x3FD45F3060000000
  %1771 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 154)  ; CBufferLoadLegacy(handle,regIndex)
  %1772 = extractvalue %dx.types.CBufRet.f32 %1771, 0
  %1773 = extractvalue %dx.types.CBufRet.f32 %1771, 1
  %1774 = extractvalue %dx.types.CBufRet.f32 %1771, 2
  %1775 = fmul fast float %1768, %1772
  %1776 = fmul fast float %1769, %1773
  %1777 = fmul fast float %1770, %1774
  br i1 %1610, label %1894, label %1778

; <label>:1778                                    ; preds = %1114
  %1779 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %75, i32 181)  ; CBufferLoadLegacy(handle,regIndex)
  %1780 = extractvalue %dx.types.CBufRet.f32 %1779, 1
  %1781 = fcmp fast une float %1780, 0.000000e+00
  br i1 %1781, label %1782, label %1821, !dx.controlflow.hints !140

; <label>:1782                                    ; preds = %1778
  %1783 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32 160, %"class.Texture3D<vector<float, 4> >" %47)  ; CreateHandleForLib(Resource)
  %1784 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1783, %dx.types.Handle %1612, float %1605, float %1606, float %1607, float undef, i32 0, i32 0, i32 0, float 0.000000e+00)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1785 = extractvalue %dx.types.ResRet.f32 %1784, 0
  %1786 = extractvalue %dx.types.ResRet.f32 %1784, 1
  %1787 = extractvalue %dx.types.ResRet.f32 %1784, 2
  %1788 = fmul fast float %1785, 2.000000e+00
  %1789 = fmul fast float %1786, 2.000000e+00
  %1790 = fmul fast float %1787, 2.000000e+00
  %1791 = fadd fast float %1788, -1.000000e+00
  %1792 = fadd fast float %1789, -1.000000e+00
  %1793 = fadd fast float %1790, -1.000000e+00
  %1794 = fmul fast float %1791, %1791
  %1795 = fmul fast float %1792, %1792
  %1796 = fadd fast float %1794, %1795
  %1797 = fmul fast float %1793, %1793
  %1798 = fadd fast float %1796, %1797
  %1799 = call float @dx.op.unary.f32(i32 24, float %1798)  ; Sqrt(value)
  %1800 = call float @dx.op.binary.f32(i32 35, float %1799, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1801 = fdiv fast float %1791, %1800
  %1802 = fdiv fast float %1792, %1800
  %1803 = fdiv fast float %1793, %1800
  %1804 = fsub fast float 1.000000e+00, %1799
  %1805 = fmul fast float %1804, %1804
  %1806 = fsub fast float 1.000000e+00, %1805
  %1807 = fsub fast float %1532, %1801
  %1808 = fsub fast float %1533, %1802
  %1809 = fsub fast float %1534, %1803
  %1810 = fmul fast float %1806, %1807
  %1811 = fmul fast float %1808, %1806
  %1812 = fmul fast float %1809, %1806
  %1813 = fadd fast float %1810, %1801
  %1814 = fadd fast float %1811, %1802
  %1815 = fadd fast float %1812, %1803
  %1816 = call float @dx.op.dot3.f32(i32 55, float %1801, float %1802, float %1803, float %1532, float %1533, float %1534)  ; Dot3(ax,ay,az,bx,by,bz)
  %1817 = call float @dx.op.unary.f32(i32 7, float %1816)  ; Saturate(value)
  %1818 = fsub fast float 1.000000e+00, %1817
  %1819 = fmul fast float %1818, %1806
  %1820 = fadd fast float %1819, %1817
  br label %1821

; <label>:1821                                    ; preds = %1782, %1778
  %1822 = phi float [ %1799, %1782 ], [ 1.000000e+00, %1778 ]
  %1823 = phi float [ %1820, %1782 ], [ 1.000000e+00, %1778 ]
  %1824 = phi float [ %1813, %1782 ], [ %1532, %1778 ]
  %1825 = phi float [ %1814, %1782 ], [ %1533, %1778 ]
  %1826 = phi float [ %1815, %1782 ], [ %1534, %1778 ]
  %1827 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %1828 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1829 = extractvalue %dx.types.ResRet.f32 %1828, 0
  %1830 = extractvalue %dx.types.ResRet.f32 %1828, 1
  %1831 = extractvalue %dx.types.ResRet.f32 %1828, 2
  %1832 = extractvalue %dx.types.ResRet.f32 %1828, 3
  %1833 = call float @dx.op.dot4.f32(i32 56, float %1829, float %1830, float %1831, float %1832, float %1824, float %1825, float %1826, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1834 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1835 = extractvalue %dx.types.ResRet.f32 %1834, 0
  %1836 = extractvalue %dx.types.ResRet.f32 %1834, 1
  %1837 = extractvalue %dx.types.ResRet.f32 %1834, 2
  %1838 = extractvalue %dx.types.ResRet.f32 %1834, 3
  %1839 = call float @dx.op.dot4.f32(i32 56, float %1835, float %1836, float %1837, float %1838, float %1824, float %1825, float %1826, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1840 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1841 = extractvalue %dx.types.ResRet.f32 %1840, 0
  %1842 = extractvalue %dx.types.ResRet.f32 %1840, 1
  %1843 = extractvalue %dx.types.ResRet.f32 %1840, 2
  %1844 = extractvalue %dx.types.ResRet.f32 %1840, 3
  %1845 = call float @dx.op.dot4.f32(i32 56, float %1841, float %1842, float %1843, float %1844, float %1824, float %1825, float %1826, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1846 = fmul fast float %1825, %1824
  %1847 = fmul fast float %1826, %1825
  %1848 = fmul fast float %1826, %1826
  %1849 = fmul fast float %1826, %1824
  %1850 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1851 = extractvalue %dx.types.ResRet.f32 %1850, 0
  %1852 = extractvalue %dx.types.ResRet.f32 %1850, 1
  %1853 = extractvalue %dx.types.ResRet.f32 %1850, 2
  %1854 = extractvalue %dx.types.ResRet.f32 %1850, 3
  %1855 = call float @dx.op.dot4.f32(i32 56, float %1851, float %1852, float %1853, float %1854, float %1846, float %1847, float %1848, float %1849)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1856 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1857 = extractvalue %dx.types.ResRet.f32 %1856, 0
  %1858 = extractvalue %dx.types.ResRet.f32 %1856, 1
  %1859 = extractvalue %dx.types.ResRet.f32 %1856, 2
  %1860 = extractvalue %dx.types.ResRet.f32 %1856, 3
  %1861 = call float @dx.op.dot4.f32(i32 56, float %1857, float %1858, float %1859, float %1860, float %1846, float %1847, float %1848, float %1849)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1862 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1863 = extractvalue %dx.types.ResRet.f32 %1862, 0
  %1864 = extractvalue %dx.types.ResRet.f32 %1862, 1
  %1865 = extractvalue %dx.types.ResRet.f32 %1862, 2
  %1866 = extractvalue %dx.types.ResRet.f32 %1862, 3
  %1867 = call float @dx.op.dot4.f32(i32 56, float %1863, float %1864, float %1865, float %1866, float %1846, float %1847, float %1848, float %1849)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1868 = fmul fast float %1824, %1824
  %1869 = fmul fast float %1825, %1825
  %1870 = fsub fast float %1868, %1869
  %1871 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1827, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1872 = extractvalue %dx.types.ResRet.f32 %1871, 0
  %1873 = extractvalue %dx.types.ResRet.f32 %1871, 1
  %1874 = extractvalue %dx.types.ResRet.f32 %1871, 2
  %1875 = fmul fast float %1872, %1870
  %1876 = fmul fast float %1873, %1870
  %1877 = fmul fast float %1874, %1870
  %1878 = fadd fast float %1855, %1833
  %1879 = fadd fast float %1861, %1839
  %1880 = fadd fast float %1867, %1845
  %1881 = fadd fast float %1878, %1875
  %1882 = fadd fast float %1879, %1876
  %1883 = fadd fast float %1880, %1877
  %1884 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1881)  ; FMax(a,b)
  %1885 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1882)  ; FMax(a,b)
  %1886 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1883)  ; FMax(a,b)
  %1887 = fmul fast float %1823, %1822
  %1888 = fmul fast float %1887, %1118
  %1889 = fmul fast float %1888, %1884
  %1890 = fmul fast float %1887, %715
  %1891 = fmul fast float %1890, %1885
  %1892 = fmul fast float %1887, %1119
  %1893 = fmul fast float %1892, %1886
  br label %1894

; <label>:1894                                    ; preds = %1821, %1114
  %1895 = phi float [ %1889, %1821 ], [ 0.000000e+00, %1114 ]
  %1896 = phi float [ %1891, %1821 ], [ 0.000000e+00, %1114 ]
  %1897 = phi float [ %1893, %1821 ], [ 0.000000e+00, %1114 ]
  %1898 = fadd fast float %1895, %1775
  %1899 = fadd fast float %1896, %1776
  %1900 = fadd fast float %1897, %1777
  %1901 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1121)  ; LegacyF32ToF16(value)
  %1902 = call i32 @dx.op.legacyF32ToF16(i32 130, float %720)  ; LegacyF32ToF16(value)
  %1903 = shl i32 %1902, 16
  %1904 = or i32 %1903, %1901
  %1905 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1535)  ; LegacyF32ToF16(value)
  %1906 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1536)  ; LegacyF32ToF16(value)
  %1907 = shl i32 %1906, 16
  %1908 = or i32 %1907, %1905
  %1909 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1537)  ; LegacyF32ToF16(value)
  %1910 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1532)  ; LegacyF32ToF16(value)
  %1911 = shl i32 %1910, 16
  %1912 = or i32 %1911, %1909
  %1913 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1533)  ; LegacyF32ToF16(value)
  %1914 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1534)  ; LegacyF32ToF16(value)
  %1915 = shl i32 %1914, 16
  %1916 = or i32 %1915, %1913
  %1917 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1524)  ; LegacyF32ToF16(value)
  %1918 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1525)  ; LegacyF32ToF16(value)
  %1919 = shl i32 %1918, 16
  %1920 = or i32 %1919, %1917
  %1921 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1526)  ; LegacyF32ToF16(value)
  %1922 = call i32 @dx.op.legacyF32ToF16(i32 130, float 1.000000e+00)  ; LegacyF32ToF16(value)
  %1923 = shl i32 %1922, 16
  %1924 = or i32 %1923, %1921
  %1925 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1529)  ; LegacyF32ToF16(value)
  %1926 = shl i32 %1925, 16
  %1927 = or i32 %1926, 32768
  %1928 = shl nuw nsw i32 %1523, 23
  %1929 = shl i32 %1522, 19
  %1930 = and i32 %1929, -536870912
  %1931 = or i32 %1928, %1930
  %1932 = or i32 %1931, %1922
  %1933 = or i32 %1932, 65536
  %1934 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1898)  ; LegacyF32ToF16(value)
  %1935 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1899)  ; LegacyF32ToF16(value)
  %1936 = shl i32 %1935, 16
  %1937 = or i32 %1936, %1934
  %1938 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1900)  ; LegacyF32ToF16(value)
  %1939 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %1940 = shl i32 %1939, 16
  %1941 = or i32 %1940, %1939
  store float %1188, float* %77, align 4
  store i32 %1904, i32* %716, align 4
  store float 0.000000e+00, float* %707, align 4
  %1942 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 0
  store i32 %1908, i32* %1942, align 4
  %1943 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  store i32 %1912, i32* %1943, align 4
  %1944 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  store i32 %1916, i32* %1944, align 4
  %1945 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 0
  store i32 %1920, i32* %1945, align 4
  %1946 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 1
  store i32 %1924, i32* %1946, align 4
  %1947 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 %1927, i32* %1947, align 4
  store i32 %1933, i32* %78, align 4
  %1948 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 0
  store i32 %1937, i32* %1948, align 4
  %1949 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 1
  store i32 %1938, i32* %1949, align 4
  %1950 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 6911, i32* %1950, align 4
  %1951 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 0
  store i32 %1941, i32* %1951, align 4
  %1952 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 1
  store i32 %1941, i32* %1952, align 4
  %1953 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 10
  store i32 0, i32* %1953, align 4
  br i1 %81, label %1954, label %1969

; <label>:1954                                    ; preds = %1894
  %1955 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %1956 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %70, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %1957 = extractvalue %dx.types.CBufRet.i32 %1956, 3
  %1958 = sub i32 %1955, %1957
  %1959 = mul i32 %824, 40
  %1960 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %46)  ; CreateHandleForLib(Resource)
  %1961 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1960, i32 %1959, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1962 = extractvalue %dx.types.ResRet.f32 %1961, 2
  %1963 = bitcast float %1962 to i32
  %1964 = icmp eq i32 %1963, 1
  %1965 = select i1 %1964, i32 0, i32 %1958
  %1966 = extractvalue %dx.types.ResRet.f32 %1961, 1
  %1967 = bitcast float %1966 to i32
  %1968 = add i32 %1967, %1965
  store i32 %1968, i32* %1950, align 4, !tbaa !126
  br label %1969

; <label>:1969                                    ; preds = %1954, %1894, %703
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayOrigin.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.textureLoad.i32(i32, %dx.types.Handle, i32, i32, i32, i32, i32, i32, i32) #2

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.View(i32, %View) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32, %LandscapeMVF) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32, %LandscapeContinuousLODParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32, %LandscapeParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32, %HitGroupSystemRootConstants) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<float, 4> >"(i32, %"class.Texture3D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32, %"class.Buffer<float>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32, %"class.StructuredBuffer<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture3D<vector<unsigned int, 4> >"(i32, %"class.Texture3D<vector<unsigned int, 4> >") #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!72, !75}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, null, !45, !52}
!5 = !{!6, !8, !10, !11, !12, !13, !14, !15, !16, !17, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35, !36, !37, !38, !39, !40, !41, !42, !43, !44}
!6 = !{i32 0, %"class.Texture3D<vector<unsigned int, 4> >"* @"\01?View_VolumetricLightmapIndirectionTexture@@3V?$Texture3D@V?$vector@I$03@@@@A", !"View_VolumetricLightmapIndirectionTexture", i32 0, i32 0, i32 1, i32 4, i32 0, !7}
!7 = !{i32 0, i32 5}
!8 = !{i32 1, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickAmbientVector@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickAmbientVector", i32 0, i32 1, i32 1, i32 4, i32 0, !9}
!9 = !{i32 0, i32 9}
!10 = !{i32 2, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients0@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients0", i32 0, i32 2, i32 1, i32 4, i32 0, !9}
!11 = !{i32 3, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients1@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients1", i32 0, i32 3, i32 1, i32 4, i32 0, !9}
!12 = !{i32 4, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients2@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients2", i32 0, i32 4, i32 1, i32 4, i32 0, !9}
!13 = !{i32 5, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients3@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients3", i32 0, i32 5, i32 1, i32 4, i32 0, !9}
!14 = !{i32 6, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients4@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients4", i32 0, i32 6, i32 1, i32 4, i32 0, !9}
!15 = !{i32 7, %"class.Texture3D<vector<float, 4> >"* @"\01?View_VolumetricLightmapBrickSHCoefficients5@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_VolumetricLightmapBrickSHCoefficients5", i32 0, i32 7, i32 1, i32 4, i32 0, !9}
!16 = !{i32 8, %"class.Texture3D<vector<float, 4> >"* @"\01?View_SkyBentNormalBrickTexture@@3V?$Texture3D@V?$vector@M$03@@@@A", !"View_SkyBentNormalBrickTexture", i32 0, i32 8, i32 1, i32 4, i32 0, !9}
!17 = !{i32 9, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_PrimitiveSceneData", i32 0, i32 9, i32 1, i32 12, i32 0, !18}
!18 = !{i32 1, i32 16}
!19 = !{i32 10, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_InstanceSceneData", i32 0, i32 10, i32 1, i32 12, i32 0, !18}
!20 = !{i32 11, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_SkyIrradianceEnvironmentMap", i32 0, i32 11, i32 1, i32 12, i32 0, !18}
!21 = !{i32 12, %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", !"View_LandscapeIndirection", i32 0, i32 12, i32 1, i32 10, i32 0, !7}
!22 = !{i32 13, %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", !"View_LandscapePerComponentData", i32 0, i32 13, i32 1, i32 10, i32 0, !9}
!23 = !{i32 14, %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", !"LandscapeContinuousLODParameters_SectionLODBias", i32 0, i32 14, i32 1, i32 10, i32 0, !9}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_HeightmapTexture", i32 0, i32 15, i32 1, i32 2, i32 0, !9}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_NormalmapTexture", i32 0, i32 16, i32 1, i32 2, i32 0, !9}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_XYOffsetmapTexture", i32 0, i32 17, i32 1, i32 2, i32 0, !9}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_0", i32 0, i32 18, i32 1, i32 2, i32 0, !9}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_1", i32 0, i32 19, i32 1, i32 2, i32 0, !9}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_2", i32 0, i32 20, i32 1, i32 2, i32 0, !9}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_3", i32 0, i32 21, i32 1, i32 2, i32 0, !9}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_4", i32 0, i32 22, i32 1, i32 2, i32 0, !9}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_5", i32 0, i32 23, i32 1, i32 2, i32 0, !9}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_6", i32 0, i32 24, i32 1, i32 2, i32 0, !9}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_7", i32 0, i32 25, i32 1, i32 2, i32 0, !9}
!35 = !{i32 26, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_8", i32 0, i32 26, i32 1, i32 2, i32 0, !9}
!36 = !{i32 27, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_9", i32 0, i32 27, i32 1, i32 2, i32 0, !9}
!37 = !{i32 28, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_10", i32 0, i32 28, i32 1, i32 2, i32 0, !9}
!38 = !{i32 29, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_11", i32 0, i32 29, i32 1, i32 2, i32 0, !9}
!39 = !{i32 30, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_12", i32 0, i32 30, i32 1, i32 2, i32 0, !9}
!40 = !{i32 31, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_13", i32 0, i32 31, i32 1, i32 2, i32 0, !9}
!41 = !{i32 32, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_14", i32 0, i32 32, i32 1, i32 2, i32 0, !9}
!42 = !{i32 33, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_15", i32 0, i32 33, i32 1, i32 2, i32 0, !9}
!43 = !{i32 34, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_16", i32 0, i32 34, i32 1, i32 2, i32 0, !9}
!44 = !{i32 35, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!45 = !{!46, !47, !48, !49, !50, !51}
!46 = !{i32 0, %View* @View, !"View", i32 0, i32 0, i32 1, i32 4960, null}
!47 = !{i32 1, %LandscapeMVF* @LandscapeMVF, !"LandscapeMVF", i32 0, i32 1, i32 1, i32 8, null}
!48 = !{i32 2, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, !"LandscapeContinuousLODParameters", i32 0, i32 2, i32 1, i32 24, null}
!49 = !{i32 3, %LandscapeParameters* @LandscapeParameters, !"LandscapeParameters", i32 0, i32 3, i32 1, i32 208, null}
!50 = !{i32 4, %Material* @Material, !"Material", i32 0, i32 4, i32 1, i32 176, null}
!51 = !{i32 5, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 16, null}
!52 = !{!53, !54, !55, !56, !57, !58, !59, !60, !61, !62, !63, !64, !65, !66, !67, !68, !69, !70, !71}
!53 = !{i32 0, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", !"View_MaterialTextureBilinearWrapedSampler", i32 0, i32 0, i32 1, i32 0, null}
!54 = !{i32 1, %struct.SamplerState* @"\01?View_SharedBilinearClampedSampler@@3USamplerState@@A", !"View_SharedBilinearClampedSampler", i32 0, i32 1, i32 1, i32 0, null}
!55 = !{i32 2, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_HeightmapTextureSampler", i32 0, i32 2, i32 1, i32 0, null}
!56 = !{i32 3, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_NormalmapTextureSampler", i32 0, i32 3, i32 1, i32 0, null}
!57 = !{i32 4, %struct.SamplerState* @"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_XYOffsetmapTextureSampler", i32 0, i32 4, i32 1, i32 0, null}
!58 = !{i32 5, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", !"Material_Texture2D_0Sampler", i32 0, i32 5, i32 1, i32 0, null}
!59 = !{i32 6, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", !"Material_Texture2D_1Sampler", i32 0, i32 6, i32 1, i32 0, null}
!60 = !{i32 7, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", !"Material_Texture2D_2Sampler", i32 0, i32 7, i32 1, i32 0, null}
!61 = !{i32 8, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", !"Material_Texture2D_3Sampler", i32 0, i32 8, i32 1, i32 0, null}
!62 = !{i32 9, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", !"Material_Texture2D_4Sampler", i32 0, i32 9, i32 1, i32 0, null}
!63 = !{i32 10, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", !"Material_Texture2D_5Sampler", i32 0, i32 10, i32 1, i32 0, null}
!64 = !{i32 11, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", !"Material_Texture2D_7Sampler", i32 0, i32 11, i32 1, i32 0, null}
!65 = !{i32 12, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", !"Material_Texture2D_8Sampler", i32 0, i32 12, i32 1, i32 0, null}
!66 = !{i32 13, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", !"Material_Texture2D_9Sampler", i32 0, i32 13, i32 1, i32 0, null}
!67 = !{i32 14, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", !"Material_Texture2D_10Sampler", i32 0, i32 14, i32 1, i32 0, null}
!68 = !{i32 15, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", !"Material_Texture2D_12Sampler", i32 0, i32 15, i32 1, i32 0, null}
!69 = !{i32 16, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", !"Material_Texture2D_13Sampler", i32 0, i32 16, i32 1, i32 0, null}
!70 = !{i32 17, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", !"Material_Texture2D_14Sampler", i32 0, i32 17, i32 1, i32 0, null}
!71 = !{i32 18, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", !"Material_Texture2D_15Sampler", i32 0, i32 18, i32 1, i32 0, null}
!72 = !{null, !"", null, !4, !73}
!73 = !{i32 0, i64 8388624, i32 5, !74}
!74 = !{i32 0}
!75 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FDefaultAttributes*)* @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", !"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", null, null, !76}
!76 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !74}
!77 = !{!78, !80}
!78 = distinct !{!78, !79, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %PixelMaterialInputs"}
!79 = distinct !{!79, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z"}
!80 = distinct !{!80, !81, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z: %PixelMaterialInputs"}
!81 = distinct !{!81, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z"}
!82 = !{!83, !78, !80}
!83 = distinct !{!83, !79, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %Parameters"}
!84 = !{!85, !87, !89, !90}
!85 = distinct !{!85, !86, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!86 = distinct !{!86, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!87 = distinct !{!87, !88, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!88 = distinct !{!88, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!89 = distinct !{!89, !88, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!90 = distinct !{!90, !91, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z: %Interpolants"}
!91 = distinct !{!91, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z"}
!92 = !{!93, !95, !96, !98, !99}
!93 = distinct !{!93, !94, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutDiffuseLighting"}
!94 = distinct !{!94, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z"}
!95 = distinct !{!95, !94, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutSubsurfaceLighting"}
!96 = distinct !{!96, !97, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutDiffuseLighting"}
!97 = distinct !{!97, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z"}
!98 = distinct !{!98, !97, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutSubsurfaceLighting"}
!99 = distinct !{!99, !97, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutIndirectIrradiance"}
!100 = !{!101, !78, !80}
!101 = distinct !{!101, !102, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z: %agg.result"}
!102 = distinct !{!102, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z"}
!103 = !{!104, !106, !87, !89, !90}
!104 = distinct !{!104, !105, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!105 = distinct !{!105, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!106 = distinct !{!106, !107, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!107 = distinct !{!107, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!108 = !{!109, !111, !85, !87, !89, !90}
!109 = distinct !{!109, !110, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!110 = distinct !{!110, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!111 = distinct !{!111, !112, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!112 = distinct !{!112, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!113 = !{!114, !96, !98, !99}
!114 = distinct !{!114, !115, !"\01?internal.GetVolumetricLightmapSH3@@YA?AUFThreeBandSHVectorRGB@@V?$vector@M$02@@@Z: %agg.result"}
!115 = distinct !{!115, !"\01?internal.GetVolumetricLightmapSH3@@YA?AUFThreeBandSHVectorRGB@@V?$vector@M$02@@@Z"}
!116 = !{!117, !119, !120, !121, !114, !96, !98, !99}
!117 = distinct !{!117, !118, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %AmbientVector"}
!118 = distinct !{!118, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z"}
!119 = distinct !{!119, !118, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Red"}
!120 = distinct !{!120, !118, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Green"}
!121 = distinct !{!121, !118, !"\01?internal.GetVolumetricLightmapSHCoefficients0@@YAXV?$vector@M$02@@AIAV1@AIAV?$vector@M$03@@22@Z: %SHCoefficients0Blue"}
!122 = !{!123, !123, i64 0}
!123 = !{!"float", !124, i64 0}
!124 = !{!"omnipotent char", !125, i64 0}
!125 = !{!"Simple C/C++ TBAA"}
!126 = !{!127, !127, i64 0}
!127 = !{!"int", !124, i64 0}
!128 = !{!129}
!129 = distinct !{!129, !130, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!130 = distinct !{!130, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!131 = distinct !{!131, !"dx.controlflow.hints", i32 1}
!132 = !{!133}
!133 = distinct !{!133, !134, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!134 = distinct !{!134, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!135 = !{!136}
!136 = distinct !{!136, !137, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!137 = distinct !{!137, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ"}
!138 = !{!87, !89, !90}
!139 = !{!106, !87, !89, !90}
!140 = distinct !{!140, !"dx.controlflow.hints", i32 1}
