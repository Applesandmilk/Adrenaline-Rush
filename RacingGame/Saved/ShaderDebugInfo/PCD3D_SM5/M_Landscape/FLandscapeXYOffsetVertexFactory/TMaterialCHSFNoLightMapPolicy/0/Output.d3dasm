; shader hash: 0277184fd090eb126ac612c561bcae0e
;
; Buffer Definitions:
;
; cbuffer View
; {
;
;   struct View
;   {
;
;       row_major float4x4 View_TranslatedWorldToClip;; Offset:    0
;       row_major float4x4 View_RelativeWorldToClip;  ; Offset:   64
;       row_major float4x4 View_ClipToRelativeWorld;  ; Offset:  128
;       row_major float4x4 View_TranslatedWorldToView;; Offset:  192
;       row_major float4x4 View_ViewToTranslatedWorld;; Offset:  256
;       row_major float4x4 View_TranslatedWorldToCameraView;; Offset:  320
;       row_major float4x4 View_CameraViewToTranslatedWorld;; Offset:  384
;       row_major float4x4 View_ViewToClip;           ; Offset:  448
;       row_major float4x4 View_ViewToClipNoAA;       ; Offset:  512
;       row_major float4x4 View_ClipToView;           ; Offset:  576
;       row_major float4x4 View_ClipToTranslatedWorld;; Offset:  640
;       row_major float4x4 View_SVPositionToTranslatedWorld;; Offset:  704
;       row_major float4x4 View_ScreenToRelativeWorld;; Offset:  768
;       row_major float4x4 View_ScreenToTranslatedWorld;; Offset:  832
;       row_major float4x4 View_MobileMultiviewShadowTransform;; Offset:  896
;       float3 View_ViewTilePosition;                 ; Offset:  960
;       float PrePadding_View_972;                    ; Offset:  972
;       float3 View_MatrixTilePosition;               ; Offset:  976
;       float PrePadding_View_988;                    ; Offset:  988
;       float3 View_ViewForward;                      ; Offset:  992
;       float PrePadding_View_1004;                   ; Offset: 1004
;       float3 View_ViewUp;                           ; Offset: 1008
;       float PrePadding_View_1020;                   ; Offset: 1020
;       float3 View_ViewRight;                        ; Offset: 1024
;       float PrePadding_View_1036;                   ; Offset: 1036
;       float3 View_HMDViewNoRollUp;                  ; Offset: 1040
;       float PrePadding_View_1052;                   ; Offset: 1052
;       float3 View_HMDViewNoRollRight;               ; Offset: 1056
;       float PrePadding_View_1068;                   ; Offset: 1068
;       float4 View_InvDeviceZToWorldZTransform;      ; Offset: 1072
;       float4 View_ScreenPositionScaleBias;          ; Offset: 1088
;       float3 View_RelativeWorldCameraOrigin;        ; Offset: 1104
;       float PrePadding_View_1116;                   ; Offset: 1116
;       float3 View_TranslatedWorldCameraOrigin;      ; Offset: 1120
;       float PrePadding_View_1132;                   ; Offset: 1132
;       float3 View_RelativeWorldViewOrigin;          ; Offset: 1136
;       float PrePadding_View_1148;                   ; Offset: 1148
;       float3 View_RelativePreViewTranslation;       ; Offset: 1152
;       float PrePadding_View_1164;                   ; Offset: 1164
;       row_major float4x4 View_PrevViewToClip;       ; Offset: 1168
;       row_major float4x4 View_PrevClipToView;       ; Offset: 1232
;       row_major float4x4 View_PrevTranslatedWorldToClip;; Offset: 1296
;       row_major float4x4 View_PrevTranslatedWorldToView;; Offset: 1360
;       row_major float4x4 View_PrevViewToTranslatedWorld;; Offset: 1424
;       row_major float4x4 View_PrevTranslatedWorldToCameraView;; Offset: 1488
;       row_major float4x4 View_PrevCameraViewToTranslatedWorld;; Offset: 1552
;       float3 View_PrevTranslatedWorldCameraOrigin;  ; Offset: 1616
;       float PrePadding_View_1628;                   ; Offset: 1628
;       float3 View_PrevRelativeWorldCameraOrigin;    ; Offset: 1632
;       float PrePadding_View_1644;                   ; Offset: 1644
;       float3 View_PrevRelativeWorldViewOrigin;      ; Offset: 1648
;       float PrePadding_View_1660;                   ; Offset: 1660
;       float3 View_RelativePrevPreViewTranslation;   ; Offset: 1664
;       float PrePadding_View_1676;                   ; Offset: 1676
;       row_major float4x4 View_PrevClipToRelativeWorld;; Offset: 1680
;       row_major float4x4 View_PrevScreenToTranslatedWorld;; Offset: 1744
;       row_major float4x4 View_ClipToPrevClip;       ; Offset: 1808
;       row_major float4x4 View_ClipToPrevClipWithAA; ; Offset: 1872
;       float4 View_TemporalAAJitter;                 ; Offset: 1936
;       float4 View_GlobalClippingPlane;              ; Offset: 1952
;       float2 View_FieldOfViewWideAngles;            ; Offset: 1968
;       float2 View_PrevFieldOfViewWideAngles;        ; Offset: 1976
;       float4 View_ViewRectMin;                      ; Offset: 1984
;       float4 View_ViewSizeAndInvSize;               ; Offset: 2000
;       float4 View_LightProbeSizeRatioAndInvSizeRatio;; Offset: 2016
;       float4 View_BufferSizeAndInvSize;             ; Offset: 2032
;       float4 View_BufferBilinearUVMinMax;           ; Offset: 2048
;       float4 View_ScreenToViewSpace;                ; Offset: 2064
;       int View_NumSceneColorMSAASamples;            ; Offset: 2080
;       float View_PreExposure;                       ; Offset: 2084
;       float View_OneOverPreExposure;                ; Offset: 2088
;       float PrePadding_View_2092;                   ; Offset: 2092
;       float4 View_DiffuseOverrideParameter;         ; Offset: 2096
;       float4 View_SpecularOverrideParameter;        ; Offset: 2112
;       float4 View_NormalOverrideParameter;          ; Offset: 2128
;       float2 View_RoughnessOverrideParameter;       ; Offset: 2144
;       float View_PrevFrameGameTime;                 ; Offset: 2152
;       float View_PrevFrameRealTime;                 ; Offset: 2156
;       float View_OutOfBoundsMask;                   ; Offset: 2160
;       float PrePadding_View_2164;                   ; Offset: 2164
;       float PrePadding_View_2168;                   ; Offset: 2168
;       float PrePadding_View_2172;                   ; Offset: 2172
;       float3 View_WorldCameraMovementSinceLastFrame;; Offset: 2176
;       float View_CullingSign;                       ; Offset: 2188
;       float View_NearPlane;                         ; Offset: 2192
;       float View_GameTime;                          ; Offset: 2196
;       float View_RealTime;                          ; Offset: 2200
;       float View_DeltaTime;                         ; Offset: 2204
;       float View_MaterialTextureMipBias;            ; Offset: 2208
;       float View_MaterialTextureDerivativeMultiply; ; Offset: 2212
;       uint View_Random;                             ; Offset: 2216
;       uint View_FrameNumber;                        ; Offset: 2220
;       uint View_StateFrameIndexMod8;                ; Offset: 2224
;       uint View_StateFrameIndex;                    ; Offset: 2228
;       uint View_DebugViewModeMask;                  ; Offset: 2232
;       float View_CameraCut;                         ; Offset: 2236
;       float View_UnlitViewmodeMask;                 ; Offset: 2240
;       float PrePadding_View_2244;                   ; Offset: 2244
;       float PrePadding_View_2248;                   ; Offset: 2248
;       float PrePadding_View_2252;                   ; Offset: 2252
;       float4 View_DirectionalLightColor;            ; Offset: 2256
;       float3 View_DirectionalLightDirection;        ; Offset: 2272
;       float PrePadding_View_2284;                   ; Offset: 2284
;       float4 View_TranslucencyLightingVolumeMin[2]; ; Offset: 2288
;       float4 View_TranslucencyLightingVolumeInvSize[2];; Offset: 2320
;       float4 View_TemporalAAParams;                 ; Offset: 2352
;       float4 View_CircleDOFParams;                  ; Offset: 2368
;       uint View_ForceDrawAllVelocities;             ; Offset: 2384
;       float View_DepthOfFieldSensorWidth;           ; Offset: 2388
;       float View_DepthOfFieldFocalDistance;         ; Offset: 2392
;       float View_DepthOfFieldScale;                 ; Offset: 2396
;       float View_DepthOfFieldFocalLength;           ; Offset: 2400
;       float View_DepthOfFieldFocalRegion;           ; Offset: 2404
;       float View_DepthOfFieldNearTransitionRegion;  ; Offset: 2408
;       float View_DepthOfFieldFarTransitionRegion;   ; Offset: 2412
;       float View_MotionBlurNormalizedToPixel;       ; Offset: 2416
;       float View_GeneralPurposeTweak;               ; Offset: 2420
;       float View_GeneralPurposeTweak2;              ; Offset: 2424
;       float View_DemosaicVposOffset;                ; Offset: 2428
;       float View_DecalDepthBias;                    ; Offset: 2432
;       float PrePadding_View_2436;                   ; Offset: 2436
;       float PrePadding_View_2440;                   ; Offset: 2440
;       float PrePadding_View_2444;                   ; Offset: 2444
;       float3 View_IndirectLightingColorScale;       ; Offset: 2448
;       float PrePadding_View_2460;                   ; Offset: 2460
;       float3 View_PrecomputedIndirectLightingColorScale;; Offset: 2464
;       float PrePadding_View_2476;                   ; Offset: 2476
;       float3 View_PrecomputedIndirectSpecularColorScale;; Offset: 2480
;       float PrePadding_View_2492;                   ; Offset: 2492
;       float4 View_AtmosphereLightDirection[2];      ; Offset: 2496
;       float4 View_AtmosphereLightIlluminanceOnGroundPostTransmittance[2];; Offset: 2528
;       float4 View_AtmosphereLightIlluminanceOuterSpace[2];; Offset: 2560
;       float4 View_AtmosphereLightDiscLuminance[2];  ; Offset: 2592
;       float4 View_AtmosphereLightDiscCosHalfApexAngle[2];; Offset: 2624
;       float4 View_SkyViewLutSizeAndInvSize;         ; Offset: 2656
;       float3 View_SkyCameraTranslatedWorldOrigin;   ; Offset: 2672
;       float PrePadding_View_2684;                   ; Offset: 2684
;       float4 View_SkyPlanetTranslatedWorldCenterAndViewHeight;; Offset: 2688
;       row_major float4x4 View_SkyViewLutReferential;; Offset: 2704
;       float4 View_SkyAtmosphereSkyLuminanceFactor;  ; Offset: 2768
;       float View_SkyAtmospherePresentInScene;       ; Offset: 2784
;       float View_SkyAtmosphereHeightFogContribution;; Offset: 2788
;       float View_SkyAtmosphereBottomRadiusKm;       ; Offset: 2792
;       float View_SkyAtmosphereTopRadiusKm;          ; Offset: 2796
;       float4 View_SkyAtmosphereCameraAerialPerspectiveVolumeSizeAndInvSize;; Offset: 2800
;       float View_SkyAtmosphereAerialPerspectiveStartDepthKm;; Offset: 2816
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolution;; Offset: 2820
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthResolutionInv;; Offset: 2824
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKm;; Offset: 2828
;       float View_SkyAtmosphereCameraAerialPerspectiveVolumeDepthSliceLengthKmInv;; Offset: 2832
;       float View_SkyAtmosphereApplyCameraAerialPerspectiveVolume;; Offset: 2836
;       float PrePadding_View_2840;                   ; Offset: 2840
;       float PrePadding_View_2844;                   ; Offset: 2844
;       float3 View_NormalCurvatureToRoughnessScaleBias;; Offset: 2848
;       float View_RenderingReflectionCaptureMask;    ; Offset: 2860
;       float View_RealTimeReflectionCapture;         ; Offset: 2864
;       float View_RealTimeReflectionCapturePreExposure;; Offset: 2868
;       float PrePadding_View_2872;                   ; Offset: 2872
;       float PrePadding_View_2876;                   ; Offset: 2876
;       float4 View_AmbientCubemapTint;               ; Offset: 2880
;       float View_AmbientCubemapIntensity;           ; Offset: 2896
;       float View_SkyLightApplyPrecomputedBentNormalShadowingFlag;; Offset: 2900
;       float View_SkyLightAffectReflectionFlag;      ; Offset: 2904
;       float View_SkyLightAffectGlobalIlluminationFlag;; Offset: 2908
;       float4 View_SkyLightColor;                    ; Offset: 2912
;       float4 View_MobileSkyIrradianceEnvironmentMap[7];; Offset: 2928
;       float View_MobilePreviewMode;                 ; Offset: 3040
;       float View_HMDEyePaddingOffset;               ; Offset: 3044
;       float View_ReflectionCubemapMaxMip;           ; Offset: 3048
;       float View_ShowDecalsMask;                    ; Offset: 3052
;       uint View_DistanceFieldAOSpecularOcclusionMode;; Offset: 3056
;       float View_IndirectCapsuleSelfShadowingIntensity;; Offset: 3060
;       float PrePadding_View_3064;                   ; Offset: 3064
;       float PrePadding_View_3068;                   ; Offset: 3068
;       float3 View_ReflectionEnvironmentRoughnessMixingScaleBiasAndLargestWeight;; Offset: 3072
;       int View_StereoPassIndex;                     ; Offset: 3084
;       float4 View_GlobalVolumeCenterAndExtent[6];   ; Offset: 3088
;       float4 View_GlobalVolumeWorldToUVAddAndMul[6];; Offset: 3184
;       float4 View_GlobalDistanceFieldMipWorldToUVScale[6];; Offset: 3280
;       float4 View_GlobalDistanceFieldMipWorldToUVBias[6];; Offset: 3376
;       float View_GlobalDistanceFieldMipFactor;      ; Offset: 3472
;       float View_GlobalDistanceFieldMipTransition;  ; Offset: 3476
;       int View_GlobalDistanceFieldClipmapSizeInPages;; Offset: 3480
;       int PrePadding_View_3484;                     ; Offset: 3484
;       float3 View_GlobalDistanceFieldInvPageAtlasSize;; Offset: 3488
;       float PrePadding_View_3500;                   ; Offset: 3500
;       float3 View_GlobalDistanceFieldInvCoverageAtlasSize;; Offset: 3504
;       float View_GlobalVolumeDimension;             ; Offset: 3516
;       float View_GlobalVolumeTexelSize;             ; Offset: 3520
;       float View_MaxGlobalDFAOConeDistance;         ; Offset: 3524
;       uint View_NumGlobalSDFClipmaps;               ; Offset: 3528
;       float View_FullyCoveredExpandSurfaceScale;    ; Offset: 3532
;       float View_UncoveredExpandSurfaceScale;       ; Offset: 3536
;       float View_UncoveredMinStepScale;             ; Offset: 3540
;       int2 View_CursorPosition;                     ; Offset: 3544
;       float View_bCheckerboardSubsurfaceProfileRendering;; Offset: 3552
;       float PrePadding_View_3556;                   ; Offset: 3556
;       float PrePadding_View_3560;                   ; Offset: 3560
;       float PrePadding_View_3564;                   ; Offset: 3564
;       float3 View_VolumetricFogInvGridSize;         ; Offset: 3568
;       float PrePadding_View_3580;                   ; Offset: 3580
;       float3 View_VolumetricFogGridZParams;         ; Offset: 3584
;       float PrePadding_View_3596;                   ; Offset: 3596
;       float2 View_VolumetricFogSVPosToVolumeUV;     ; Offset: 3600
;       float View_VolumetricFogMaxDistance;          ; Offset: 3608
;       float PrePadding_View_3612;                   ; Offset: 3612
;       float3 View_VolumetricLightmapWorldToUVScale; ; Offset: 3616
;       float PrePadding_View_3628;                   ; Offset: 3628
;       float3 View_VolumetricLightmapWorldToUVAdd;   ; Offset: 3632
;       float PrePadding_View_3644;                   ; Offset: 3644
;       float3 View_VolumetricLightmapIndirectionTextureSize;; Offset: 3648
;       float View_VolumetricLightmapBrickSize;       ; Offset: 3660
;       float3 View_VolumetricLightmapBrickTexelSize; ; Offset: 3664
;       float View_StereoIPD;                         ; Offset: 3676
;       float View_IndirectLightingCacheShowFlag;     ; Offset: 3680
;       float View_EyeToPixelSpreadAngle;             ; Offset: 3684
;       float PrePadding_View_3688;                   ; Offset: 3688
;       float PrePadding_View_3692;                   ; Offset: 3692
;       float4 View_XRPassthroughCameraUVs[2];        ; Offset: 3696
;       float View_GlobalVirtualTextureMipBias;       ; Offset: 3728
;       uint View_VirtualTextureFeedbackShift;        ; Offset: 3732
;       uint View_VirtualTextureFeedbackMask;         ; Offset: 3736
;       uint View_VirtualTextureFeedbackStride;       ; Offset: 3740
;       uint View_VirtualTextureFeedbackJitterOffset; ; Offset: 3744
;       uint View_VirtualTextureFeedbackSampleOffset; ; Offset: 3748
;       uint PrePadding_View_3752;                    ; Offset: 3752
;       uint PrePadding_View_3756;                    ; Offset: 3756
;       float4 View_RuntimeVirtualTextureMipLevel;    ; Offset: 3760
;       float2 View_RuntimeVirtualTexturePackHeight;  ; Offset: 3776
;       float PrePadding_View_3784;                   ; Offset: 3784
;       float PrePadding_View_3788;                   ; Offset: 3788
;       float4 View_RuntimeVirtualTextureDebugParams; ; Offset: 3792
;       float View_OverrideLandscapeLOD;              ; Offset: 3808
;       int View_FarShadowStaticMeshLODBias;          ; Offset: 3812
;       float View_MinRoughness;                      ; Offset: 3816
;       float PrePadding_View_3820;                   ; Offset: 3820
;       float4 View_HairRenderInfo;                   ; Offset: 3824
;       uint View_EnableSkyLight;                     ; Offset: 3840
;       uint View_HairRenderInfoBits;                 ; Offset: 3844
;       uint View_HairComponents;                     ; Offset: 3848
;       float View_bSubsurfacePostprocessEnabled;     ; Offset: 3852
;       float4 View_SSProfilesTextureSizeAndInvSize;  ; Offset: 3856
;       float4 View_SSProfilesPreIntegratedTextureSizeAndInvSize;; Offset: 3872
;       float3 View_PhysicsFieldClipmapCenter;        ; Offset: 3888
;       float View_PhysicsFieldClipmapDistance;       ; Offset: 3900
;       int View_PhysicsFieldClipmapResolution;       ; Offset: 3904
;       int View_PhysicsFieldClipmapExponent;         ; Offset: 3908
;       int View_PhysicsFieldClipmapCount;            ; Offset: 3912
;       int View_PhysicsFieldTargetCount;             ; Offset: 3916
;       int4 View_PhysicsFieldTargets[32];            ; Offset: 3920
;       uint View_InstanceSceneDataSOAStride;         ; Offset: 4432
;       uint View_GPUSceneViewId;                     ; Offset: 4436
;       uint PrePadding_View_4440;                    ; Offset: 4440
;       uint PrePadding_View_4444;                    ; Offset: 4444
;       uint PrePadding_View_4448;                    ; Offset: 4448
;       uint PrePadding_View_4452;                    ; Offset: 4452
;       uint PrePadding_View_4456;                    ; Offset: 4456
;       uint PrePadding_View_4460;                    ; Offset: 4460
;       uint PrePadding_View_4464;                    ; Offset: 4464
;       uint PrePadding_View_4468;                    ; Offset: 4468
;       uint PrePadding_View_4472;                    ; Offset: 4472
;       uint PrePadding_View_4476;                    ; Offset: 4476
;       uint PrePadding_View_4480;                    ; Offset: 4480
;       uint PrePadding_View_4484;                    ; Offset: 4484
;       uint PrePadding_View_4488;                    ; Offset: 4488
;       uint PrePadding_View_4492;                    ; Offset: 4492
;       uint PrePadding_View_4496;                    ; Offset: 4496
;       uint PrePadding_View_4500;                    ; Offset: 4500
;       uint PrePadding_View_4504;                    ; Offset: 4504
;       uint PrePadding_View_4508;                    ; Offset: 4508
;       uint PrePadding_View_4512;                    ; Offset: 4512
;       uint PrePadding_View_4516;                    ; Offset: 4516
;       uint PrePadding_View_4520;                    ; Offset: 4520
;       uint PrePadding_View_4524;                    ; Offset: 4524
;       uint PrePadding_View_4528;                    ; Offset: 4528
;       uint PrePadding_View_4532;                    ; Offset: 4532
;       uint PrePadding_View_4536;                    ; Offset: 4536
;       uint PrePadding_View_4540;                    ; Offset: 4540
;       uint PrePadding_View_4544;                    ; Offset: 4544
;       uint PrePadding_View_4548;                    ; Offset: 4548
;       uint PrePadding_View_4552;                    ; Offset: 4552
;       uint PrePadding_View_4556;                    ; Offset: 4556
;       uint PrePadding_View_4560;                    ; Offset: 4560
;       uint PrePadding_View_4564;                    ; Offset: 4564
;       uint PrePadding_View_4568;                    ; Offset: 4568
;       uint PrePadding_View_4572;                    ; Offset: 4572
;       uint PrePadding_View_4576;                    ; Offset: 4576
;       uint PrePadding_View_4580;                    ; Offset: 4580
;       uint PrePadding_View_4584;                    ; Offset: 4584
;       uint PrePadding_View_4588;                    ; Offset: 4588
;       uint PrePadding_View_4592;                    ; Offset: 4592
;       uint PrePadding_View_4596;                    ; Offset: 4596
;       uint PrePadding_View_4600;                    ; Offset: 4600
;       uint PrePadding_View_4604;                    ; Offset: 4604
;       uint PrePadding_View_4608;                    ; Offset: 4608
;       uint PrePadding_View_4612;                    ; Offset: 4612
;       uint PrePadding_View_4616;                    ; Offset: 4616
;       uint PrePadding_View_4620;                    ; Offset: 4620
;       uint PrePadding_View_4624;                    ; Offset: 4624
;       uint PrePadding_View_4628;                    ; Offset: 4628
;       uint PrePadding_View_4632;                    ; Offset: 4632
;       uint PrePadding_View_4636;                    ; Offset: 4636
;       uint PrePadding_View_4640;                    ; Offset: 4640
;       uint PrePadding_View_4644;                    ; Offset: 4644
;       uint PrePadding_View_4648;                    ; Offset: 4648
;       uint PrePadding_View_4652;                    ; Offset: 4652
;       uint PrePadding_View_4656;                    ; Offset: 4656
;       uint PrePadding_View_4660;                    ; Offset: 4660
;       uint PrePadding_View_4664;                    ; Offset: 4664
;       uint PrePadding_View_4668;                    ; Offset: 4668
;       uint PrePadding_View_4672;                    ; Offset: 4672
;       uint PrePadding_View_4676;                    ; Offset: 4676
;       uint PrePadding_View_4680;                    ; Offset: 4680
;       uint PrePadding_View_4684;                    ; Offset: 4684
;       uint PrePadding_View_4688;                    ; Offset: 4688
;       uint PrePadding_View_4692;                    ; Offset: 4692
;       uint PrePadding_View_4696;                    ; Offset: 4696
;       uint PrePadding_View_4700;                    ; Offset: 4700
;       uint PrePadding_View_4704;                    ; Offset: 4704
;       uint PrePadding_View_4708;                    ; Offset: 4708
;       uint PrePadding_View_4712;                    ; Offset: 4712
;       uint PrePadding_View_4716;                    ; Offset: 4716
;       uint PrePadding_View_4720;                    ; Offset: 4720
;       uint PrePadding_View_4724;                    ; Offset: 4724
;       uint PrePadding_View_4728;                    ; Offset: 4728
;       uint PrePadding_View_4732;                    ; Offset: 4732
;       uint PrePadding_View_4736;                    ; Offset: 4736
;       uint PrePadding_View_4740;                    ; Offset: 4740
;       uint PrePadding_View_4744;                    ; Offset: 4744
;       uint PrePadding_View_4748;                    ; Offset: 4748
;       uint PrePadding_View_4752;                    ; Offset: 4752
;       uint PrePadding_View_4756;                    ; Offset: 4756
;       uint PrePadding_View_4760;                    ; Offset: 4760
;       uint PrePadding_View_4764;                    ; Offset: 4764
;       uint PrePadding_View_4768;                    ; Offset: 4768
;       uint PrePadding_View_4772;                    ; Offset: 4772
;       uint PrePadding_View_4776;                    ; Offset: 4776
;       uint PrePadding_View_4780;                    ; Offset: 4780
;       uint PrePadding_View_4784;                    ; Offset: 4784
;       uint PrePadding_View_4788;                    ; Offset: 4788
;       uint PrePadding_View_4792;                    ; Offset: 4792
;       uint PrePadding_View_4796;                    ; Offset: 4796
;       uint PrePadding_View_4800;                    ; Offset: 4800
;       uint PrePadding_View_4804;                    ; Offset: 4804
;       uint PrePadding_View_4808;                    ; Offset: 4808
;       uint PrePadding_View_4812;                    ; Offset: 4812
;       uint PrePadding_View_4816;                    ; Offset: 4816
;       uint PrePadding_View_4820;                    ; Offset: 4820
;       uint PrePadding_View_4824;                    ; Offset: 4824
;       uint PrePadding_View_4828;                    ; Offset: 4828
;       uint PrePadding_View_4832;                    ; Offset: 4832
;       uint PrePadding_View_4836;                    ; Offset: 4836
;       uint PrePadding_View_4840;                    ; Offset: 4840
;       uint PrePadding_View_4844;                    ; Offset: 4844
;       uint PrePadding_View_4848;                    ; Offset: 4848
;       uint PrePadding_View_4852;                    ; Offset: 4852
;       uint PrePadding_View_4856;                    ; Offset: 4856
;       uint PrePadding_View_4860;                    ; Offset: 4860
;       uint PrePadding_View_4864;                    ; Offset: 4864
;       uint PrePadding_View_4868;                    ; Offset: 4868
;       uint PrePadding_View_4872;                    ; Offset: 4872
;       uint PrePadding_View_4876;                    ; Offset: 4876
;       uint PrePadding_View_4880;                    ; Offset: 4880
;       uint PrePadding_View_4884;                    ; Offset: 4884
;       uint PrePadding_View_4888;                    ; Offset: 4888
;       uint PrePadding_View_4892;                    ; Offset: 4892
;       uint PrePadding_View_4896;                    ; Offset: 4896
;       uint PrePadding_View_4900;                    ; Offset: 4900
;       uint PrePadding_View_4904;                    ; Offset: 4904
;       uint PrePadding_View_4908;                    ; Offset: 4908
;       uint PrePadding_View_4912;                    ; Offset: 4912
;       uint PrePadding_View_4916;                    ; Offset: 4916
;       uint PrePadding_View_4920;                    ; Offset: 4920
;       uint PrePadding_View_4924;                    ; Offset: 4924
;       uint PrePadding_View_4928;                    ; Offset: 4928
;       uint PrePadding_View_4932;                    ; Offset: 4932
;       uint PrePadding_View_4936;                    ; Offset: 4936
;       uint PrePadding_View_4940;                    ; Offset: 4940
;       uint PrePadding_View_4944;                    ; Offset: 4944
;       uint PrePadding_View_4948;                    ; Offset: 4948
;       uint View_bShadingEnergyConservation;         ; Offset: 4952
;       uint View_bShadingEnergyPreservation;         ; Offset: 4956
;   
;   } View;                                           ; Offset:    0 Size:  4960
;
; }
;
; cbuffer LandscapeMVF
; {
;
;   struct LandscapeMVF
;   {
;
;       int2 LandscapeMVF_SubXY;                      ; Offset:    0
;   
;   } LandscapeMVF;                                   ; Offset:    0 Size:     8
;
; }
;
; cbuffer LandscapeContinuousLODParameters
; {
;
;   struct LandscapeContinuousLODParameters
;   {
;
;       int LandscapeContinuousLODParameters_LandscapeIndex;; Offset:    0
;       int PrePadding_LandscapeContinuousLODParameters_4;; Offset:    4
;       int2 LandscapeContinuousLODParameters_Min;    ; Offset:    8
;       int2 LandscapeContinuousLODParameters_Size;   ; Offset:   16
;   
;   } LandscapeContinuousLODParameters;               ; Offset:    0 Size:    24
;
; }
;
; cbuffer LandscapeParameters
; {
;
;   struct LandscapeParameters
;   {
;
;       int LandscapeParameters_ComponentBaseX;       ; Offset:    0
;       int LandscapeParameters_ComponentBaseY;       ; Offset:    4
;       int LandscapeParameters_SubsectionSizeVerts;  ; Offset:    8
;       int LandscapeParameters_NumSubsections;       ; Offset:   12
;       int LandscapeParameters_LastLOD;              ; Offset:   16
;       int PrePadding_LandscapeParameters_20;        ; Offset:   20
;       int PrePadding_LandscapeParameters_24;        ; Offset:   24
;       int PrePadding_LandscapeParameters_28;        ; Offset:   28
;       float4 LandscapeParameters_HeightmapUVScaleBias;; Offset:   32
;       float4 LandscapeParameters_WeightmapUVScaleBias;; Offset:   48
;       float4 LandscapeParameters_LandscapeLightmapScaleBias;; Offset:   64
;       float4 LandscapeParameters_SubsectionSizeVertsLayerUVPan;; Offset:   80
;       float4 LandscapeParameters_SubsectionOffsetParams;; Offset:   96
;       float4 LandscapeParameters_LightmapSubsectionOffsetParams;; Offset:  112
;       float4 LandscapeParameters_BlendableLayerMask;; Offset:  128
;       row_major float4x4 LandscapeParameters_LocalToWorldNoScaling;; Offset:  144
;   
;   } LandscapeParameters;                            ; Offset:    0 Size:   208
;
; }
;
; cbuffer Material
; {
;
;   struct Material
;   {
;
;       float4 Material_PreshaderBuffer[11];          ; Offset:    0
;   
;   } Material;                                       ; Offset:    0 Size:   176
;
; }
;
; cbuffer HitGroupSystemRootConstants
; {
;
;   struct HitGroupSystemRootConstants
;   {
;
;       struct struct.FHitGroupSystemRootConstants
;       {
;
;           uint Config;                              ; Offset:    0
;           uint IndexBufferOffsetInBytes;            ; Offset:    4
;           uint UserData;                            ; Offset:    8
;           uint BaseInstanceIndex;                   ; Offset:   12
;       
;       } HitGroupSystemRootConstants;                ; Offset:    0
;
;   
;   } HitGroupSystemRootConstants;                    ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_PrimitiveSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_InstanceSceneData
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
; Resource bind info for View_SkyIrradianceEnvironmentMap
; {
;
;   float4 $Element;                                  ; Offset:    0 Size:    16
;
; }
;
;
; Resource Bindings:
;
; Name                                 Type  Format         Dim      ID      HLSL Bind  Count
; ------------------------------ ---------- ------- ----------- ------- -------------- ------
; View                              cbuffer      NA          NA     CB0            cb0     1
; LandscapeMVF                      cbuffer      NA          NA     CB1            cb1     1
; LandscapeContinuousLODParameters   cbuffer      NA          NA     CB2            cb2     1
; LandscapeParameters               cbuffer      NA          NA     CB3            cb3     1
; Material                          cbuffer      NA          NA     CB4            cb4     1
; HitGroupSystemRootConstants       cbuffer      NA          NA     CB5     cb0,space2     1
; View_MaterialTextureBilinearWrapedSampler   sampler      NA          NA      S0             s0     1
; LandscapeParameters_HeightmapTextureSampler   sampler      NA          NA      S1             s1     1
; LandscapeParameters_NormalmapTextureSampler   sampler      NA          NA      S2             s2     1
; LandscapeParameters_XYOffsetmapTextureSampler   sampler      NA          NA      S3             s3     1
; Material_Texture2D_0Sampler       sampler      NA          NA      S4             s4     1
; Material_Texture2D_1Sampler       sampler      NA          NA      S5             s5     1
; Material_Texture2D_2Sampler       sampler      NA          NA      S6             s6     1
; Material_Texture2D_3Sampler       sampler      NA          NA      S7             s7     1
; Material_Texture2D_4Sampler       sampler      NA          NA      S8             s8     1
; Material_Texture2D_5Sampler       sampler      NA          NA      S9             s9     1
; Material_Texture2D_7Sampler       sampler      NA          NA     S10            s10     1
; Material_Texture2D_8Sampler       sampler      NA          NA     S11            s11     1
; Material_Texture2D_9Sampler       sampler      NA          NA     S12            s12     1
; Material_Texture2D_10Sampler      sampler      NA          NA     S13            s13     1
; Material_Texture2D_12Sampler      sampler      NA          NA     S14            s14     1
; Material_Texture2D_13Sampler      sampler      NA          NA     S15            s15     1
; Material_Texture2D_14Sampler      sampler      NA          NA     S16            s16     1
; Material_Texture2D_15Sampler      sampler      NA          NA     S17            s17     1
; View_PrimitiveSceneData           texture  struct         r/o      T0             t0     1
; View_InstanceSceneData            texture  struct         r/o      T1             t1     1
; View_SkyIrradianceEnvironmentMap   texture  struct         r/o      T2             t2     1
; View_LandscapeIndirection         texture     u32         buf      T3             t3     1
; View_LandscapePerComponentData    texture     f32         buf      T4             t4     1
; LandscapeContinuousLODParameters_SectionLODBias   texture     f32         buf      T5             t5     1
; LandscapeParameters_HeightmapTexture   texture     f32          2d      T6             t6     1
; LandscapeParameters_NormalmapTexture   texture     f32          2d      T7             t7     1
; LandscapeParameters_XYOffsetmapTexture   texture     f32          2d      T8             t8     1
; Material_Texture2D_0              texture     f32          2d      T9             t9     1
; Material_Texture2D_1              texture     f32          2d     T10            t10     1
; Material_Texture2D_2              texture     f32          2d     T11            t11     1
; Material_Texture2D_3              texture     f32          2d     T12            t12     1
; Material_Texture2D_4              texture     f32          2d     T13            t13     1
; Material_Texture2D_5              texture     f32          2d     T14            t14     1
; Material_Texture2D_6              texture     f32          2d     T15            t15     1
; Material_Texture2D_7              texture     f32          2d     T16            t16     1
; Material_Texture2D_8              texture     f32          2d     T17            t17     1
; Material_Texture2D_9              texture     f32          2d     T18            t18     1
; Material_Texture2D_10             texture     f32          2d     T19            t19     1
; Material_Texture2D_11             texture     f32          2d     T20            t20     1
; Material_Texture2D_12             texture     f32          2d     T21            t21     1
; Material_Texture2D_13             texture     f32          2d     T22            t22     1
; Material_Texture2D_14             texture     f32          2d     T23            t23     1
; Material_Texture2D_15             texture     f32          2d     T24            t24     1
; Material_Texture2D_16             texture     f32          2d     T25            t25     1
; HitGroupSystemIndexBuffer         texture    byte         r/o     T26      t0,space2     1
;
target datalayout = "e-m:e-p:32:32-i1:32-i8:8-i16:16-i32:32-i64:64-f16:16-f32:32-f64:64-n8:16:32:64"
target triple = "dxil-ms-dx"

%struct.SamplerState = type { i32 }
%"class.StructuredBuffer<vector<float, 4> >" = type { <4 x float> }
%"class.Buffer<unsigned int>" = type { i32 }
%"class.Buffer<float>" = type { float }
%"class.Texture2D<vector<float, 4> >" = type { <4 x float>, %"class.Texture2D<vector<float, 4> >::mips_type" }
%"class.Texture2D<vector<float, 4> >::mips_type" = type { i32 }
%struct.ByteAddressBuffer = type { i32 }
%View = type { %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <4 x float>, <4 x float>, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, %class.matrix.float.4.4, <4 x float>, <4 x float>, <2 x float>, <2 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, i32, float, float, float, <4 x float>, <4 x float>, <4 x float>, <2 x float>, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, float, float, i32, i32, i32, i32, i32, float, float, float, float, float, <4 x float>, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <4 x float>, i32, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], [2 x <4 x float>], <4 x float>, <3 x float>, float, <4 x float>, %class.matrix.float.4.4, <4 x float>, float, float, float, float, <4 x float>, float, float, float, float, float, float, float, float, <3 x float>, float, float, float, float, float, <4 x float>, float, float, float, float, <4 x float>, [7 x <4 x float>], float, float, float, float, i32, float, float, float, <3 x float>, i32, [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], [6 x <4 x float>], float, float, i32, i32, <3 x float>, float, <3 x float>, float, float, float, i32, float, float, float, <2 x i32>, float, float, float, float, <3 x float>, float, <3 x float>, float, <2 x float>, float, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, <3 x float>, float, float, float, float, float, [2 x <4 x float>], float, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <2 x float>, float, float, <4 x float>, float, i32, float, float, <4 x float>, i32, i32, i32, float, <4 x float>, <4 x float>, <3 x float>, float, i32, i32, i32, i32, [32 x <4 x i32>], i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32, i32 }
%class.matrix.float.4.4 = type { [4 x <4 x float>] }
%LandscapeMVF = type { <2 x i32> }
%LandscapeContinuousLODParameters = type { i32, i32, <2 x i32>, <2 x i32> }
%LandscapeParameters = type { i32, i32, i32, i32, i32, i32, i32, i32, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, <4 x float>, %class.matrix.float.4.4 }
%Material = type { [11 x <4 x float>] }
%HitGroupSystemRootConstants = type { %struct.FHitGroupSystemRootConstants }
%struct.FHitGroupSystemRootConstants = type { i32, i32, i32, i32 }
%struct.FPackedMaterialClosestHitPayload = type { %struct.FMinimalPayload, i32, float, [3 x i32], [2 x i32], i32, i32, [2 x i32], i32, [2 x i32], i32 }
%struct.FMinimalPayload = type { float }
%struct.FDefaultAttributes = type { <2 x float> }
%dx.types.Handle = type { i8* }
%dx.types.CBufRet.i32 = type { i32, i32, i32, i32 }
%dx.types.ResRet.i32 = type { i32, i32, i32, i32, i32 }
%dx.types.CBufRet.f32 = type { float, float, float, float }
%dx.types.ResRet.f32 = type { float, float, float, float, i32 }

@"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A" = external constant %"class.StructuredBuffer<vector<float, 4> >", align 4
@"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A" = external constant %"class.Buffer<unsigned int>", align 4
@"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A" = external constant %"class.Buffer<float>", align 4
@"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_0Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_1Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_2Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_3Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_4Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_5Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_7Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_8Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_9Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_10Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_12Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_13Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_14Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?Material_Texture2D_15Sampler@@3USamplerState@@A" = external constant %struct.SamplerState, align 4
@"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A" = external constant %"class.Texture2D<vector<float, 4> >", align 4
@"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A" = external constant %struct.ByteAddressBuffer, align 4
@llvm.global_ctors = appending global [0 x { i32, void ()*, i8* }] zeroinitializer
@View = external constant %View
@LandscapeMVF = external constant %LandscapeMVF
@LandscapeContinuousLODParameters = external constant %LandscapeContinuousLODParameters
@LandscapeParameters = external constant %LandscapeParameters
@Material = external constant %Material
@HitGroupSystemRootConstants = external constant %HitGroupSystemRootConstants
@NeighborOffset.i.i.i.i.i.0.hca = internal unnamed_addr constant [4 x i32] [i32 0, i32 -1, i32 1, i32 0]
@NeighborOffset.i.i.i.i.i.1.hca = internal unnamed_addr constant [4 x i32] [i32 -1, i32 0, i32 0, i32 1]

; Function Attrs: nounwind
define void @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z"(%struct.FPackedMaterialClosestHitPayload* noalias %PackedPayload, %struct.FDefaultAttributes* nocapture readonly %Attributes) #0 {
  %1 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", align 4, !noalias !67
  %2 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", align 4, !noalias !67
  %3 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", align 4, !noalias !67
  %4 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", align 4, !noalias !67
  %5 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", align 4, !noalias !72
  %6 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", align 4, !noalias !72
  %7 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", align 4, !noalias !72
  %8 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", align 4, !noalias !72
  %9 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", align 4, !noalias !72
  %10 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", align 4, !noalias !72
  %11 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", align 4, !noalias !72
  %12 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", align 4, !noalias !72
  %13 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", align 4, !noalias !72
  %14 = load %struct.SamplerState, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", align 4, !noalias !72
  %15 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A", align 4, !noalias !74
  %16 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", align 4
  %17 = load %struct.SamplerState, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", align 4, !noalias !74
  %18 = load %struct.SamplerState, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", align 4, !noalias !82
  %19 = load %struct.ByteAddressBuffer, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", align 4, !noalias !85
  %20 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %21 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %22 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %23 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %24 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %25 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !67
  %26 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %27 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %28 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %29 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %30 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %31 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %32 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %33 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %34 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %35 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %36 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !72
  %37 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !74
  %38 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4
  %39 = load %"class.Texture2D<vector<float, 4> >", %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", align 4, !noalias !74
  %40 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", align 4, !noalias !74
  %41 = load %"class.Buffer<float>", %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", align 4, !noalias !74
  %42 = load %"class.Buffer<unsigned int>", %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", align 4, !noalias !74
  %43 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !90
  %44 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4, !noalias !98
  %45 = load %"class.StructuredBuffer<vector<float, 4> >", %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", align 4
  %46 = load %HitGroupSystemRootConstants, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, align 4
  %47 = load %Material, %Material* @Material, align 4
  %48 = load %LandscapeParameters, %LandscapeParameters* @LandscapeParameters, align 4
  %49 = load %LandscapeContinuousLODParameters, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, align 4
  %50 = load %LandscapeMVF, %LandscapeMVF* @LandscapeMVF, align 4
  %51 = load %View, %View* @View, align 4
  %52 = alloca [3 x float], align 4
  %53 = alloca [3 x float], align 4
  %54 = alloca [3 x float], align 4
  %55 = alloca [3 x i32], align 4
  %56 = alloca [3 x i32], align 4
  %57 = alloca [4 x float], align 4
  %58 = alloca [3 x float], align 4
  %59 = alloca [4 x float], align 4
  %60 = call %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32 160, %HitGroupSystemRootConstants %46)  ; CreateHandleForLib(Resource)
  %61 = call %dx.types.Handle @dx.op.createHandleForLib.Material(i32 160, %Material %47)  ; CreateHandleForLib(Resource)
  %62 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32 160, %LandscapeParameters %48)  ; CreateHandleForLib(Resource)
  %63 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32 160, %LandscapeContinuousLODParameters %49)  ; CreateHandleForLib(Resource)
  %64 = call %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32 160, %LandscapeMVF %50)  ; CreateHandleForLib(Resource)
  %65 = call %dx.types.Handle @dx.op.createHandleForLib.View(i32 160, %View %51)  ; CreateHandleForLib(Resource)
  %66 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %67 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 0, i32 0
  store float %66, float* %67, align 4, !tbaa !103
  %68 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 6
  %69 = load i32, i32* %68, align 4, !tbaa !107
  %70 = and i32 %69, 33554432
  %71 = icmp ne i32 %70, 0
  br i1 %71, label %72, label %693

; <label>:72                                      ; preds = %0
  %73 = getelementptr inbounds [4 x float], [4 x float]* %59, i32 0, i32 0
  br label %74

; <label>:74                                      ; preds = %403, %72
  %75 = phi i32 [ %611, %403 ], [ 0, %72 ]
  %76 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %77 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %78 = extractvalue %dx.types.CBufRet.i32 %77, 1
  %79 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %80 = extractvalue %dx.types.CBufRet.i32 %79, 3
  %81 = sub nsw i32 %78, %80
  %82 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %83 = extractvalue %dx.types.CBufRet.i32 %82, 0
  %84 = mul nsw i32 %81, %83
  %85 = extractvalue %dx.types.CBufRet.i32 %77, 0
  %86 = extractvalue %dx.types.CBufRet.i32 %79, 2
  %87 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %88 = extractvalue %dx.types.CBufRet.i32 %87, 0
  %89 = sitofp i32 %88 to float
  %90 = extractvalue %dx.types.CBufRet.i32 %79, 0
  %91 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %42)  ; CreateHandleForLib(Resource)
  %92 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %91, i32 %90, i32 undef)  ; BufferLoad(srv,index,wot)
  %93 = extractvalue %dx.types.ResRet.i32 %92, 0
  %94 = add i32 %84, %85
  %95 = sub i32 %94, %86
  %96 = add i32 %95, %93
  %97 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %98 = extractvalue %dx.types.CBufRet.f32 %97, 0
  %99 = fcmp fast oge float %98, 0.000000e+00
  %100 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %41)  ; CreateHandleForLib(Resource)
  %101 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %100, i32 %96, i32 undef)  ; BufferLoad(srv,index,wot)
  %102 = extractvalue %dx.types.ResRet.f32 %101, 0
  %103 = select i1 %99, float %98, float %102
  %104 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %105 = extractvalue %dx.types.CBufRet.i32 %104, 1
  %106 = sitofp i32 %105 to float
  %107 = fadd fast float %106, %103
  %108 = call float @dx.op.binary.f32(i32 36, float %107, float %89)  ; FMin(a,b)
  %109 = call float @dx.op.unary.f32(i32 27, float %108)  ; Round_ni(value)
  %110 = fptoui float %109 to i32
  %111 = extractvalue %dx.types.CBufRet.i32 %77, 2
  %112 = and i32 %110, 31
  %113 = ashr i32 %111, %112
  %114 = add nsw i32 %113, -1
  %115 = sitofp i32 %114 to float
  %116 = fadd fast float %115, 1.000000e+00
  %117 = fptoui float %116 to i32
  %118 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %119 = extractvalue %dx.types.CBufRet.i32 %118, 1
  %120 = extractvalue %dx.types.CBufRet.i32 %118, 0
  %121 = and i32 %120, 255
  %122 = mul i32 %76, 3
  %123 = icmp eq i32 %121, 0
  br i1 %123, label %124, label %127

; <label>:124                                     ; preds = %74
  %125 = add i32 %122, 1
  %126 = add i32 %122, 2
  br label %151

; <label>:127                                     ; preds = %74
  %128 = icmp eq i32 %121, 2
  %129 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %19)  ; CreateHandleForLib(Resource)
  br i1 %128, label %130, label %144

; <label>:130                                     ; preds = %127
  %131 = mul i32 %76, 6
  %132 = add i32 %131, %119
  %133 = and i32 %132, -4
  %134 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %129, i32 %133, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %135 = extractvalue %dx.types.ResRet.i32 %134, 0
  %136 = extractvalue %dx.types.ResRet.i32 %134, 1
  %137 = icmp eq i32 %133, %132
  %138 = lshr i32 %135, 16
  %139 = and i32 %136, 65535
  br i1 %137, label %140, label %142

; <label>:140                                     ; preds = %130
  %141 = and i32 %135, 65535
  br label %151

; <label>:142                                     ; preds = %130
  %143 = lshr i32 %136, 16
  br label %151

; <label>:144                                     ; preds = %127
  %145 = mul i32 %121, %122
  %146 = add i32 %145, %119
  %147 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %129, i32 %146, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %148 = extractvalue %dx.types.ResRet.i32 %147, 0
  %149 = extractvalue %dx.types.ResRet.i32 %147, 1
  %150 = extractvalue %dx.types.ResRet.i32 %147, 2
  br label %151

; <label>:151                                     ; preds = %144, %142, %140, %124
  %152 = phi i32 [ %122, %124 ], [ %148, %144 ], [ %141, %140 ], [ %138, %142 ]
  %153 = phi i32 [ %125, %124 ], [ %149, %144 ], [ %138, %140 ], [ %139, %142 ]
  %154 = phi i32 [ %126, %124 ], [ %150, %144 ], [ %139, %140 ], [ %143, %142 ]
  %155 = getelementptr inbounds [3 x i32], [3 x i32]* %55, i32 0, i32 0
  store i32 %152, i32* %155, align 4
  %156 = getelementptr inbounds [3 x i32], [3 x i32]* %55, i32 0, i32 1
  store i32 %153, i32* %156, align 4
  %157 = getelementptr inbounds [3 x i32], [3 x i32]* %55, i32 0, i32 2
  store i32 %154, i32* %157, align 4
  %158 = getelementptr [3 x i32], [3 x i32]* %55, i32 0, i32 %75
  %159 = load i32, i32* %158, align 4, !tbaa !107, !noalias !109
  %160 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %161 = urem i32 %159, %117
  %162 = uitofp i32 %161 to float
  %163 = udiv i32 %159, %117
  %164 = uitofp i32 %163 to float
  %165 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %166 = extractvalue %dx.types.CBufRet.i32 %165, 0
  %167 = sitofp i32 %166 to float
  %168 = extractvalue %dx.types.CBufRet.i32 %165, 1
  %169 = sitofp i32 %168 to float
  %170 = and i32 %160, 2147483647
  %171 = mul i32 %170, 40
  %172 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %173 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %172, i32 %171, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %174 = extractvalue %dx.types.ResRet.f32 %173, 1
  %175 = bitcast float %174 to i32
  %176 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %65, i32 277)  ; CBufferLoadLegacy(handle,regIndex)
  %177 = extractvalue %dx.types.CBufRet.i32 %176, 0
  %178 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %179 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %178, i32 %175, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %180 = extractvalue %dx.types.ResRet.f32 %179, 0
  %181 = bitcast float %180 to i32
  %182 = and i32 %181, 1048575
  %183 = icmp eq i32 %182, 1048575
  br i1 %183, label %292, label %184, !dx.controlflow.hints !112

; <label>:184                                     ; preds = %151
  %185 = mul nuw nsw i32 %182, 40
  %186 = or i32 %185, 1
  %187 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %172, i32 %186, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %188 = extractvalue %dx.types.ResRet.f32 %187, 0
  %189 = extractvalue %dx.types.ResRet.f32 %187, 1
  %190 = extractvalue %dx.types.ResRet.f32 %187, 2
  %191 = add i32 %177, %175
  %192 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %178, i32 %191, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %193 = extractvalue %dx.types.ResRet.f32 %192, 0
  %194 = extractvalue %dx.types.ResRet.f32 %192, 1
  %195 = extractvalue %dx.types.ResRet.f32 %192, 2
  %196 = extractvalue %dx.types.ResRet.f32 %192, 3
  %197 = bitcast float %193 to i32
  %198 = bitcast float %194 to i32
  %199 = bitcast float %195 to i32
  %200 = bitcast float %196 to i32
  %201 = shl i32 %177, 1
  %202 = add i32 %201, %175
  %203 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %178, i32 %202, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %204 = extractvalue %dx.types.ResRet.f32 %203, 0
  %205 = extractvalue %dx.types.ResRet.f32 %203, 1
  %206 = extractvalue %dx.types.ResRet.f32 %203, 2
  %207 = and i32 %197, 65535
  %208 = uitofp i32 %207 to float
  %209 = lshr i32 %197, 16
  %210 = uitofp i32 %209 to float
  %211 = and i32 %198, 32767
  %212 = uitofp i32 %211 to float
  %213 = fadd fast float %208, -3.276800e+04
  %214 = fadd fast float %210, -3.276800e+04
  %215 = fadd fast float %212, -1.638400e+04
  %216 = fmul fast float %215, 0x3F06A0F8E0000000
  %217 = and i32 %198, 32768
  %218 = icmp ne i32 %217, 0
  %219 = fadd fast float %213, %214
  %220 = fmul fast float %219, 0x3F00002000000000
  %221 = fsub fast float %213, %214
  %222 = fmul fast float %221, 0x3F00002000000000
  %223 = call float @dx.op.unary.f32(i32 6, float %220)  ; FAbs(value)
  %224 = call float @dx.op.unary.f32(i32 6, float %222)  ; FAbs(value)
  %225 = call float @dx.op.dot2.f32(i32 54, float 1.000000e+00, float 1.000000e+00, float %223, float %224)  ; Dot2(ax,ay,bx,by)
  %226 = fsub fast float 2.000000e+00, %225
  %227 = call float @dx.op.dot3.f32(i32 55, float %220, float %222, float %226, float %220, float %222, float %226)  ; Dot3(ax,ay,az,bx,by,bz)
  %228 = call float @dx.op.unary.f32(i32 25, float %227)  ; Rsqrt(value)
  %229 = fmul fast float %228, %220
  %230 = fmul fast float %228, %222
  %231 = fmul fast float %228, %226
  %232 = fadd fast float %231, 1.000000e+00
  %233 = fdiv fast float 1.000000e+00, %232
  %234 = fmul fast float %230, %229
  %235 = fmul fast float %234, %233
  %236 = fsub fast float -0.000000e+00, %235
  %237 = fmul fast float %229, %229
  %238 = fmul fast float %237, %233
  %239 = fsub fast float 1.000000e+00, %238
  %240 = fmul fast float %230, %230
  %241 = fmul fast float %240, %233
  %242 = fsub fast float 1.000000e+00, %241
  %243 = fmul fast float %216, %216
  %244 = fsub fast float 1.000000e+00, %243
  %245 = call float @dx.op.unary.f32(i32 24, float %244)  ; Sqrt(value)
  %246 = select i1 %218, float %216, float %245
  %247 = select i1 %218, float %245, float %216
  %248 = fmul fast float %239, %246
  %249 = fmul fast float %246, %236
  %250 = fmul fast float %246, %229
  %251 = fmul fast float %247, %236
  %252 = fmul fast float %242, %247
  %253 = fmul fast float %230, %247
  %254 = fsub fast float -0.000000e+00, %253
  %255 = fadd fast float %248, %251
  %256 = fadd fast float %249, %252
  %257 = fsub fast float %254, %250
  %258 = fmul fast float %257, %230
  %259 = fmul fast float %256, %231
  %260 = fsub fast float %258, %259
  %261 = fmul fast float %255, %231
  %262 = fmul fast float %257, %229
  %263 = fsub fast float %261, %262
  %264 = fmul fast float %256, %229
  %265 = fmul fast float %255, %230
  %266 = fsub fast float %264, %265
  %267 = lshr i32 %200, 16
  %268 = shl i32 %267, 23
  %269 = add i32 %268, -125829120
  %270 = bitcast i32 %269 to float
  %271 = lshr i32 %199, 16
  %272 = and i32 %199, 65535
  %273 = and i32 %200, 65535
  %274 = uitofp i32 %272 to float
  %275 = uitofp i32 %271 to float
  %276 = uitofp i32 %273 to float
  %277 = fadd fast float %274, -3.276800e+04
  %278 = fadd fast float %275, -3.276800e+04
  %279 = fadd fast float %276, -3.276800e+04
  %280 = fmul fast float %270, %277
  %281 = fmul fast float %270, %278
  %282 = fmul fast float %270, %279
  %283 = fmul fast float %255, %280
  %284 = fmul fast float %256, %280
  %285 = fmul fast float %257, %280
  %286 = fmul fast float %260, %281
  %287 = fmul fast float %263, %281
  %288 = fmul fast float %266, %281
  %289 = fmul fast float %229, %282
  %290 = fmul fast float %230, %282
  %291 = fmul fast float %231, %282
  br label %292

; <label>:292                                     ; preds = %184, %151
  %293 = phi float [ 0.000000e+00, %151 ], [ %188, %184 ]
  %294 = phi float [ 0.000000e+00, %151 ], [ %189, %184 ]
  %295 = phi float [ 0.000000e+00, %151 ], [ %190, %184 ]
  %296 = phi float [ 0.000000e+00, %151 ], [ %283, %184 ]
  %297 = phi float [ 0.000000e+00, %151 ], [ %284, %184 ]
  %298 = phi float [ 0.000000e+00, %151 ], [ %285, %184 ]
  %299 = phi float [ 0.000000e+00, %151 ], [ %286, %184 ]
  %300 = phi float [ 0.000000e+00, %151 ], [ %287, %184 ]
  %301 = phi float [ 0.000000e+00, %151 ], [ %288, %184 ]
  %302 = phi float [ 0.000000e+00, %151 ], [ %289, %184 ]
  %303 = phi float [ 0.000000e+00, %151 ], [ %290, %184 ]
  %304 = phi float [ 0.000000e+00, %151 ], [ %291, %184 ]
  %305 = phi float [ 0.000000e+00, %151 ], [ %204, %184 ]
  %306 = phi float [ 0.000000e+00, %151 ], [ %205, %184 ]
  %307 = phi float [ 0.000000e+00, %151 ], [ %206, %184 ]
  %308 = sub nsw i32 %85, %86
  %309 = add nsw i32 %308, %84
  %310 = add i32 %93, %309
  %311 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %100, i32 %310, i32 undef)  ; BufferLoad(srv,index,wot)
  %312 = extractvalue %dx.types.ResRet.f32 %311, 0
  %313 = select i1 %99, float %98, float %312
  %314 = fadd fast float %106, %313
  %315 = call float @dx.op.binary.f32(i32 36, float %314, float %89)  ; FMin(a,b)
  %316 = call float @dx.op.unary.f32(i32 27, float %315)  ; Round_ni(value)
  %317 = fptoui float %316 to i32
  %318 = and i32 %317, 31
  %319 = ashr i32 %111, %318
  %320 = add nsw i32 %319, -1
  %321 = sitofp i32 %320 to float
  %322 = fdiv fast float 1.000000e+00, %321
  %323 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %40)  ; CreateHandleForLib(Resource)
  %324 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %323, i32 %309, i32 undef)  ; BufferLoad(srv,index,wot)
  %325 = fmul fast float %322, %162
  %326 = fmul fast float %322, %164
  %327 = fadd fast float %325, %167
  %328 = fadd fast float %326, %169
  %329 = extractvalue %dx.types.CBufRet.i32 %77, 3
  %330 = sitofp i32 %329 to float
  %331 = fdiv fast float %327, %330
  %332 = fdiv fast float %328, %330
  %333 = fsub fast float 1.000000e+00, %331
  %334 = fmul fast float %332, 2.000000e+00
  %335 = fmul fast float %333, 2.000000e+00
  %336 = fmul fast float %315, %334
  %337 = fmul fast float %315, %335
  %338 = fsub fast float 1.000000e+00, %334
  %339 = fsub fast float 1.000000e+00, %335
  br label %340

; <label>:340                                     ; preds = %398, %292
  %341 = phi i32 [ -1, %292 ], [ %402, %398 ]
  %342 = phi i32 [ 0, %292 ], [ %400, %398 ]
  %343 = phi i32 [ 0, %292 ], [ %396, %398 ]
  %344 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %345 = extractvalue %dx.types.CBufRet.i32 %344, 0
  %346 = extractvalue %dx.types.CBufRet.i32 %344, 1
  %347 = add i32 %345, %342
  %348 = add i32 %346, %341
  %349 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %350 = extractvalue %dx.types.CBufRet.i32 %349, 2
  %351 = extractvalue %dx.types.CBufRet.i32 %349, 3
  %352 = call i32 @dx.op.binary.i32(i32 37, i32 %350, i32 %347)  ; IMax(a,b)
  %353 = call i32 @dx.op.binary.i32(i32 37, i32 %351, i32 %348)  ; IMax(a,b)
  %354 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %355 = extractvalue %dx.types.CBufRet.i32 %354, 0
  %356 = extractvalue %dx.types.CBufRet.i32 %354, 1
  %357 = add i32 %350, -1
  %358 = add i32 %357, %355
  %359 = add i32 %351, -1
  %360 = add i32 %359, %356
  %361 = call i32 @dx.op.binary.i32(i32 38, i32 %358, i32 %352)  ; IMin(a,b)
  %362 = call i32 @dx.op.binary.i32(i32 38, i32 %360, i32 %353)  ; IMin(a,b)
  %363 = sub nsw i32 %362, %351
  %364 = mul nsw i32 %363, %355
  %365 = sub i32 %361, %350
  %366 = add nsw i32 %365, %364
  %367 = extractvalue %dx.types.CBufRet.i32 %349, 0
  %368 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %42)  ; CreateHandleForLib(Resource)
  %369 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %368, i32 %367, i32 undef)  ; BufferLoad(srv,index,wot)
  %370 = extractvalue %dx.types.ResRet.i32 %369, 0
  %371 = add i32 %366, %370
  %372 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %373 = extractvalue %dx.types.CBufRet.f32 %372, 0
  %374 = fcmp fast oge float %373, 0.000000e+00
  %375 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %41)  ; CreateHandleForLib(Resource)
  %376 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %375, i32 %371, i32 undef)  ; BufferLoad(srv,index,wot)
  %377 = extractvalue %dx.types.ResRet.f32 %376, 0
  %378 = select i1 %374, float %373, float %377
  %379 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %380 = extractvalue %dx.types.CBufRet.i32 %379, 0
  %381 = sitofp i32 %380 to float
  %382 = add i32 %370, %309
  %383 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %375, i32 %382, i32 undef)  ; BufferLoad(srv,index,wot)
  %384 = extractvalue %dx.types.ResRet.f32 %383, 0
  %385 = select i1 %374, float %373, float %384
  %386 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %387 = extractvalue %dx.types.CBufRet.i32 %386, 1
  %388 = sitofp i32 %387 to float
  %389 = fadd fast float %388, %385
  %390 = call float @dx.op.binary.f32(i32 36, float %389, float %381)  ; FMin(a,b)
  %391 = call float @dx.op.binary.f32(i32 35, float %378, float %390)  ; FMax(a,b)
  %392 = getelementptr inbounds [4 x float], [4 x float]* %59, i32 0, i32 %343
  %393 = fadd fast float %388, %391
  %394 = select i1 %374, float %373, float %393
  %395 = call float @dx.op.binary.f32(i32 36, float %394, float %381)  ; FMin(a,b)
  store float %395, float* %392, align 4, !tbaa !103, !noalias !113
  %396 = add nuw nsw i32 %343, 1
  %397 = icmp eq i32 %396, 4
  br i1 %397, label %403, label %398

; <label>:398                                     ; preds = %340
  %399 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %396
  %400 = load i32, i32* %399, align 4
  %401 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %396
  %402 = load i32, i32* %401, align 4
  br label %340

; <label>:403                                     ; preds = %340
  %404 = uitofp i32 %317 to float
  %405 = extractvalue %dx.types.ResRet.f32 %324, 0
  %406 = fsub fast float 1.000000e+00, %332
  %407 = fmul fast float %331, 2.000000e+00
  %408 = fmul fast float %406, 2.000000e+00
  %409 = fmul fast float %315, %407
  %410 = fmul fast float %315, %408
  %411 = fsub fast float 1.000000e+00, %407
  %412 = fsub fast float 1.000000e+00, %408
  %413 = load float, float* %73, align 4, !tbaa !103, !noalias !113
  %414 = getelementptr inbounds [4 x float], [4 x float]* %59, i32 0, i32 1
  %415 = load float, float* %414, align 4, !tbaa !103, !noalias !113
  %416 = getelementptr inbounds [4 x float], [4 x float]* %59, i32 0, i32 2
  %417 = load float, float* %416, align 4, !tbaa !103, !noalias !113
  %418 = getelementptr inbounds [4 x float], [4 x float]* %59, i32 0, i32 3
  %419 = load float, float* %418, align 4, !tbaa !103, !noalias !113
  %420 = fmul fast float %413, %338
  %421 = fmul fast float %415, %411
  %422 = fmul fast float %417, %339
  %423 = fmul fast float %419, %412
  %424 = fadd fast float %420, %336
  %425 = fadd fast float %421, %409
  %426 = fadd fast float %422, %337
  %427 = fadd fast float %423, %410
  %428 = fadd fast float %327, %328
  %429 = fdiv fast float %428, %330
  %430 = fcmp fast ogt float %429, 1.000000e+00
  %431 = fcmp fast olt float %331, %332
  %432 = select i1 %431, float %427, float %426
  %433 = select i1 %431, float %425, float %424
  %434 = select i1 %430, float %432, float %433
  %435 = call float @dx.op.unary.f32(i32 27, float %434)  ; Round_ni(value)
  %436 = fsub fast float %434, %435
  %437 = fsub fast float %435, %404
  %438 = fsub fast float -0.000000e+00, %437
  %439 = call float @dx.op.unary.f32(i32 21, float %438)  ; Exp(value)
  %440 = fmul fast float %439, %162
  %441 = fmul fast float %439, %164
  %442 = call float @dx.op.unary.f32(i32 27, float %440)  ; Round_ni(value)
  %443 = call float @dx.op.unary.f32(i32 27, float %441)  ; Round_ni(value)
  %444 = fsub fast float -0.000000e+00, %435
  %445 = call float @dx.op.unary.f32(i32 21, float %444)  ; Exp(value)
  %446 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %447 = extractvalue %dx.types.CBufRet.f32 %446, 0
  %448 = fmul fast float %447, %445
  %449 = fadd fast float %448, -1.000000e+00
  %450 = fmul fast float %445, 5.000000e-01
  %451 = fmul fast float %450, %447
  %452 = call float @dx.op.binary.f32(i32 35, float %451, float 2.000000e+00)  ; FMax(a,b)
  %453 = fadd fast float %452, -1.000000e+00
  %454 = extractvalue %dx.types.CBufRet.f32 %446, 1
  %455 = fmul fast float %454, %449
  %456 = fmul fast float %454, %453
  %457 = fdiv fast float %442, %455
  %458 = fdiv fast float %443, %455
  %459 = fmul fast float %442, 5.000000e-01
  %460 = fmul fast float %443, 5.000000e-01
  %461 = call float @dx.op.unary.f32(i32 27, float %459)  ; Round_ni(value)
  %462 = call float @dx.op.unary.f32(i32 27, float %460)  ; Round_ni(value)
  %463 = fdiv fast float %461, %456
  %464 = fdiv fast float %462, %456
  %465 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %466 = extractvalue %dx.types.CBufRet.f32 %465, 0
  %467 = extractvalue %dx.types.CBufRet.f32 %465, 1
  %468 = fmul fast float %466, %457
  %469 = fmul fast float %467, %458
  %470 = extractvalue %dx.types.CBufRet.f32 %465, 2
  %471 = extractvalue %dx.types.CBufRet.f32 %465, 3
  %472 = fadd fast float %468, %470
  %473 = fadd fast float %469, %471
  %474 = fmul fast float %466, 5.000000e-01
  %475 = fmul fast float %467, 5.000000e-01
  %476 = fadd fast float %472, %474
  %477 = fadd fast float %473, %475
  %478 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %479 = extractvalue %dx.types.CBufRet.f32 %478, 0
  %480 = extractvalue %dx.types.CBufRet.f32 %478, 1
  %481 = fmul fast float %479, %167
  %482 = fmul fast float %480, %169
  %483 = fadd fast float %476, %481
  %484 = fadd fast float %477, %482
  %485 = fsub fast float %435, %405
  %486 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %39)  ; CreateHandleForLib(Resource)
  %487 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %17)  ; CreateHandleForLib(Resource)
  %488 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %486, %dx.types.Handle %487, float %483, float %484, float undef, float undef, i32 0, i32 0, i32 undef, float %485)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %489 = extractvalue %dx.types.ResRet.f32 %488, 0
  %490 = extractvalue %dx.types.ResRet.f32 %488, 1
  %491 = fmul fast float %489, 6.528000e+04
  %492 = fmul fast float %490, 2.550000e+02
  %493 = fadd fast float %492, -3.276800e+04
  %494 = fadd fast float %493, %491
  %495 = fmul fast float %466, %463
  %496 = fmul fast float %467, %464
  %497 = fadd fast float %495, %470
  %498 = fadd fast float %496, %471
  %499 = fadd fast float %497, %474
  %500 = fadd fast float %498, %475
  %501 = fadd fast float %499, %481
  %502 = fadd fast float %500, %482
  %503 = fsub fast float 1.000000e+00, %405
  %504 = fadd fast float %503, %435
  %505 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %486, %dx.types.Handle %487, float %501, float %502, float undef, float undef, i32 0, i32 0, i32 undef, float %504)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %506 = extractvalue %dx.types.ResRet.f32 %505, 0
  %507 = extractvalue %dx.types.ResRet.f32 %505, 1
  %508 = fmul fast float %506, 6.528000e+04
  %509 = fmul fast float %507, 2.550000e+02
  %510 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %511 = extractvalue %dx.types.CBufRet.f32 %510, 0
  %512 = extractvalue %dx.types.CBufRet.f32 %510, 1
  %513 = fmul fast float %511, %457
  %514 = fmul fast float %512, %458
  %515 = extractvalue %dx.types.CBufRet.f32 %510, 2
  %516 = extractvalue %dx.types.CBufRet.f32 %510, 3
  %517 = fadd fast float %513, %515
  %518 = fadd fast float %514, %516
  %519 = extractvalue %dx.types.CBufRet.f32 %478, 2
  %520 = fmul fast float %519, %167
  %521 = fmul fast float %519, %169
  %522 = fadd fast float %517, %520
  %523 = fadd fast float %518, %521
  %524 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %525 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %526 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %524, %dx.types.Handle %525, float %522, float %523, float undef, float undef, i32 0, i32 0, i32 undef, float %435)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %527 = extractvalue %dx.types.ResRet.f32 %526, 0
  %528 = extractvalue %dx.types.ResRet.f32 %526, 1
  %529 = extractvalue %dx.types.ResRet.f32 %526, 2
  %530 = extractvalue %dx.types.ResRet.f32 %526, 3
  %531 = fmul fast float %511, %463
  %532 = fmul fast float %512, %464
  %533 = fadd fast float %531, %515
  %534 = fadd fast float %532, %516
  %535 = fadd fast float %533, %520
  %536 = fadd fast float %534, %521
  %537 = fadd fast float %435, 1.000000e+00
  %538 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %524, %dx.types.Handle %525, float %535, float %536, float undef, float undef, i32 0, i32 0, i32 undef, float %537)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %539 = extractvalue %dx.types.ResRet.f32 %538, 0
  %540 = extractvalue %dx.types.ResRet.f32 %538, 1
  %541 = extractvalue %dx.types.ResRet.f32 %538, 2
  %542 = extractvalue %dx.types.ResRet.f32 %538, 3
  %543 = fmul fast float %527, 6.528000e+04
  %544 = fmul fast float %528, 2.550000e+02
  %545 = fadd fast float %544, -3.276800e+04
  %546 = fadd fast float %545, %543
  %547 = fmul fast float %546, 3.906250e-03
  %548 = fmul fast float %529, 6.528000e+04
  %549 = fmul fast float %530, 2.550000e+02
  %550 = fadd fast float %549, -3.276800e+04
  %551 = fadd fast float %550, %548
  %552 = fmul fast float %551, 3.906250e-03
  %553 = fmul fast float %539, 6.528000e+04
  %554 = fmul fast float %540, 2.550000e+02
  %555 = fadd fast float %554, -3.276800e+04
  %556 = fadd fast float %555, %553
  %557 = fmul fast float %556, 3.906250e-03
  %558 = fmul fast float %541, 6.528000e+04
  %559 = fmul fast float %542, 2.550000e+02
  %560 = fadd fast float %559, -3.276800e+04
  %561 = fadd fast float %560, %558
  %562 = fmul fast float %561, 3.906250e-03
  %563 = fadd fast float %547, %457
  %564 = fadd fast float %552, %458
  %565 = fsub fast float %463, %563
  %566 = fadd fast float %565, %557
  %567 = fsub fast float %464, %564
  %568 = fadd fast float %567, %562
  %569 = fsub fast float -3.276800e+04, %494
  %570 = fadd fast float %569, %509
  %571 = fadd fast float %570, %508
  %572 = fmul fast float %566, %436
  %573 = fmul fast float %568, %436
  %574 = fmul fast float %571, %436
  %575 = fadd fast float %574, %494
  %576 = fmul fast float %575, 7.812500e-03
  %577 = extractvalue %dx.types.CBufRet.f32 %478, 3
  %578 = fmul fast float %577, %167
  %579 = fmul fast float %577, %169
  %580 = fadd fast float %578, %563
  %581 = fadd fast float %580, %572
  %582 = fadd fast float %579, %564
  %583 = fadd fast float %582, %573
  %584 = fmul fast float %581, %296
  %585 = fmul fast float %581, %297
  %586 = fmul fast float %581, %298
  %587 = fmul fast float %583, %299
  %588 = fmul fast float %583, %300
  %589 = fmul fast float %583, %301
  %590 = fmul fast float %576, %302
  %591 = fmul fast float %576, %303
  %592 = fmul fast float %576, %304
  %593 = fmul fast float %293, 2.097152e+06
  %594 = fmul fast float %294, 2.097152e+06
  %595 = fmul fast float %295, 2.097152e+06
  %596 = fadd fast float %305, %593
  %597 = fadd fast float %596, %590
  %598 = fadd fast float %597, %587
  %599 = fadd fast float %598, %584
  %600 = fadd fast float %306, %594
  %601 = fadd fast float %600, %591
  %602 = fadd fast float %601, %588
  %603 = fadd fast float %602, %585
  %604 = fadd fast float %307, %595
  %605 = fadd fast float %604, %592
  %606 = fadd fast float %605, %589
  %607 = fadd fast float %606, %586
  %608 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 %75
  %609 = getelementptr [3 x float], [3 x float]* %53, i32 0, i32 %75
  %610 = getelementptr [3 x float], [3 x float]* %54, i32 0, i32 %75
  store float %599, float* %608, align 4
  store float %603, float* %609, align 4
  store float %607, float* %610, align 4
  %611 = add nuw nsw i32 %75, 1
  %612 = icmp eq i32 %611, 3
  br i1 %612, label %613, label %74

; <label>:613                                     ; preds = %403
  %614 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 1
  %615 = getelementptr [3 x float], [3 x float]* %53, i32 0, i32 1
  %616 = getelementptr [3 x float], [3 x float]* %54, i32 0, i32 1
  %617 = load float, float* %614, align 4
  %618 = load float, float* %615, align 4
  %619 = load float, float* %616, align 4
  %620 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 0
  %621 = getelementptr [3 x float], [3 x float]* %53, i32 0, i32 0
  %622 = getelementptr [3 x float], [3 x float]* %54, i32 0, i32 0
  %623 = load float, float* %620, align 4
  %624 = load float, float* %621, align 4
  %625 = load float, float* %622, align 4
  %626 = fsub fast float %617, %623
  %627 = fsub fast float %618, %624
  %628 = fsub fast float %619, %625
  %629 = getelementptr [3 x float], [3 x float]* %52, i32 0, i32 2
  %630 = getelementptr [3 x float], [3 x float]* %53, i32 0, i32 2
  %631 = getelementptr [3 x float], [3 x float]* %54, i32 0, i32 2
  %632 = load float, float* %629, align 4
  %633 = load float, float* %630, align 4
  %634 = load float, float* %631, align 4
  %635 = fsub fast float %632, %623
  %636 = fsub fast float %633, %624
  %637 = fsub fast float %634, %625
  %638 = fmul fast float %636, %628
  %639 = fmul fast float %637, %627
  %640 = fsub fast float %638, %639
  %641 = fmul fast float %637, %626
  %642 = fmul fast float %635, %628
  %643 = fsub fast float %641, %642
  %644 = fmul fast float %635, %627
  %645 = fmul fast float %636, %626
  %646 = fsub fast float %644, %645
  %647 = call float @dx.op.dot3.f32(i32 55, float %640, float %643, float %646, float %640, float %643, float %646)  ; Dot3(ax,ay,az,bx,by,bz)
  %648 = fcmp fast oeq float %647, 0.000000e+00
  %649 = uitofp i1 %648 to float
  %650 = call float @dx.op.worldRayDirection.f32(i32 148, i8 0)  ; WorldRayDirection(col)
  %651 = call float @dx.op.worldRayDirection.f32(i32 148, i8 1)  ; WorldRayDirection(col)
  %652 = call float @dx.op.worldRayDirection.f32(i32 148, i8 2)  ; WorldRayDirection(col)
  %653 = fsub fast float -0.000000e+00, %650
  %654 = fsub fast float -0.000000e+00, %651
  %655 = fsub fast float -0.000000e+00, %652
  %656 = call float @dx.op.unary.f32(i32 25, float %647)  ; Rsqrt(value)
  %657 = fmul fast float %656, %640
  %658 = fmul fast float %656, %643
  %659 = fmul fast float %656, %646
  %660 = fsub fast float %653, %657
  %661 = fsub fast float %654, %658
  %662 = fsub fast float %655, %659
  %663 = fmul fast float %660, %649
  %664 = fmul fast float %661, %649
  %665 = fmul fast float %662, %649
  %666 = fadd fast float %663, %657
  %667 = fadd fast float %664, %658
  %668 = fadd fast float %665, %659
  %669 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %670 = extractvalue %dx.types.CBufRet.i32 %118, 3
  %671 = sub i32 %669, %670
  %672 = call i32 @dx.op.legacyF32ToF16(i32 130, float %666)  ; LegacyF32ToF16(value)
  %673 = shl i32 %672, 16
  %674 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  %675 = load i32, i32* %674, align 4, !tbaa !107
  %676 = or i32 %675, %673
  store i32 %676, i32* %674, align 4, !tbaa !107
  %677 = call i32 @dx.op.legacyF32ToF16(i32 130, float %667)  ; LegacyF32ToF16(value)
  %678 = call i32 @dx.op.legacyF32ToF16(i32 130, float %668)  ; LegacyF32ToF16(value)
  %679 = shl i32 %678, 16
  %680 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  %681 = or i32 %679, %677
  store i32 %681, i32* %680, align 4, !tbaa !107
  %682 = mul i32 %160, 40
  %683 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %684 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %683, i32 %682, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %685 = extractvalue %dx.types.ResRet.f32 %684, 2
  %686 = bitcast float %685 to i32
  %687 = icmp eq i32 %686, 1
  %688 = select i1 %687, i32 0, i32 %671
  %689 = extractvalue %dx.types.ResRet.f32 %684, 1
  %690 = bitcast float %689 to i32
  %691 = add i32 %690, %688
  %692 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 %691, i32* %692, align 4, !tbaa !107
  br label %693

; <label>:693                                     ; preds = %613, %0
  %694 = and i32 %69, 8388608
  %695 = icmp eq i32 %694, 0
  br i1 %695, label %696, label %1655

; <label>:696                                     ; preds = %693
  %697 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 2
  %698 = load float, float* %697, align 4, !tbaa !103
  %699 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 133)  ; CBufferLoadLegacy(handle,regIndex)
  %700 = extractvalue %dx.types.CBufRet.f32 %699, 0
  %701 = extractvalue %dx.types.CBufRet.f32 %699, 2
  %702 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 134)  ; CBufferLoadLegacy(handle,regIndex)
  %703 = extractvalue %dx.types.CBufRet.f32 %702, 0
  %704 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 182)  ; CBufferLoadLegacy(handle,regIndex)
  %705 = extractvalue %dx.types.CBufRet.f32 %704, 1
  %706 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 1
  %707 = load i32, i32* %706, align 4, !tbaa !107, !noalias !116
  %708 = and i32 %707, 65535
  %709 = lshr i32 %707, 16
  %710 = call float @dx.op.legacyF16ToF32(i32 131, i32 %709)  ; LegacyF16ToF32(value)
  %711 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %712 = fmul fast float %711, %710
  %713 = getelementptr inbounds %struct.FDefaultAttributes, %struct.FDefaultAttributes* %Attributes, i32 0, i32 0
  %714 = load <2 x float>, <2 x float>* %713, align 4, !noalias !119
  %715 = extractelement <2 x float> %714, i32 0
  %716 = fsub fast float 1.000000e+00, %715
  %717 = extractelement <2 x float> %714, i32 1
  %718 = fsub fast float %716, %717
  %719 = getelementptr inbounds [3 x float], [3 x float]* %58, i32 0, i32 0
  store float %718, float* %719, align 4
  %720 = getelementptr inbounds [3 x float], [3 x float]* %58, i32 0, i32 1
  store float %715, float* %720, align 4
  %721 = getelementptr inbounds [3 x float], [3 x float]* %58, i32 0, i32 2
  store float %717, float* %721, align 4
  br label %722

; <label>:722                                     ; preds = %928, %696
  %723 = phi float [ 0.000000e+00, %696 ], [ %1098, %928 ]
  %724 = phi float [ 0.000000e+00, %696 ], [ %1099, %928 ]
  %725 = phi float [ 0.000000e+00, %696 ], [ %1100, %928 ]
  %726 = phi float [ 0.000000e+00, %696 ], [ %1101, %928 ]
  %727 = phi float [ 0.000000e+00, %696 ], [ %1092, %928 ]
  %728 = phi float [ 0.000000e+00, %696 ], [ %1093, %928 ]
  %729 = phi i32 [ 0, %696 ], [ %1102, %928 ]
  %730 = call i32 @dx.op.primitiveIndex.i32(i32 161)  ; PrimitiveIndex()
  %731 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %732 = extractvalue %dx.types.CBufRet.i32 %731, 1
  %733 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %734 = extractvalue %dx.types.CBufRet.i32 %733, 3
  %735 = sub nsw i32 %732, %734
  %736 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %737 = extractvalue %dx.types.CBufRet.i32 %736, 0
  %738 = mul nsw i32 %735, %737
  %739 = extractvalue %dx.types.CBufRet.i32 %731, 0
  %740 = extractvalue %dx.types.CBufRet.i32 %733, 2
  %741 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %742 = extractvalue %dx.types.CBufRet.i32 %741, 0
  %743 = sitofp i32 %742 to float
  %744 = extractvalue %dx.types.CBufRet.i32 %733, 0
  %745 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %42)  ; CreateHandleForLib(Resource)
  %746 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %745, i32 %744, i32 undef)  ; BufferLoad(srv,index,wot)
  %747 = extractvalue %dx.types.ResRet.i32 %746, 0
  %748 = add i32 %738, %739
  %749 = sub i32 %748, %740
  %750 = add i32 %749, %747
  %751 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %752 = extractvalue %dx.types.CBufRet.f32 %751, 0
  %753 = fcmp fast oge float %752, 0.000000e+00
  %754 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %41)  ; CreateHandleForLib(Resource)
  %755 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %754, i32 %750, i32 undef)  ; BufferLoad(srv,index,wot)
  %756 = extractvalue %dx.types.ResRet.f32 %755, 0
  %757 = select i1 %753, float %752, float %756
  %758 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %759 = extractvalue %dx.types.CBufRet.i32 %758, 1
  %760 = sitofp i32 %759 to float
  %761 = fadd fast float %760, %757
  %762 = call float @dx.op.binary.f32(i32 36, float %761, float %743)  ; FMin(a,b)
  %763 = call float @dx.op.unary.f32(i32 27, float %762)  ; Round_ni(value)
  %764 = fptoui float %763 to i32
  %765 = extractvalue %dx.types.CBufRet.i32 %731, 2
  %766 = and i32 %764, 31
  %767 = ashr i32 %765, %766
  %768 = add nsw i32 %767, -1
  %769 = sitofp i32 %768 to float
  %770 = fadd fast float %769, 1.000000e+00
  %771 = fptoui float %770 to i32
  %772 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %60, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %773 = extractvalue %dx.types.CBufRet.i32 %772, 1
  %774 = extractvalue %dx.types.CBufRet.i32 %772, 0
  %775 = and i32 %774, 255
  %776 = mul i32 %730, 3
  %777 = icmp eq i32 %775, 0
  br i1 %777, label %778, label %781

; <label>:778                                     ; preds = %722
  %779 = add i32 %776, 1
  %780 = add i32 %776, 2
  br label %805

; <label>:781                                     ; preds = %722
  %782 = icmp eq i32 %775, 2
  %783 = call %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32 160, %struct.ByteAddressBuffer %19)  ; CreateHandleForLib(Resource)
  br i1 %782, label %784, label %798

; <label>:784                                     ; preds = %781
  %785 = mul i32 %730, 6
  %786 = add i32 %785, %773
  %787 = and i32 %786, -4
  %788 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %783, i32 %787, i32 undef, i8 3, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %789 = extractvalue %dx.types.ResRet.i32 %788, 0
  %790 = extractvalue %dx.types.ResRet.i32 %788, 1
  %791 = icmp eq i32 %787, %786
  %792 = lshr i32 %789, 16
  %793 = and i32 %790, 65535
  br i1 %791, label %794, label %796

; <label>:794                                     ; preds = %784
  %795 = and i32 %789, 65535
  br label %805

; <label>:796                                     ; preds = %784
  %797 = lshr i32 %790, 16
  br label %805

; <label>:798                                     ; preds = %781
  %799 = mul i32 %775, %776
  %800 = add i32 %799, %773
  %801 = call %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32 139, %dx.types.Handle %783, i32 %800, i32 undef, i8 7, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %802 = extractvalue %dx.types.ResRet.i32 %801, 0
  %803 = extractvalue %dx.types.ResRet.i32 %801, 1
  %804 = extractvalue %dx.types.ResRet.i32 %801, 2
  br label %805

; <label>:805                                     ; preds = %798, %796, %794, %778
  %806 = phi i32 [ %776, %778 ], [ %802, %798 ], [ %795, %794 ], [ %792, %796 ]
  %807 = phi i32 [ %779, %778 ], [ %803, %798 ], [ %792, %794 ], [ %793, %796 ]
  %808 = phi i32 [ %780, %778 ], [ %804, %798 ], [ %793, %794 ], [ %797, %796 ]
  %809 = getelementptr inbounds [3 x i32], [3 x i32]* %56, i32 0, i32 0
  store i32 %806, i32* %809, align 4
  %810 = getelementptr inbounds [3 x i32], [3 x i32]* %56, i32 0, i32 1
  store i32 %807, i32* %810, align 4
  %811 = getelementptr inbounds [3 x i32], [3 x i32]* %56, i32 0, i32 2
  store i32 %808, i32* %811, align 4
  %812 = getelementptr [3 x i32], [3 x i32]* %56, i32 0, i32 %729
  %813 = load i32, i32* %812, align 4, !tbaa !107, !noalias !120
  %814 = call i32 @dx.op.instanceID.i32(i32 141)  ; InstanceID()
  %815 = urem i32 %813, %771
  %816 = uitofp i32 %815 to float
  %817 = udiv i32 %813, %771
  %818 = uitofp i32 %817 to float
  %819 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %64, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %820 = extractvalue %dx.types.CBufRet.i32 %819, 0
  %821 = sitofp i32 %820 to float
  %822 = extractvalue %dx.types.CBufRet.i32 %819, 1
  %823 = sitofp i32 %822 to float
  %824 = and i32 %814, 2147483647
  %825 = mul i32 %824, 40
  %826 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %45)  ; CreateHandleForLib(Resource)
  %827 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %826, i32 %825, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %828 = extractvalue %dx.types.ResRet.f32 %827, 1
  %829 = bitcast float %828 to i32
  %830 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %44)  ; CreateHandleForLib(Resource)
  %831 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %830, i32 %829, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %832 = extractvalue %dx.types.ResRet.f32 %831, 0
  %833 = bitcast float %832 to i32
  %834 = and i32 %833, 1048575
  %835 = sub nsw i32 %739, %740
  %836 = add nsw i32 %835, %738
  %837 = add i32 %747, %836
  %838 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %754, i32 %837, i32 undef)  ; BufferLoad(srv,index,wot)
  %839 = extractvalue %dx.types.ResRet.f32 %838, 0
  %840 = select i1 %753, float %752, float %839
  %841 = fadd fast float %760, %840
  %842 = call float @dx.op.binary.f32(i32 36, float %841, float %743)  ; FMin(a,b)
  %843 = call float @dx.op.unary.f32(i32 27, float %842)  ; Round_ni(value)
  %844 = fptoui float %843 to i32
  %845 = and i32 %844, 31
  %846 = ashr i32 %765, %845
  %847 = add nsw i32 %846, -1
  %848 = sitofp i32 %847 to float
  %849 = fdiv fast float 1.000000e+00, %848
  %850 = fmul fast float %849, %816
  %851 = fmul fast float %849, %818
  %852 = fadd fast float %850, %821
  %853 = fadd fast float %851, %823
  %854 = extractvalue %dx.types.CBufRet.i32 %731, 3
  %855 = sitofp i32 %854 to float
  %856 = fdiv fast float %852, %855
  %857 = fdiv fast float %853, %855
  %858 = fsub fast float 1.000000e+00, %856
  %859 = fmul fast float %857, 2.000000e+00
  %860 = fmul fast float %858, 2.000000e+00
  %861 = fmul fast float %842, %859
  %862 = fmul fast float %842, %860
  %863 = fsub fast float 1.000000e+00, %859
  %864 = fsub fast float 1.000000e+00, %860
  br label %865

; <label>:865                                     ; preds = %923, %805
  %866 = phi i32 [ -1, %805 ], [ %927, %923 ]
  %867 = phi i32 [ 0, %805 ], [ %925, %923 ]
  %868 = phi i32 [ 0, %805 ], [ %921, %923 ]
  %869 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %870 = extractvalue %dx.types.CBufRet.i32 %869, 0
  %871 = extractvalue %dx.types.CBufRet.i32 %869, 1
  %872 = add i32 %870, %867
  %873 = add i32 %871, %866
  %874 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 0)  ; CBufferLoadLegacy(handle,regIndex)
  %875 = extractvalue %dx.types.CBufRet.i32 %874, 2
  %876 = extractvalue %dx.types.CBufRet.i32 %874, 3
  %877 = call i32 @dx.op.binary.i32(i32 37, i32 %875, i32 %872)  ; IMax(a,b)
  %878 = call i32 @dx.op.binary.i32(i32 37, i32 %876, i32 %873)  ; IMax(a,b)
  %879 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %63, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %880 = extractvalue %dx.types.CBufRet.i32 %879, 0
  %881 = extractvalue %dx.types.CBufRet.i32 %879, 1
  %882 = add i32 %875, -1
  %883 = add i32 %882, %880
  %884 = add i32 %876, -1
  %885 = add i32 %884, %881
  %886 = call i32 @dx.op.binary.i32(i32 38, i32 %883, i32 %877)  ; IMin(a,b)
  %887 = call i32 @dx.op.binary.i32(i32 38, i32 %885, i32 %878)  ; IMin(a,b)
  %888 = sub nsw i32 %887, %876
  %889 = mul nsw i32 %888, %880
  %890 = sub i32 %886, %875
  %891 = add nsw i32 %890, %889
  %892 = extractvalue %dx.types.CBufRet.i32 %874, 0
  %893 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32 160, %"class.Buffer<unsigned int>" %42)  ; CreateHandleForLib(Resource)
  %894 = call %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32 68, %dx.types.Handle %893, i32 %892, i32 undef)  ; BufferLoad(srv,index,wot)
  %895 = extractvalue %dx.types.ResRet.i32 %894, 0
  %896 = add i32 %891, %895
  %897 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %898 = extractvalue %dx.types.CBufRet.f32 %897, 0
  %899 = fcmp fast oge float %898, 0.000000e+00
  %900 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32 160, %"class.Buffer<float>" %41)  ; CreateHandleForLib(Resource)
  %901 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %900, i32 %896, i32 undef)  ; BufferLoad(srv,index,wot)
  %902 = extractvalue %dx.types.ResRet.f32 %901, 0
  %903 = select i1 %899, float %898, float %902
  %904 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %62, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %905 = extractvalue %dx.types.CBufRet.i32 %904, 0
  %906 = sitofp i32 %905 to float
  %907 = add i32 %895, %836
  %908 = call %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32 68, %dx.types.Handle %900, i32 %907, i32 undef)  ; BufferLoad(srv,index,wot)
  %909 = extractvalue %dx.types.ResRet.f32 %908, 0
  %910 = select i1 %899, float %898, float %909
  %911 = call %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32 59, %dx.types.Handle %65, i32 238)  ; CBufferLoadLegacy(handle,regIndex)
  %912 = extractvalue %dx.types.CBufRet.i32 %911, 1
  %913 = sitofp i32 %912 to float
  %914 = fadd fast float %913, %910
  %915 = call float @dx.op.binary.f32(i32 36, float %914, float %906)  ; FMin(a,b)
  %916 = call float @dx.op.binary.f32(i32 35, float %903, float %915)  ; FMax(a,b)
  %917 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 %868
  %918 = fadd fast float %913, %916
  %919 = select i1 %899, float %898, float %918
  %920 = call float @dx.op.binary.f32(i32 36, float %919, float %906)  ; FMin(a,b)
  store float %920, float* %917, align 4, !tbaa !103, !noalias !74
  %921 = add nuw nsw i32 %868, 1
  %922 = icmp eq i32 %921, 4
  br i1 %922, label %928, label %923

; <label>:923                                     ; preds = %865
  %924 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.0.hca, i32 0, i32 %921
  %925 = load i32, i32* %924, align 4
  %926 = getelementptr [4 x i32], [4 x i32]* @NeighborOffset.i.i.i.i.i.1.hca, i32 0, i32 %921
  %927 = load i32, i32* %926, align 4
  br label %865

; <label>:928                                     ; preds = %865
  %929 = uitofp i32 %844 to float
  %930 = fsub fast float 1.000000e+00, %857
  %931 = fmul fast float %856, 2.000000e+00
  %932 = fmul fast float %930, 2.000000e+00
  %933 = fmul fast float %842, %931
  %934 = fmul fast float %842, %932
  %935 = fsub fast float 1.000000e+00, %931
  %936 = fsub fast float 1.000000e+00, %932
  %937 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 0
  %938 = load float, float* %937, align 4, !tbaa !103, !noalias !74
  %939 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 1
  %940 = load float, float* %939, align 4, !tbaa !103, !noalias !74
  %941 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 2
  %942 = load float, float* %941, align 4, !tbaa !103, !noalias !74
  %943 = getelementptr inbounds [4 x float], [4 x float]* %57, i32 0, i32 3
  %944 = load float, float* %943, align 4, !tbaa !103, !noalias !74
  %945 = fmul fast float %938, %863
  %946 = fmul fast float %940, %935
  %947 = fmul fast float %942, %864
  %948 = fmul fast float %944, %936
  %949 = fadd fast float %945, %861
  %950 = fadd fast float %946, %933
  %951 = fadd fast float %947, %862
  %952 = fadd fast float %948, %934
  %953 = fadd fast float %852, %853
  %954 = fdiv fast float %953, %855
  %955 = fcmp fast ogt float %954, 1.000000e+00
  %956 = fcmp fast olt float %856, %857
  %957 = select i1 %956, float %952, float %951
  %958 = select i1 %956, float %950, float %949
  %959 = select i1 %955, float %957, float %958
  %960 = call float @dx.op.unary.f32(i32 27, float %959)  ; Round_ni(value)
  %961 = fsub fast float %959, %960
  %962 = fsub fast float %960, %929
  %963 = fsub fast float -0.000000e+00, %962
  %964 = call float @dx.op.unary.f32(i32 21, float %963)  ; Exp(value)
  %965 = fmul fast float %964, %816
  %966 = fmul fast float %964, %818
  %967 = call float @dx.op.unary.f32(i32 27, float %965)  ; Round_ni(value)
  %968 = call float @dx.op.unary.f32(i32 27, float %966)  ; Round_ni(value)
  %969 = fsub fast float -0.000000e+00, %960
  %970 = call float @dx.op.unary.f32(i32 21, float %969)  ; Exp(value)
  %971 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %972 = extractvalue %dx.types.CBufRet.f32 %971, 0
  %973 = fmul fast float %972, %970
  %974 = fadd fast float %973, -1.000000e+00
  %975 = fmul fast float %970, 5.000000e-01
  %976 = fmul fast float %975, %972
  %977 = call float @dx.op.binary.f32(i32 35, float %976, float 2.000000e+00)  ; FMax(a,b)
  %978 = fadd fast float %977, -1.000000e+00
  %979 = extractvalue %dx.types.CBufRet.f32 %971, 1
  %980 = fmul fast float %979, %974
  %981 = fmul fast float %979, %978
  %982 = fdiv fast float %967, %980
  %983 = fdiv fast float %968, %980
  %984 = fmul fast float %967, 5.000000e-01
  %985 = fmul fast float %968, 5.000000e-01
  %986 = call float @dx.op.unary.f32(i32 27, float %984)  ; Round_ni(value)
  %987 = call float @dx.op.unary.f32(i32 27, float %985)  ; Round_ni(value)
  %988 = fdiv fast float %986, %981
  %989 = fdiv fast float %987, %981
  %990 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %991 = extractvalue %dx.types.CBufRet.f32 %990, 0
  %992 = extractvalue %dx.types.CBufRet.f32 %990, 1
  %993 = fmul fast float %991, %982
  %994 = fmul fast float %992, %983
  %995 = extractvalue %dx.types.CBufRet.f32 %990, 2
  %996 = extractvalue %dx.types.CBufRet.f32 %990, 3
  %997 = fadd fast float %993, %995
  %998 = fadd fast float %994, %996
  %999 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1000 = extractvalue %dx.types.CBufRet.f32 %999, 2
  %1001 = fmul fast float %1000, %821
  %1002 = fmul fast float %1000, %823
  %1003 = fadd fast float %997, %1001
  %1004 = fadd fast float %998, %1002
  %1005 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %37)  ; CreateHandleForLib(Resource)
  %1006 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %15)  ; CreateHandleForLib(Resource)
  %1007 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1005, %dx.types.Handle %1006, float %1003, float %1004, float undef, float undef, i32 0, i32 0, i32 undef, float %960)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1008 = extractvalue %dx.types.ResRet.f32 %1007, 0
  %1009 = extractvalue %dx.types.ResRet.f32 %1007, 1
  %1010 = extractvalue %dx.types.ResRet.f32 %1007, 2
  %1011 = extractvalue %dx.types.ResRet.f32 %1007, 3
  %1012 = fmul fast float %991, %988
  %1013 = fmul fast float %992, %989
  %1014 = fadd fast float %1012, %995
  %1015 = fadd fast float %1013, %996
  %1016 = fadd fast float %1014, %1001
  %1017 = fadd fast float %1015, %1002
  %1018 = fadd fast float %960, 1.000000e+00
  %1019 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1005, %dx.types.Handle %1006, float %1016, float %1017, float undef, float undef, i32 0, i32 0, i32 undef, float %1018)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1020 = extractvalue %dx.types.ResRet.f32 %1019, 0
  %1021 = extractvalue %dx.types.ResRet.f32 %1019, 1
  %1022 = extractvalue %dx.types.ResRet.f32 %1019, 2
  %1023 = extractvalue %dx.types.ResRet.f32 %1019, 3
  %1024 = fmul fast float %1008, 6.528000e+04
  %1025 = fmul fast float %1009, 2.550000e+02
  %1026 = fadd fast float %1025, -3.276800e+04
  %1027 = fadd fast float %1026, %1024
  %1028 = fmul fast float %1027, 3.906250e-03
  %1029 = fmul fast float %1010, 6.528000e+04
  %1030 = fmul fast float %1011, 2.550000e+02
  %1031 = fadd fast float %1030, -3.276800e+04
  %1032 = fadd fast float %1031, %1029
  %1033 = fmul fast float %1032, 3.906250e-03
  %1034 = fmul fast float %1020, 6.528000e+04
  %1035 = fmul fast float %1021, 2.550000e+02
  %1036 = fadd fast float %1035, -3.276800e+04
  %1037 = fadd fast float %1036, %1034
  %1038 = fmul fast float %1037, 3.906250e-03
  %1039 = fmul fast float %1022, 6.528000e+04
  %1040 = fmul fast float %1023, 2.550000e+02
  %1041 = fadd fast float %1040, -3.276800e+04
  %1042 = fadd fast float %1041, %1039
  %1043 = fadd fast float %1028, %982
  %1044 = fadd fast float %1033, %983
  %1045 = fsub fast float %988, %1043
  %1046 = fadd fast float %1045, %1038
  %1047 = fsub fast float %989, %1044
  %1048 = fmul fast float %1046, %961
  %1049 = fadd fast float %1048, %1043
  %1050 = extractvalue %dx.types.CBufRet.f32 %971, 2
  %1051 = extractvalue %dx.types.CBufRet.f32 %971, 3
  %1052 = extractvalue %dx.types.CBufRet.f32 %999, 3
  %1053 = fmul fast float %1052, %821
  %1054 = fmul fast float %1052, %823
  %1055 = fadd fast float %1053, %1050
  %1056 = fadd fast float %1054, %1051
  %1057 = fmul fast float %1049, %991
  %1058 = fadd fast float %1001, %995
  %1059 = fadd fast float %1002, %996
  %1060 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1061 = extractvalue %dx.types.CBufRet.f32 %1060, 0
  %1062 = fmul fast float %1049, %1061
  %1063 = extractvalue %dx.types.CBufRet.f32 %1060, 2
  %1064 = fadd fast float %1062, %1063
  %1065 = fmul fast float %1061, 5.000000e-01
  %1066 = fadd fast float %1064, %1065
  %1067 = extractvalue %dx.types.CBufRet.f32 %999, 0
  %1068 = fmul fast float %1067, %821
  %1069 = fadd fast float %1066, %1068
  %1070 = fmul fast float %1042, 3.906250e-03
  %1071 = fadd fast float %1047, %1070
  %1072 = fmul fast float %1071, %961
  %1073 = fadd fast float %1072, %1044
  %1074 = fadd fast float %1055, %1049
  %1075 = fadd fast float %1056, %1073
  %1076 = fmul fast float %1073, %992
  %1077 = fadd fast float %1058, %1057
  %1078 = fadd fast float %1059, %1076
  %1079 = extractvalue %dx.types.CBufRet.f32 %1060, 1
  %1080 = fmul fast float %1073, %1079
  %1081 = extractvalue %dx.types.CBufRet.f32 %1060, 3
  %1082 = fadd fast float %1080, %1081
  %1083 = fmul fast float %1079, 5.000000e-01
  %1084 = fadd fast float %1082, %1083
  %1085 = extractvalue %dx.types.CBufRet.f32 %999, 1
  %1086 = fmul fast float %1085, %823
  %1087 = fadd fast float %1084, %1086
  %1088 = getelementptr [3 x float], [3 x float]* %58, i32 0, i32 %729
  %1089 = load float, float* %1088, align 4, !tbaa !103, !noalias !119
  %1090 = fmul fast float %1089, %1074
  %1091 = fmul fast float %1089, %1075
  %1092 = fadd fast float %1090, %727
  %1093 = fadd fast float %1091, %728
  %1094 = fmul fast float %1089, %1077
  %1095 = fmul fast float %1089, %1078
  %1096 = fmul fast float %1089, %1069
  %1097 = fmul fast float %1089, %1087
  %1098 = fadd fast float %1094, %723
  %1099 = fadd fast float %1095, %724
  %1100 = fadd fast float %1096, %725
  %1101 = fadd fast float %1097, %726
  %1102 = add nuw nsw i32 %729, 1
  %1103 = icmp eq i32 %1102, 3
  br i1 %1103, label %1104, label %722

; <label>:1104                                    ; preds = %928
  %1105 = extractvalue %dx.types.CBufRet.f32 %699, 1
  %1106 = extractvalue %dx.types.CBufRet.f32 %699, 3
  %1107 = extractvalue %dx.types.CBufRet.f32 %702, 1
  %1108 = call float @dx.op.legacyF16ToF32(i32 131, i32 %708)  ; LegacyF16ToF32(value)
  %1109 = fadd fast float %712, %1108
  %1110 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %38)  ; CreateHandleForLib(Resource)
  %1111 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %16)  ; CreateHandleForLib(Resource)
  %1112 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1110, %dx.types.Handle %1111, float %1100, float %1101, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1113 = extractvalue %dx.types.ResRet.f32 %1112, 2
  %1114 = extractvalue %dx.types.ResRet.f32 %1112, 3
  %1115 = fmul fast float %1113, 2.000000e+00
  %1116 = fmul fast float %1114, 2.000000e+00
  %1117 = fadd fast float %1115, -1.000000e+00
  %1118 = fadd fast float %1116, -1.000000e+00
  %1119 = call float @dx.op.dot2.f32(i32 54, float %1117, float %1118, float %1117, float %1118)  ; Dot2(ax,ay,bx,by)
  %1120 = fsub fast float 1.000000e+00, %1119
  %1121 = call float @dx.op.binary.f32(i32 35, float %1120, float 0.000000e+00)  ; FMax(a,b)
  %1122 = call float @dx.op.unary.f32(i32 24, float %1121)  ; Sqrt(value)
  %1123 = fsub fast float -0.000000e+00, %1117
  %1124 = call float @dx.op.dot3.f32(i32 55, float %1122, float 0.000000e+00, float %1123, float %1122, float 0.000000e+00, float %1123)  ; Dot3(ax,ay,az,bx,by,bz)
  %1125 = call float @dx.op.unary.f32(i32 25, float %1124)  ; Rsqrt(value)
  %1126 = fmul fast float %1125, %1122
  %1127 = fmul fast float %1125, %1123
  %1128 = fmul fast float %1127, %1118
  %1129 = fmul fast float %1126, %1122
  %1130 = fmul fast float %1127, %1117
  %1131 = fsub fast float %1129, %1130
  %1132 = fmul fast float %1118, %1126
  %1133 = fsub fast float -0.000000e+00, %1132
  %1134 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1135 = extractvalue %dx.types.CBufRet.f32 %1134, 0
  %1136 = extractvalue %dx.types.CBufRet.f32 %1134, 1
  %1137 = extractvalue %dx.types.CBufRet.f32 %1134, 2
  %1138 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1139 = extractvalue %dx.types.CBufRet.f32 %1138, 0
  %1140 = extractvalue %dx.types.CBufRet.f32 %1138, 1
  %1141 = extractvalue %dx.types.CBufRet.f32 %1138, 2
  %1142 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %62, i32 11)  ; CBufferLoadLegacy(handle,regIndex)
  %1143 = extractvalue %dx.types.CBufRet.f32 %1142, 0
  %1144 = extractvalue %dx.types.CBufRet.f32 %1142, 1
  %1145 = extractvalue %dx.types.CBufRet.f32 %1142, 2
  %1146 = fmul fast float %1135, %1126
  %1147 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1143, float %1146)  ; FMad(a,b,c)
  %1148 = fmul fast float %1136, %1126
  %1149 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1144, float %1148)  ; FMad(a,b,c)
  %1150 = fmul fast float %1137, %1126
  %1151 = call float @dx.op.tertiary.f32(i32 46, float %1127, float %1145, float %1150)  ; FMad(a,b,c)
  %1152 = fmul fast float %1128, %1135
  %1153 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1139, float %1152)  ; FMad(a,b,c)
  %1154 = call float @dx.op.tertiary.f32(i32 46, float %1133, float %1143, float %1153)  ; FMad(a,b,c)
  %1155 = fmul fast float %1128, %1136
  %1156 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1140, float %1155)  ; FMad(a,b,c)
  %1157 = call float @dx.op.tertiary.f32(i32 46, float %1133, float %1144, float %1156)  ; FMad(a,b,c)
  %1158 = fmul fast float %1128, %1137
  %1159 = call float @dx.op.tertiary.f32(i32 46, float %1131, float %1141, float %1158)  ; FMad(a,b,c)
  %1160 = call float @dx.op.tertiary.f32(i32 46, float %1133, float %1145, float %1159)  ; FMad(a,b,c)
  %1161 = fmul fast float %1135, %1117
  %1162 = call float @dx.op.tertiary.f32(i32 46, float %1118, float %1139, float %1161)  ; FMad(a,b,c)
  %1163 = call float @dx.op.tertiary.f32(i32 46, float %1122, float %1143, float %1162)  ; FMad(a,b,c)
  %1164 = fmul fast float %1136, %1117
  %1165 = call float @dx.op.tertiary.f32(i32 46, float %1118, float %1140, float %1164)  ; FMad(a,b,c)
  %1166 = call float @dx.op.tertiary.f32(i32 46, float %1122, float %1144, float %1165)  ; FMad(a,b,c)
  %1167 = fmul fast float %1137, %1117
  %1168 = call float @dx.op.tertiary.f32(i32 46, float %1118, float %1141, float %1167)  ; FMad(a,b,c)
  %1169 = call float @dx.op.tertiary.f32(i32 46, float %1122, float %1145, float %1168)  ; FMad(a,b,c)
  %1170 = call i32 @dx.op.hitKind.i32(i32 143)  ; HitKind()
  %1171 = icmp eq i32 %1170, 254
  %1172 = select i1 %1171, float 1.000000e+00, float -1.000000e+00
  %1173 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %36)  ; CreateHandleForLib(Resource)
  %1174 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %14)  ; CreateHandleForLib(Resource)
  %1175 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1173, %dx.types.Handle %1174, float %1098, float %1099, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1176 = extractvalue %dx.types.ResRet.f32 %1175, 0
  %1177 = extractvalue %dx.types.ResRet.f32 %1175, 1
  %1178 = extractvalue %dx.types.ResRet.f32 %1175, 2
  %1179 = extractvalue %dx.types.ResRet.f32 %1175, 3
  %1180 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 1)  ; CBufferLoadLegacy(handle,regIndex)
  %1181 = extractvalue %dx.types.CBufRet.f32 %1180, 0
  %1182 = extractvalue %dx.types.CBufRet.f32 %1180, 1
  %1183 = extractvalue %dx.types.CBufRet.f32 %1180, 2
  %1184 = extractvalue %dx.types.CBufRet.f32 %1180, 3
  %1185 = call float @dx.op.dot4.f32(i32 56, float %1176, float %1177, float %1178, float %1179, float %1181, float %1182, float %1183, float %1184)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1186 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 2)  ; CBufferLoadLegacy(handle,regIndex)
  %1187 = extractvalue %dx.types.CBufRet.f32 %1186, 1
  %1188 = fmul fast float %1187, %1092
  %1189 = fmul fast float %1187, %1093
  %1190 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %65, i32 138)  ; CBufferLoadLegacy(handle,regIndex)
  %1191 = extractvalue %dx.types.CBufRet.f32 %1190, 0
  %1192 = fadd fast float %1191, %698
  %1193 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %35)  ; CreateHandleForLib(Resource)
  %1194 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %13)  ; CreateHandleForLib(Resource)
  %1195 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1193, %dx.types.Handle %1194, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1196 = extractvalue %dx.types.ResRet.f32 %1195, 1
  %1197 = extractvalue %dx.types.ResRet.f32 %1195, 2
  %1198 = extractvalue %dx.types.CBufRet.f32 %1186, 2
  %1199 = extractvalue %dx.types.CBufRet.f32 %1186, 3
  %1200 = fsub fast float %1198, %1199
  %1201 = fmul fast float %1200, %1197
  %1202 = fadd fast float %1201, %1199
  %1203 = call float @dx.op.unary.f32(i32 7, float %1202)  ; Saturate(value)
  %1204 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %34)  ; CreateHandleForLib(Resource)
  %1205 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %12)  ; CreateHandleForLib(Resource)
  %1206 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1204, %dx.types.Handle %1205, float %1098, float %1099, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1207 = extractvalue %dx.types.ResRet.f32 %1206, 0
  %1208 = extractvalue %dx.types.ResRet.f32 %1206, 1
  %1209 = extractvalue %dx.types.ResRet.f32 %1206, 2
  %1210 = extractvalue %dx.types.ResRet.f32 %1206, 3
  %1211 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 3)  ; CBufferLoadLegacy(handle,regIndex)
  %1212 = extractvalue %dx.types.CBufRet.f32 %1211, 0
  %1213 = extractvalue %dx.types.CBufRet.f32 %1211, 1
  %1214 = extractvalue %dx.types.CBufRet.f32 %1211, 2
  %1215 = extractvalue %dx.types.CBufRet.f32 %1211, 3
  %1216 = call float @dx.op.dot4.f32(i32 56, float %1207, float %1208, float %1209, float %1210, float %1212, float %1213, float %1214, float %1215)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1217 = fmul fast float %1216, 2.000000e+00
  %1218 = fadd fast float %1203, -1.000000e+00
  %1219 = fadd fast float %1218, %1217
  %1220 = call float @dx.op.binary.f32(i32 35, float %1219, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1221 = call float @dx.op.binary.f32(i32 36, float %1220, float 1.000000e+00)  ; FMin(a,b)
  %1222 = fadd fast float %1221, %1185
  %1223 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %33)  ; CreateHandleForLib(Resource)
  %1224 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %11)  ; CreateHandleForLib(Resource)
  %1225 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1223, %dx.types.Handle %1224, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1226 = extractvalue %dx.types.ResRet.f32 %1225, 1
  %1227 = extractvalue %dx.types.ResRet.f32 %1225, 2
  %1228 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 4)  ; CBufferLoadLegacy(handle,regIndex)
  %1229 = extractvalue %dx.types.CBufRet.f32 %1228, 1
  %1230 = extractvalue %dx.types.CBufRet.f32 %1228, 2
  %1231 = fsub fast float %1229, %1230
  %1232 = fmul fast float %1231, %1227
  %1233 = fadd fast float %1232, %1230
  %1234 = call float @dx.op.unary.f32(i32 7, float %1233)  ; Saturate(value)
  %1235 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 5)  ; CBufferLoadLegacy(handle,regIndex)
  %1236 = extractvalue %dx.types.CBufRet.f32 %1235, 0
  %1237 = extractvalue %dx.types.CBufRet.f32 %1235, 1
  %1238 = extractvalue %dx.types.CBufRet.f32 %1235, 2
  %1239 = extractvalue %dx.types.CBufRet.f32 %1235, 3
  %1240 = call float @dx.op.dot4.f32(i32 56, float %1176, float %1177, float %1178, float %1179, float %1236, float %1237, float %1238, float %1239)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1241 = fmul fast float %1240, 2.000000e+00
  %1242 = fadd fast float %1234, -1.000000e+00
  %1243 = fadd fast float %1242, %1241
  %1244 = call float @dx.op.binary.f32(i32 35, float %1243, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1245 = call float @dx.op.binary.f32(i32 36, float %1244, float 1.000000e+00)  ; FMin(a,b)
  %1246 = fadd fast float %1222, %1245
  %1247 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %32)  ; CreateHandleForLib(Resource)
  %1248 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %10)  ; CreateHandleForLib(Resource)
  %1249 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1247, %dx.types.Handle %1248, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1250 = extractvalue %dx.types.ResRet.f32 %1249, 1
  %1251 = extractvalue %dx.types.ResRet.f32 %1249, 2
  %1252 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 6)  ; CBufferLoadLegacy(handle,regIndex)
  %1253 = extractvalue %dx.types.CBufRet.f32 %1252, 1
  %1254 = extractvalue %dx.types.CBufRet.f32 %1252, 2
  %1255 = fsub fast float %1253, %1254
  %1256 = fmul fast float %1255, %1251
  %1257 = fadd fast float %1256, %1254
  %1258 = call float @dx.op.unary.f32(i32 7, float %1257)  ; Saturate(value)
  %1259 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 7)  ; CBufferLoadLegacy(handle,regIndex)
  %1260 = extractvalue %dx.types.CBufRet.f32 %1259, 0
  %1261 = extractvalue %dx.types.CBufRet.f32 %1259, 1
  %1262 = extractvalue %dx.types.CBufRet.f32 %1259, 2
  %1263 = extractvalue %dx.types.CBufRet.f32 %1259, 3
  %1264 = call float @dx.op.dot4.f32(i32 56, float %1176, float %1177, float %1178, float %1179, float %1260, float %1261, float %1262, float %1263)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1265 = fmul fast float %1264, 2.000000e+00
  %1266 = fadd fast float %1258, -1.000000e+00
  %1267 = fadd fast float %1266, %1265
  %1268 = call float @dx.op.binary.f32(i32 35, float %1267, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1269 = call float @dx.op.binary.f32(i32 36, float %1268, float 1.000000e+00)  ; FMin(a,b)
  %1270 = fadd fast float %1246, %1269
  %1271 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %31)  ; CreateHandleForLib(Resource)
  %1272 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %9)  ; CreateHandleForLib(Resource)
  %1273 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1271, %dx.types.Handle %1272, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1274 = extractvalue %dx.types.ResRet.f32 %1273, 1
  %1275 = extractvalue %dx.types.ResRet.f32 %1273, 2
  %1276 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 8)  ; CBufferLoadLegacy(handle,regIndex)
  %1277 = extractvalue %dx.types.CBufRet.f32 %1276, 1
  %1278 = extractvalue %dx.types.CBufRet.f32 %1276, 2
  %1279 = fsub fast float %1277, %1278
  %1280 = fmul fast float %1279, %1275
  %1281 = fadd fast float %1280, %1278
  %1282 = call float @dx.op.unary.f32(i32 7, float %1281)  ; Saturate(value)
  %1283 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 9)  ; CBufferLoadLegacy(handle,regIndex)
  %1284 = extractvalue %dx.types.CBufRet.f32 %1283, 0
  %1285 = extractvalue %dx.types.CBufRet.f32 %1283, 1
  %1286 = extractvalue %dx.types.CBufRet.f32 %1283, 2
  %1287 = extractvalue %dx.types.CBufRet.f32 %1283, 3
  %1288 = call float @dx.op.dot4.f32(i32 56, float %1176, float %1177, float %1178, float %1179, float %1284, float %1285, float %1286, float %1287)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1289 = fmul fast float %1288, 2.000000e+00
  %1290 = fadd fast float %1282, -1.000000e+00
  %1291 = fadd fast float %1290, %1289
  %1292 = call float @dx.op.binary.f32(i32 35, float %1291, float 0x3F1A36E2E0000000)  ; FMax(a,b)
  %1293 = call float @dx.op.binary.f32(i32 36, float %1292, float 1.000000e+00)  ; FMin(a,b)
  %1294 = fadd fast float %1270, %1293
  %1295 = fdiv fast float 1.000000e+00, %1294
  %1296 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %30)  ; CreateHandleForLib(Resource)
  %1297 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %18)  ; CreateHandleForLib(Resource)
  %1298 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1296, %dx.types.Handle %1297, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1299 = extractvalue %dx.types.ResRet.f32 %1298, 0
  %1300 = extractvalue %dx.types.ResRet.f32 %1298, 1
  %1301 = fmul fast float %1299, 2.000000e+00
  %1302 = fmul fast float %1300, 2.000000e+00
  %1303 = fadd fast float %1301, -1.000000e+00
  %1304 = fadd fast float %1302, -1.000000e+00
  %1305 = call float @dx.op.dot2.f32(i32 54, float %1303, float %1304, float %1303, float %1304)  ; Dot2(ax,ay,bx,by)
  %1306 = fsub fast float 1.000000e+00, %1305
  %1307 = call float @dx.op.unary.f32(i32 7, float %1306)  ; Saturate(value)
  %1308 = call float @dx.op.unary.f32(i32 24, float %1307)  ; Sqrt(value)
  %1309 = fmul fast float %1295, %1185
  %1310 = fmul fast float %1303, %1309
  %1311 = fmul fast float %1304, %1309
  %1312 = fmul fast float %1308, %1309
  %1313 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %29)  ; CreateHandleForLib(Resource)
  %1314 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %8)  ; CreateHandleForLib(Resource)
  %1315 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1313, %dx.types.Handle %1314, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1316 = extractvalue %dx.types.ResRet.f32 %1315, 0
  %1317 = extractvalue %dx.types.ResRet.f32 %1315, 1
  %1318 = fmul fast float %1316, 2.000000e+00
  %1319 = fmul fast float %1317, 2.000000e+00
  %1320 = fadd fast float %1318, -1.000000e+00
  %1321 = fadd fast float %1319, -1.000000e+00
  %1322 = call float @dx.op.dot2.f32(i32 54, float %1320, float %1321, float %1320, float %1321)  ; Dot2(ax,ay,bx,by)
  %1323 = fsub fast float 1.000000e+00, %1322
  %1324 = call float @dx.op.unary.f32(i32 7, float %1323)  ; Saturate(value)
  %1325 = call float @dx.op.unary.f32(i32 24, float %1324)  ; Sqrt(value)
  %1326 = fmul fast float %1295, %1221
  %1327 = fmul fast float %1320, %1326
  %1328 = fmul fast float %1321, %1326
  %1329 = fmul fast float %1325, %1326
  %1330 = fadd fast float %1327, %1310
  %1331 = fadd fast float %1328, %1311
  %1332 = fadd fast float %1329, %1312
  %1333 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %28)  ; CreateHandleForLib(Resource)
  %1334 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %7)  ; CreateHandleForLib(Resource)
  %1335 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1333, %dx.types.Handle %1334, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1336 = extractvalue %dx.types.ResRet.f32 %1335, 0
  %1337 = extractvalue %dx.types.ResRet.f32 %1335, 1
  %1338 = fmul fast float %1336, 2.000000e+00
  %1339 = fmul fast float %1337, 2.000000e+00
  %1340 = fadd fast float %1338, -1.000000e+00
  %1341 = fadd fast float %1339, -1.000000e+00
  %1342 = call float @dx.op.dot2.f32(i32 54, float %1340, float %1341, float %1340, float %1341)  ; Dot2(ax,ay,bx,by)
  %1343 = fsub fast float 1.000000e+00, %1342
  %1344 = call float @dx.op.unary.f32(i32 7, float %1343)  ; Saturate(value)
  %1345 = call float @dx.op.unary.f32(i32 24, float %1344)  ; Sqrt(value)
  %1346 = fmul fast float %1295, %1245
  %1347 = fmul fast float %1340, %1346
  %1348 = fmul fast float %1341, %1346
  %1349 = fmul fast float %1345, %1346
  %1350 = fadd fast float %1330, %1347
  %1351 = fadd fast float %1331, %1348
  %1352 = fadd fast float %1332, %1349
  %1353 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %27)  ; CreateHandleForLib(Resource)
  %1354 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %6)  ; CreateHandleForLib(Resource)
  %1355 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1353, %dx.types.Handle %1354, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1356 = extractvalue %dx.types.ResRet.f32 %1355, 0
  %1357 = extractvalue %dx.types.ResRet.f32 %1355, 1
  %1358 = fmul fast float %1356, 2.000000e+00
  %1359 = fmul fast float %1357, 2.000000e+00
  %1360 = fadd fast float %1358, -1.000000e+00
  %1361 = fadd fast float %1359, -1.000000e+00
  %1362 = call float @dx.op.dot2.f32(i32 54, float %1360, float %1361, float %1360, float %1361)  ; Dot2(ax,ay,bx,by)
  %1363 = fsub fast float 1.000000e+00, %1362
  %1364 = call float @dx.op.unary.f32(i32 7, float %1363)  ; Saturate(value)
  %1365 = call float @dx.op.unary.f32(i32 24, float %1364)  ; Sqrt(value)
  %1366 = fmul fast float %1295, %1269
  %1367 = fmul fast float %1360, %1366
  %1368 = fmul fast float %1361, %1366
  %1369 = fmul fast float %1365, %1366
  %1370 = fadd fast float %1350, %1367
  %1371 = fadd fast float %1351, %1368
  %1372 = fadd fast float %1352, %1369
  %1373 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %26)  ; CreateHandleForLib(Resource)
  %1374 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %5)  ; CreateHandleForLib(Resource)
  %1375 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1373, %dx.types.Handle %1374, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1376 = extractvalue %dx.types.ResRet.f32 %1375, 0
  %1377 = extractvalue %dx.types.ResRet.f32 %1375, 1
  %1378 = fmul fast float %1376, 2.000000e+00
  %1379 = fmul fast float %1377, 2.000000e+00
  %1380 = fadd fast float %1378, -1.000000e+00
  %1381 = fadd fast float %1379, -1.000000e+00
  %1382 = call float @dx.op.dot2.f32(i32 54, float %1380, float %1381, float %1380, float %1381)  ; Dot2(ax,ay,bx,by)
  %1383 = fsub fast float 1.000000e+00, %1382
  %1384 = call float @dx.op.unary.f32(i32 7, float %1383)  ; Saturate(value)
  %1385 = call float @dx.op.unary.f32(i32 24, float %1384)  ; Sqrt(value)
  %1386 = fmul fast float %1295, %1293
  %1387 = fmul fast float %1380, %1386
  %1388 = fmul fast float %1381, %1386
  %1389 = fmul fast float %1385, %1386
  %1390 = fadd fast float %1370, %1387
  %1391 = fadd fast float %1371, %1388
  %1392 = fadd fast float %1372, %1389
  %1393 = fmul fast float %1390, %1106
  %1394 = fmul fast float %1391, %1106
  %1395 = fmul fast float %1392, %1106
  %1396 = fadd fast float %1393, %700
  %1397 = fadd fast float %1394, %1105
  %1398 = fadd fast float %1395, %701
  %1399 = call float @dx.op.dot3.f32(i32 55, float %1396, float %1397, float %1398, float %1396, float %1397, float %1398)  ; Dot3(ax,ay,az,bx,by,bz)
  %1400 = call float @dx.op.unary.f32(i32 25, float %1399)  ; Rsqrt(value)
  %1401 = fmul fast float %1396, %1400
  %1402 = fmul fast float %1397, %1400
  %1403 = fmul fast float %1398, %1400
  %1404 = fmul fast float %1401, %1147
  %1405 = call float @dx.op.tertiary.f32(i32 46, float %1402, float %1154, float %1404)  ; FMad(a,b,c)
  %1406 = call float @dx.op.tertiary.f32(i32 46, float %1403, float %1163, float %1405)  ; FMad(a,b,c)
  %1407 = fmul fast float %1401, %1149
  %1408 = call float @dx.op.tertiary.f32(i32 46, float %1402, float %1157, float %1407)  ; FMad(a,b,c)
  %1409 = call float @dx.op.tertiary.f32(i32 46, float %1403, float %1166, float %1408)  ; FMad(a,b,c)
  %1410 = fmul fast float %1401, %1151
  %1411 = call float @dx.op.tertiary.f32(i32 46, float %1402, float %1160, float %1410)  ; FMad(a,b,c)
  %1412 = call float @dx.op.tertiary.f32(i32 46, float %1403, float %1169, float %1411)  ; FMad(a,b,c)
  %1413 = call float @dx.op.dot3.f32(i32 55, float %1406, float %1409, float %1412, float %1406, float %1409, float %1412)  ; Dot3(ax,ay,az,bx,by,bz)
  %1414 = call float @dx.op.unary.f32(i32 25, float %1413)  ; Rsqrt(value)
  %1415 = fmul fast float %1406, %1172
  %1416 = fmul fast float %1415, %1414
  %1417 = fmul fast float %1409, %1172
  %1418 = fmul fast float %1417, %1414
  %1419 = fmul fast float %1412, %1172
  %1420 = fmul fast float %1419, %1414
  %1421 = call %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32 59, %dx.types.Handle %61, i32 10)  ; CBufferLoadLegacy(handle,regIndex)
  %1422 = extractvalue %dx.types.CBufRet.f32 %1421, 0
  %1423 = extractvalue %dx.types.CBufRet.f32 %1421, 1
  %1424 = extractvalue %dx.types.CBufRet.f32 %1421, 2
  %1425 = extractvalue %dx.types.CBufRet.f32 %1421, 3
  %1426 = fmul fast float %1423, %1422
  %1427 = fmul fast float %1424, %1422
  %1428 = fmul fast float %1425, %1422
  %1429 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %25)  ; CreateHandleForLib(Resource)
  %1430 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1429, %dx.types.Handle %1297, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1431 = extractvalue %dx.types.ResRet.f32 %1430, 0
  %1432 = extractvalue %dx.types.ResRet.f32 %1430, 1
  %1433 = extractvalue %dx.types.ResRet.f32 %1430, 2
  %1434 = fmul fast float %1431, %1309
  %1435 = fmul fast float %1432, %1309
  %1436 = fmul fast float %1433, %1309
  %1437 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %24)  ; CreateHandleForLib(Resource)
  %1438 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %4)  ; CreateHandleForLib(Resource)
  %1439 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1437, %dx.types.Handle %1438, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1440 = extractvalue %dx.types.ResRet.f32 %1439, 0
  %1441 = extractvalue %dx.types.ResRet.f32 %1439, 1
  %1442 = extractvalue %dx.types.ResRet.f32 %1439, 2
  %1443 = fmul fast float %1440, %1326
  %1444 = fmul fast float %1441, %1326
  %1445 = fmul fast float %1442, %1326
  %1446 = fadd fast float %1443, %1434
  %1447 = fadd fast float %1444, %1435
  %1448 = fadd fast float %1445, %1436
  %1449 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %23)  ; CreateHandleForLib(Resource)
  %1450 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %3)  ; CreateHandleForLib(Resource)
  %1451 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1449, %dx.types.Handle %1450, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1452 = extractvalue %dx.types.ResRet.f32 %1451, 0
  %1453 = extractvalue %dx.types.ResRet.f32 %1451, 1
  %1454 = extractvalue %dx.types.ResRet.f32 %1451, 2
  %1455 = fmul fast float %1452, %1346
  %1456 = fmul fast float %1453, %1346
  %1457 = fmul fast float %1454, %1346
  %1458 = fadd fast float %1446, %1455
  %1459 = fadd fast float %1447, %1456
  %1460 = fadd fast float %1448, %1457
  %1461 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %22)  ; CreateHandleForLib(Resource)
  %1462 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %2)  ; CreateHandleForLib(Resource)
  %1463 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1461, %dx.types.Handle %1462, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1464 = extractvalue %dx.types.ResRet.f32 %1463, 0
  %1465 = extractvalue %dx.types.ResRet.f32 %1463, 1
  %1466 = extractvalue %dx.types.ResRet.f32 %1463, 2
  %1467 = fmul fast float %1464, %1366
  %1468 = fmul fast float %1465, %1366
  %1469 = fmul fast float %1466, %1366
  %1470 = fadd fast float %1458, %1467
  %1471 = fadd fast float %1459, %1468
  %1472 = fadd fast float %1460, %1469
  %1473 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %21)  ; CreateHandleForLib(Resource)
  %1474 = call %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32 160, %struct.SamplerState %1)  ; CreateHandleForLib(Resource)
  %1475 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1473, %dx.types.Handle %1474, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %1192)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1476 = extractvalue %dx.types.ResRet.f32 %1475, 0
  %1477 = extractvalue %dx.types.ResRet.f32 %1475, 1
  %1478 = extractvalue %dx.types.ResRet.f32 %1475, 2
  %1479 = fmul fast float %1476, %1386
  %1480 = fmul fast float %1477, %1386
  %1481 = fmul fast float %1478, %1386
  %1482 = fadd fast float %1470, %1479
  %1483 = fadd fast float %1471, %1480
  %1484 = fadd fast float %1472, %1481
  %1485 = call %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32 160, %"class.Texture2D<vector<float, 4> >" %20)  ; CreateHandleForLib(Resource)
  %1486 = call %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32 62, %dx.types.Handle %1485, %dx.types.Handle %1297, float %1188, float %1189, float undef, float undef, i32 0, i32 0, i32 undef, float %698)  ; SampleLevel(srv,sampler,coord0,coord1,coord2,coord3,offset0,offset1,offset2,LOD)
  %1487 = extractvalue %dx.types.ResRet.f32 %1486, 1
  %1488 = fmul fast float %1487, %1309
  %1489 = fmul fast float %1326, %1196
  %1490 = fmul fast float %1346, %1226
  %1491 = fmul fast float %1366, %1250
  %1492 = fmul fast float %1386, %1274
  %1493 = fadd fast float %1490, %1489
  %1494 = fadd fast float %1493, %1491
  %1495 = fadd fast float %1494, %1492
  %1496 = fadd fast float %1495, %1488
  %1497 = mul nuw nsw i32 %834, 40
  %1498 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %826, i32 %1497, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1499 = extractvalue %dx.types.ResRet.f32 %1498, 0
  %1500 = bitcast float %1499 to i32
  %1501 = call float @dx.op.rayTCurrent.f32(i32 154)  ; RayTCurrent()
  %1502 = zext i1 %1171 to i32
  %1503 = call float @dx.op.unary.f32(i32 7, float %1482)  ; Saturate(value)
  %1504 = call float @dx.op.unary.f32(i32 7, float %1483)  ; Saturate(value)
  %1505 = call float @dx.op.unary.f32(i32 7, float %1484)  ; Saturate(value)
  %1506 = call float @dx.op.unary.f32(i32 7, float %1496)  ; Saturate(value)
  %1507 = fmul fast float %1506, %1107
  %1508 = fadd fast float %1507, %703
  %1509 = call float @dx.op.dot3.f32(i32 55, float %1416, float %1418, float %1420, float %1416, float %1418, float %1420)  ; Dot3(ax,ay,az,bx,by,bz)
  %1510 = call float @dx.op.unary.f32(i32 25, float %1509)  ; Rsqrt(value)
  %1511 = fmul fast float %1510, %1416
  %1512 = fmul fast float %1510, %1418
  %1513 = fmul fast float %1510, %1420
  %1514 = call float @dx.op.binary.f32(i32 35, float %1426, float 0.000000e+00)  ; FMax(a,b)
  %1515 = call float @dx.op.binary.f32(i32 35, float %1427, float 0.000000e+00)  ; FMax(a,b)
  %1516 = call float @dx.op.binary.f32(i32 35, float %1428, float 0.000000e+00)  ; FMax(a,b)
  %1517 = and i32 %69, 16777216
  %1518 = icmp eq i32 %1517, 0
  br i1 %1518, label %1585, label %1519

; <label>:1519                                    ; preds = %1104
  %1520 = extractvalue %dx.types.CBufRet.f32 %704, 2
  %1521 = extractvalue %dx.types.CBufRet.f32 %704, 0
  %1522 = call %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32 160, %"class.StructuredBuffer<vector<float, 4> >" %43)  ; CreateHandleForLib(Resource)
  %1523 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 0, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1524 = extractvalue %dx.types.ResRet.f32 %1523, 0
  %1525 = extractvalue %dx.types.ResRet.f32 %1523, 1
  %1526 = extractvalue %dx.types.ResRet.f32 %1523, 2
  %1527 = extractvalue %dx.types.ResRet.f32 %1523, 3
  %1528 = call float @dx.op.dot4.f32(i32 56, float %1524, float %1525, float %1526, float %1527, float %1511, float %1512, float %1513, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1529 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 1, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1530 = extractvalue %dx.types.ResRet.f32 %1529, 0
  %1531 = extractvalue %dx.types.ResRet.f32 %1529, 1
  %1532 = extractvalue %dx.types.ResRet.f32 %1529, 2
  %1533 = extractvalue %dx.types.ResRet.f32 %1529, 3
  %1534 = call float @dx.op.dot4.f32(i32 56, float %1530, float %1531, float %1532, float %1533, float %1511, float %1512, float %1513, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1535 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 2, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1536 = extractvalue %dx.types.ResRet.f32 %1535, 0
  %1537 = extractvalue %dx.types.ResRet.f32 %1535, 1
  %1538 = extractvalue %dx.types.ResRet.f32 %1535, 2
  %1539 = extractvalue %dx.types.ResRet.f32 %1535, 3
  %1540 = call float @dx.op.dot4.f32(i32 56, float %1536, float %1537, float %1538, float %1539, float %1511, float %1512, float %1513, float 1.000000e+00)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1541 = fmul fast float %1511, %1512
  %1542 = fmul fast float %1512, %1513
  %1543 = fmul fast float %1513, %1513
  %1544 = fmul fast float %1513, %1511
  %1545 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 3, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1546 = extractvalue %dx.types.ResRet.f32 %1545, 0
  %1547 = extractvalue %dx.types.ResRet.f32 %1545, 1
  %1548 = extractvalue %dx.types.ResRet.f32 %1545, 2
  %1549 = extractvalue %dx.types.ResRet.f32 %1545, 3
  %1550 = call float @dx.op.dot4.f32(i32 56, float %1546, float %1547, float %1548, float %1549, float %1541, float %1542, float %1543, float %1544)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1551 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 4, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1552 = extractvalue %dx.types.ResRet.f32 %1551, 0
  %1553 = extractvalue %dx.types.ResRet.f32 %1551, 1
  %1554 = extractvalue %dx.types.ResRet.f32 %1551, 2
  %1555 = extractvalue %dx.types.ResRet.f32 %1551, 3
  %1556 = call float @dx.op.dot4.f32(i32 56, float %1552, float %1553, float %1554, float %1555, float %1541, float %1542, float %1543, float %1544)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1557 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 5, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1558 = extractvalue %dx.types.ResRet.f32 %1557, 0
  %1559 = extractvalue %dx.types.ResRet.f32 %1557, 1
  %1560 = extractvalue %dx.types.ResRet.f32 %1557, 2
  %1561 = extractvalue %dx.types.ResRet.f32 %1557, 3
  %1562 = call float @dx.op.dot4.f32(i32 56, float %1558, float %1559, float %1560, float %1561, float %1541, float %1542, float %1543, float %1544)  ; Dot4(ax,ay,az,aw,bx,by,bz,bw)
  %1563 = fmul fast float %1511, %1511
  %1564 = fmul fast float %1512, %1512
  %1565 = fsub fast float %1563, %1564
  %1566 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %1522, i32 6, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1567 = extractvalue %dx.types.ResRet.f32 %1566, 0
  %1568 = extractvalue %dx.types.ResRet.f32 %1566, 1
  %1569 = extractvalue %dx.types.ResRet.f32 %1566, 2
  %1570 = fmul fast float %1567, %1565
  %1571 = fmul fast float %1568, %1565
  %1572 = fmul fast float %1569, %1565
  %1573 = fadd fast float %1550, %1528
  %1574 = fadd fast float %1556, %1534
  %1575 = fadd fast float %1562, %1540
  %1576 = fadd fast float %1573, %1570
  %1577 = fadd fast float %1574, %1571
  %1578 = fadd fast float %1575, %1572
  %1579 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1576)  ; FMax(a,b)
  %1580 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1577)  ; FMax(a,b)
  %1581 = call float @dx.op.binary.f32(i32 35, float 0.000000e+00, float %1578)  ; FMax(a,b)
  %1582 = fmul fast float %1579, %1521
  %1583 = fmul fast float %1580, %705
  %1584 = fmul fast float %1581, %1520
  br label %1585

; <label>:1585                                    ; preds = %1519, %1104
  %1586 = phi float [ %1582, %1519 ], [ 0.000000e+00, %1104 ]
  %1587 = phi float [ %1583, %1519 ], [ 0.000000e+00, %1104 ]
  %1588 = phi float [ %1584, %1519 ], [ 0.000000e+00, %1104 ]
  %1589 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1109)  ; LegacyF32ToF16(value)
  %1590 = call i32 @dx.op.legacyF32ToF16(i32 130, float %710)  ; LegacyF32ToF16(value)
  %1591 = shl i32 %1590, 16
  %1592 = or i32 %1591, %1589
  %1593 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1514)  ; LegacyF32ToF16(value)
  %1594 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1515)  ; LegacyF32ToF16(value)
  %1595 = shl i32 %1594, 16
  %1596 = or i32 %1595, %1593
  %1597 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1516)  ; LegacyF32ToF16(value)
  %1598 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1511)  ; LegacyF32ToF16(value)
  %1599 = shl i32 %1598, 16
  %1600 = or i32 %1599, %1597
  %1601 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1512)  ; LegacyF32ToF16(value)
  %1602 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1513)  ; LegacyF32ToF16(value)
  %1603 = shl i32 %1602, 16
  %1604 = or i32 %1603, %1601
  %1605 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1503)  ; LegacyF32ToF16(value)
  %1606 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1504)  ; LegacyF32ToF16(value)
  %1607 = shl i32 %1606, 16
  %1608 = or i32 %1607, %1605
  %1609 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1505)  ; LegacyF32ToF16(value)
  %1610 = call i32 @dx.op.legacyF32ToF16(i32 130, float 1.000000e+00)  ; LegacyF32ToF16(value)
  %1611 = shl i32 %1610, 16
  %1612 = or i32 %1611, %1609
  %1613 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1508)  ; LegacyF32ToF16(value)
  %1614 = shl i32 %1613, 16
  %1615 = or i32 %1614, 32768
  %1616 = shl nuw nsw i32 %1502, 23
  %1617 = shl i32 %1500, 19
  %1618 = and i32 %1617, -536870912
  %1619 = or i32 %1616, %1618
  %1620 = or i32 %1619, %1610
  %1621 = or i32 %1620, 65536
  %1622 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1586)  ; LegacyF32ToF16(value)
  %1623 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1587)  ; LegacyF32ToF16(value)
  %1624 = shl i32 %1623, 16
  %1625 = or i32 %1624, %1622
  %1626 = call i32 @dx.op.legacyF32ToF16(i32 130, float %1588)  ; LegacyF32ToF16(value)
  %1627 = call i32 @dx.op.legacyF32ToF16(i32 130, float 0.000000e+00)  ; LegacyF32ToF16(value)
  %1628 = shl i32 %1627, 16
  %1629 = or i32 %1628, %1627
  store float %1501, float* %67, align 4
  store i32 %1592, i32* %706, align 4
  store float 0.000000e+00, float* %697, align 4
  %1630 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 0
  store i32 %1596, i32* %1630, align 4
  %1631 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 1
  store i32 %1600, i32* %1631, align 4
  %1632 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 3, i32 2
  store i32 %1604, i32* %1632, align 4
  %1633 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 0
  store i32 %1608, i32* %1633, align 4
  %1634 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 4, i32 1
  store i32 %1612, i32* %1634, align 4
  %1635 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 5
  store i32 %1615, i32* %1635, align 4
  store i32 %1621, i32* %68, align 4
  %1636 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 0
  store i32 %1625, i32* %1636, align 4
  %1637 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 7, i32 1
  store i32 %1626, i32* %1637, align 4
  %1638 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 8
  store i32 6911, i32* %1638, align 4
  %1639 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 0
  store i32 %1629, i32* %1639, align 4
  %1640 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 9, i32 1
  store i32 %1629, i32* %1640, align 4
  %1641 = getelementptr inbounds %struct.FPackedMaterialClosestHitPayload, %struct.FPackedMaterialClosestHitPayload* %PackedPayload, i32 0, i32 10
  store i32 0, i32* %1641, align 4
  br i1 %71, label %1642, label %1655

; <label>:1642                                    ; preds = %1585
  %1643 = call i32 @dx.op.instanceIndex.i32(i32 142)  ; InstanceIndex()
  %1644 = extractvalue %dx.types.CBufRet.i32 %772, 3
  %1645 = sub i32 %1643, %1644
  %1646 = mul i32 %814, 40
  %1647 = call %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32 139, %dx.types.Handle %826, i32 %1646, i32 0, i8 15, i32 4)  ; RawBufferLoad(srv,index,elementOffset,mask,alignment)
  %1648 = extractvalue %dx.types.ResRet.f32 %1647, 2
  %1649 = bitcast float %1648 to i32
  %1650 = icmp eq i32 %1649, 1
  %1651 = select i1 %1650, i32 0, i32 %1645
  %1652 = extractvalue %dx.types.ResRet.f32 %1647, 1
  %1653 = bitcast float %1652 to i32
  %1654 = add i32 %1653, %1651
  store i32 %1654, i32* %1638, align 4, !tbaa !107
  br label %1655

; <label>:1655                                    ; preds = %1642, %1585, %693
  ret void
}

; Function Attrs: nounwind readnone
declare float @dx.op.binary.f32(i32, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.unary.f32(i32, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceID.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.primitiveIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.hitKind.i32(i32) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.instanceIndex.i32(i32) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot3.f32(i32, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.legacyF32ToF16(i32, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.tertiary.f32(i32, float, float, float) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.sampleLevel.f32(i32, %dx.types.Handle, %dx.types.Handle, float, float, float, float, i32, i32, i32, float) #2

; Function Attrs: nounwind readnone
declare float @dx.op.dot2.f32(i32, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.dot4.f32(i32, float, float, float, float, float, float, float, float) #1

; Function Attrs: nounwind readnone
declare float @dx.op.legacyF16ToF32(i32, i32) #1

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.rawBufferLoad.i32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.bufferLoad.f32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.f32 @dx.op.rawBufferLoad.f32(i32, %dx.types.Handle, i32, i32, i8, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.ResRet.i32 @dx.op.bufferLoad.i32(i32, %dx.types.Handle, i32, i32) #2

; Function Attrs: nounwind readnone
declare float @dx.op.worldRayDirection.f32(i32, i8) #1

; Function Attrs: nounwind readnone
declare i32 @dx.op.binary.i32(i32, i32, i32) #1

; Function Attrs: nounwind readonly
declare float @dx.op.rayTCurrent.f32(i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.f32 @dx.op.cbufferLoadLegacy.f32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.CBufRet.i32 @dx.op.cbufferLoadLegacy.i32(i32, %dx.types.Handle, i32) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.View(i32, %View) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeMVF(i32, %LandscapeMVF) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeContinuousLODParameters(i32, %LandscapeContinuousLODParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.LandscapeParameters(i32, %LandscapeParameters) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.Material(i32, %Material) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.HitGroupSystemRootConstants(i32, %HitGroupSystemRootConstants) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.SamplerState(i32, %struct.SamplerState) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Texture2D<vector<float, 4> >"(i32, %"class.Texture2D<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @dx.op.createHandleForLib.struct.ByteAddressBuffer(i32, %struct.ByteAddressBuffer) #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<float>"(i32, %"class.Buffer<float>") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.StructuredBuffer<vector<float, 4> >"(i32, %"class.StructuredBuffer<vector<float, 4> >") #2

; Function Attrs: nounwind readonly
declare %dx.types.Handle @"dx.op.createHandleForLib.class.Buffer<unsigned int>"(i32, %"class.Buffer<unsigned int>") #2

attributes #0 = { nounwind }
attributes #1 = { nounwind readnone }
attributes #2 = { nounwind readonly }

!llvm.ident = !{!0}
!dx.version = !{!1}
!dx.valver = !{!2}
!dx.shaderModel = !{!3}
!dx.resources = !{!4}
!dx.entryPoints = !{!62, !65}

!0 = !{!"clang version 3.7.0 (tags/RELEASE_370/final)"}
!1 = !{i32 1, i32 3}
!2 = !{i32 1, i32 6}
!3 = !{!"lib", i32 6, i32 3}
!4 = !{!5, null, !36, !43}
!5 = !{!6, !8, !9, !10, !12, !14, !15, !16, !17, !18, !19, !20, !21, !22, !23, !24, !25, !26, !27, !28, !29, !30, !31, !32, !33, !34, !35}
!6 = !{i32 0, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_PrimitiveSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_PrimitiveSceneData", i32 0, i32 0, i32 1, i32 12, i32 0, !7}
!7 = !{i32 1, i32 16}
!8 = !{i32 1, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_InstanceSceneData@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_InstanceSceneData", i32 0, i32 1, i32 1, i32 12, i32 0, !7}
!9 = !{i32 2, %"class.StructuredBuffer<vector<float, 4> >"* @"\01?View_SkyIrradianceEnvironmentMap@@3V?$StructuredBuffer@V?$vector@M$03@@@@A", !"View_SkyIrradianceEnvironmentMap", i32 0, i32 2, i32 1, i32 12, i32 0, !7}
!10 = !{i32 3, %"class.Buffer<unsigned int>"* @"\01?View_LandscapeIndirection@@3V?$Buffer@I@@A", !"View_LandscapeIndirection", i32 0, i32 3, i32 1, i32 10, i32 0, !11}
!11 = !{i32 0, i32 5}
!12 = !{i32 4, %"class.Buffer<float>"* @"\01?View_LandscapePerComponentData@@3V?$Buffer@M@@A", !"View_LandscapePerComponentData", i32 0, i32 4, i32 1, i32 10, i32 0, !13}
!13 = !{i32 0, i32 9}
!14 = !{i32 5, %"class.Buffer<float>"* @"\01?LandscapeContinuousLODParameters_SectionLODBias@@3V?$Buffer@M@@A", !"LandscapeContinuousLODParameters_SectionLODBias", i32 0, i32 5, i32 1, i32 10, i32 0, !13}
!15 = !{i32 6, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_HeightmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_HeightmapTexture", i32 0, i32 6, i32 1, i32 2, i32 0, !13}
!16 = !{i32 7, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_NormalmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_NormalmapTexture", i32 0, i32 7, i32 1, i32 2, i32 0, !13}
!17 = !{i32 8, %"class.Texture2D<vector<float, 4> >"* @"\01?LandscapeParameters_XYOffsetmapTexture@@3V?$Texture2D@V?$vector@M$03@@@@A", !"LandscapeParameters_XYOffsetmapTexture", i32 0, i32 8, i32 1, i32 2, i32 0, !13}
!18 = !{i32 9, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_0@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_0", i32 0, i32 9, i32 1, i32 2, i32 0, !13}
!19 = !{i32 10, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_1@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_1", i32 0, i32 10, i32 1, i32 2, i32 0, !13}
!20 = !{i32 11, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_2@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_2", i32 0, i32 11, i32 1, i32 2, i32 0, !13}
!21 = !{i32 12, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_3@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_3", i32 0, i32 12, i32 1, i32 2, i32 0, !13}
!22 = !{i32 13, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_4@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_4", i32 0, i32 13, i32 1, i32 2, i32 0, !13}
!23 = !{i32 14, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_5@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_5", i32 0, i32 14, i32 1, i32 2, i32 0, !13}
!24 = !{i32 15, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_6@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_6", i32 0, i32 15, i32 1, i32 2, i32 0, !13}
!25 = !{i32 16, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_7@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_7", i32 0, i32 16, i32 1, i32 2, i32 0, !13}
!26 = !{i32 17, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_8@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_8", i32 0, i32 17, i32 1, i32 2, i32 0, !13}
!27 = !{i32 18, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_9@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_9", i32 0, i32 18, i32 1, i32 2, i32 0, !13}
!28 = !{i32 19, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_10@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_10", i32 0, i32 19, i32 1, i32 2, i32 0, !13}
!29 = !{i32 20, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_11@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_11", i32 0, i32 20, i32 1, i32 2, i32 0, !13}
!30 = !{i32 21, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_12@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_12", i32 0, i32 21, i32 1, i32 2, i32 0, !13}
!31 = !{i32 22, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_13@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_13", i32 0, i32 22, i32 1, i32 2, i32 0, !13}
!32 = !{i32 23, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_14@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_14", i32 0, i32 23, i32 1, i32 2, i32 0, !13}
!33 = !{i32 24, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_15@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_15", i32 0, i32 24, i32 1, i32 2, i32 0, !13}
!34 = !{i32 25, %"class.Texture2D<vector<float, 4> >"* @"\01?Material_Texture2D_16@@3V?$Texture2D@V?$vector@M$03@@@@A", !"Material_Texture2D_16", i32 0, i32 25, i32 1, i32 2, i32 0, !13}
!35 = !{i32 26, %struct.ByteAddressBuffer* @"\01?HitGroupSystemIndexBuffer@@3UByteAddressBuffer@@A", !"HitGroupSystemIndexBuffer", i32 2, i32 0, i32 1, i32 11, i32 0, null}
!36 = !{!37, !38, !39, !40, !41, !42}
!37 = !{i32 0, %View* @View, !"View", i32 0, i32 0, i32 1, i32 4960, null}
!38 = !{i32 1, %LandscapeMVF* @LandscapeMVF, !"LandscapeMVF", i32 0, i32 1, i32 1, i32 8, null}
!39 = !{i32 2, %LandscapeContinuousLODParameters* @LandscapeContinuousLODParameters, !"LandscapeContinuousLODParameters", i32 0, i32 2, i32 1, i32 24, null}
!40 = !{i32 3, %LandscapeParameters* @LandscapeParameters, !"LandscapeParameters", i32 0, i32 3, i32 1, i32 208, null}
!41 = !{i32 4, %Material* @Material, !"Material", i32 0, i32 4, i32 1, i32 176, null}
!42 = !{i32 5, %HitGroupSystemRootConstants* @HitGroupSystemRootConstants, !"HitGroupSystemRootConstants", i32 2, i32 0, i32 1, i32 16, null}
!43 = !{!44, !45, !46, !47, !48, !49, !50, !51, !52, !53, !54, !55, !56, !57, !58, !59, !60, !61}
!44 = !{i32 0, %struct.SamplerState* @"\01?View_MaterialTextureBilinearWrapedSampler@@3USamplerState@@A", !"View_MaterialTextureBilinearWrapedSampler", i32 0, i32 0, i32 1, i32 0, null}
!45 = !{i32 1, %struct.SamplerState* @"\01?LandscapeParameters_HeightmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_HeightmapTextureSampler", i32 0, i32 1, i32 1, i32 0, null}
!46 = !{i32 2, %struct.SamplerState* @"\01?LandscapeParameters_NormalmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_NormalmapTextureSampler", i32 0, i32 2, i32 1, i32 0, null}
!47 = !{i32 3, %struct.SamplerState* @"\01?LandscapeParameters_XYOffsetmapTextureSampler@@3USamplerState@@A", !"LandscapeParameters_XYOffsetmapTextureSampler", i32 0, i32 3, i32 1, i32 0, null}
!48 = !{i32 4, %struct.SamplerState* @"\01?Material_Texture2D_0Sampler@@3USamplerState@@A", !"Material_Texture2D_0Sampler", i32 0, i32 4, i32 1, i32 0, null}
!49 = !{i32 5, %struct.SamplerState* @"\01?Material_Texture2D_1Sampler@@3USamplerState@@A", !"Material_Texture2D_1Sampler", i32 0, i32 5, i32 1, i32 0, null}
!50 = !{i32 6, %struct.SamplerState* @"\01?Material_Texture2D_2Sampler@@3USamplerState@@A", !"Material_Texture2D_2Sampler", i32 0, i32 6, i32 1, i32 0, null}
!51 = !{i32 7, %struct.SamplerState* @"\01?Material_Texture2D_3Sampler@@3USamplerState@@A", !"Material_Texture2D_3Sampler", i32 0, i32 7, i32 1, i32 0, null}
!52 = !{i32 8, %struct.SamplerState* @"\01?Material_Texture2D_4Sampler@@3USamplerState@@A", !"Material_Texture2D_4Sampler", i32 0, i32 8, i32 1, i32 0, null}
!53 = !{i32 9, %struct.SamplerState* @"\01?Material_Texture2D_5Sampler@@3USamplerState@@A", !"Material_Texture2D_5Sampler", i32 0, i32 9, i32 1, i32 0, null}
!54 = !{i32 10, %struct.SamplerState* @"\01?Material_Texture2D_7Sampler@@3USamplerState@@A", !"Material_Texture2D_7Sampler", i32 0, i32 10, i32 1, i32 0, null}
!55 = !{i32 11, %struct.SamplerState* @"\01?Material_Texture2D_8Sampler@@3USamplerState@@A", !"Material_Texture2D_8Sampler", i32 0, i32 11, i32 1, i32 0, null}
!56 = !{i32 12, %struct.SamplerState* @"\01?Material_Texture2D_9Sampler@@3USamplerState@@A", !"Material_Texture2D_9Sampler", i32 0, i32 12, i32 1, i32 0, null}
!57 = !{i32 13, %struct.SamplerState* @"\01?Material_Texture2D_10Sampler@@3USamplerState@@A", !"Material_Texture2D_10Sampler", i32 0, i32 13, i32 1, i32 0, null}
!58 = !{i32 14, %struct.SamplerState* @"\01?Material_Texture2D_12Sampler@@3USamplerState@@A", !"Material_Texture2D_12Sampler", i32 0, i32 14, i32 1, i32 0, null}
!59 = !{i32 15, %struct.SamplerState* @"\01?Material_Texture2D_13Sampler@@3USamplerState@@A", !"Material_Texture2D_13Sampler", i32 0, i32 15, i32 1, i32 0, null}
!60 = !{i32 16, %struct.SamplerState* @"\01?Material_Texture2D_14Sampler@@3USamplerState@@A", !"Material_Texture2D_14Sampler", i32 0, i32 16, i32 1, i32 0, null}
!61 = !{i32 17, %struct.SamplerState* @"\01?Material_Texture2D_15Sampler@@3USamplerState@@A", !"Material_Texture2D_15Sampler", i32 0, i32 17, i32 1, i32 0, null}
!62 = !{null, !"", null, !4, !63}
!63 = !{i32 0, i64 8388624, i32 5, !64}
!64 = !{i32 0}
!65 = !{void (%struct.FPackedMaterialClosestHitPayload*, %struct.FDefaultAttributes*)* @"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", !"\01?MaterialCHS@@YAXUFPackedMaterialClosestHitPayload@@UFDefaultAttributes@@@Z", null, null, !66}
!66 = !{i32 8, i32 10, i32 6, i32 64, i32 7, i32 8, i32 5, !64}
!67 = !{!68, !70}
!68 = distinct !{!68, !69, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %PixelMaterialInputs"}
!69 = distinct !{!69, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z"}
!70 = distinct !{!70, !71, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z: %PixelMaterialInputs"}
!71 = distinct !{!71, !"\01?internal.CalcMaterialParametersEx@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@V?$vector@M$03@@2_NV?$vector@M$02@@4@Z"}
!72 = !{!73, !68, !70}
!73 = distinct !{!73, !69, !"\01?internal.CalcPixelMaterialInputs@@YAXUFMaterialPixelParameters@@UFPixelMaterialInputs@@@Z: %Parameters"}
!74 = !{!75, !77, !79, !80}
!75 = distinct !{!75, !76, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!76 = distinct !{!76, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!77 = distinct !{!77, !78, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %Interpolants"}
!78 = distinct !{!78, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z"}
!79 = distinct !{!79, !78, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@AIAV?$vector@M$02@@@Z: %FaceNormal"}
!80 = distinct !{!80, !81, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z: %Interpolants"}
!81 = distinct !{!81, !"\01?internal.CalcInterpolants@@YAXUFRayCone@@UFDefaultAttributes@@UFVertexFactoryInterpolantsVSToPS@@@Z"}
!82 = !{!83, !68, !70}
!83 = distinct !{!83, !84, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z: %agg.result"}
!84 = distinct !{!84, !"\01?internal.GetMaterialSharedSampler@@YA?AUSamplerState@@U1@0@Z"}
!85 = !{!86, !88, !77, !79, !80}
!86 = distinct !{!86, !87, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z: %agg.result"}
!87 = distinct !{!87, !"\01?internal.LoadTriangleBaseAttributes@@YA?AUFTriangleBaseAttributes@@I@Z"}
!88 = distinct !{!88, !89, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!89 = distinct !{!89, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!90 = !{!91, !93, !94, !96, !97}
!91 = distinct !{!91, !92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutDiffuseLighting"}
!92 = distinct !{!92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z"}
!93 = distinct !{!93, !92, !"\01?internal.GetSkyLighting@@YAXUFMaterialPixelParameters@@MV?$vector@M$02@@V?$vector@M$01@@I1I_NAIAV2@4@Z: %OutSubsurfaceLighting"}
!94 = distinct !{!94, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutDiffuseLighting"}
!95 = distinct !{!95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z"}
!96 = distinct !{!96, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutSubsurfaceLighting"}
!97 = distinct !{!97, !95, !"\01?internal.GetPrecomputedIndirectLightingAndSkyLight@@YAXUFMaterialPixelParameters@@UFVertexFactoryInterpolantsVSToPS@@MV?$vector@M$02@@2I_NAIAV3@4AIAM@Z: %OutIndirectIrradiance"}
!98 = !{!99, !101, !75, !77, !79, !80}
!99 = distinct !{!99, !100, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z: %agg.result"}
!100 = distinct !{!100, !"\01?internal.GetInstanceSceneData@@YA?AUFInstanceSceneData@@II_N@Z"}
!101 = distinct !{!101, !102, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z: %agg.result"}
!102 = distinct !{!102, !"\01?internal.GetSceneDataIntermediates@@YA?AUFSceneDataIntermediates@@II@Z"}
!103 = !{!104, !104, i64 0}
!104 = !{!"float", !105, i64 0}
!105 = !{!"omnipotent char", !106, i64 0}
!106 = !{!"Simple C/C++ TBAA"}
!107 = !{!108, !108, i64 0}
!108 = !{!"int", !105, i64 0}
!109 = !{!110}
!110 = distinct !{!110, !111, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z: %agg.result"}
!111 = distinct !{!111, !"\01?internal.LoadVertexFactoryInputForHGS@@YA?AUFVertexFactoryInput@@IH@Z"}
!112 = distinct !{!112, !"dx.controlflow.hints", i32 1}
!113 = !{!114}
!114 = distinct !{!114, !115, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z: %agg.result"}
!115 = distinct !{!115, !"\01?internal.GetVertexFactoryIntermediates@@YA?AUFVertexFactoryIntermediates@@UFVertexFactoryInput@@@Z"}
!116 = !{!117}
!117 = distinct !{!117, !118, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ: %agg.result"}
!118 = distinct !{!118, !"\01?internal.GetRayCone@FPackedMaterialClosestHitPayload@@QAA?AUFRayCone@@XZ"}
!119 = !{!77, !79, !80}
!120 = !{!88, !77, !79, !80}
